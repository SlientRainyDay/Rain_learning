-- Wireshark dissector for the MAVLink protocol (please see https://mavlink.io/en for details)

unknownFrameBeginOffset = 0
local bit = require "bit32"
mavlink_proto = Proto("mavlink_proto", "MAVLink protocol")
f = mavlink_proto.fields

-- from http://lua-users.org/wiki/TimeZone
local function get_timezone()
    local now = os.time()
    return os.difftime(now, os.time(os.date("!*t", now)))
end
local signature_time_ref = get_timezone() + os.time{year=2015, month=1, day=1, hour=0}

payload_fns = {}

protocolVersions = {
    [0xfd] = "MAVLink 2.0",
    [0xfe] = "MAVLink 1.0",
    [0x55] = "MAVLink 0.9"
}

messageName = {
    [1] = 'SYS_STATUS',
    [2] = 'SYSTEM_TIME',
    [4] = 'PING',
    [5] = 'CHANGE_OPERATOR_CONTROL',
    [6] = 'CHANGE_OPERATOR_CONTROL_ACK',
    [7] = 'AUTH_KEY',
    [8] = 'LINK_NODE_STATUS',
    [11] = 'SET_MODE',
    [20] = 'PARAM_REQUEST_READ',
    [21] = 'PARAM_REQUEST_LIST',
    [22] = 'PARAM_VALUE',
    [23] = 'PARAM_SET',
    [24] = 'GPS_RAW_INT',
    [25] = 'GPS_STATUS',
    [26] = 'SCALED_IMU',
    [27] = 'RAW_IMU',
    [28] = 'RAW_PRESSURE',
    [29] = 'SCALED_PRESSURE',
    [30] = 'ATTITUDE',
    [31] = 'ATTITUDE_QUATERNION',
    [32] = 'LOCAL_POSITION_NED',
    [33] = 'GLOBAL_POSITION_INT',
    [34] = 'RC_CHANNELS_SCALED',
    [35] = 'RC_CHANNELS_RAW',
    [36] = 'SERVO_OUTPUT_RAW',
    [37] = 'MISSION_REQUEST_PARTIAL_LIST',
    [38] = 'MISSION_WRITE_PARTIAL_LIST',
    [39] = 'MISSION_ITEM',
    [40] = 'MISSION_REQUEST',
    [41] = 'MISSION_SET_CURRENT',
    [42] = 'MISSION_CURRENT',
    [43] = 'MISSION_REQUEST_LIST',
    [44] = 'MISSION_COUNT',
    [45] = 'MISSION_CLEAR_ALL',
    [46] = 'MISSION_ITEM_REACHED',
    [47] = 'MISSION_ACK',
    [48] = 'SET_GPS_GLOBAL_ORIGIN',
    [49] = 'GPS_GLOBAL_ORIGIN',
    [50] = 'PARAM_MAP_RC',
    [51] = 'MISSION_REQUEST_INT',
    [54] = 'SAFETY_SET_ALLOWED_AREA',
    [55] = 'SAFETY_ALLOWED_AREA',
    [61] = 'ATTITUDE_QUATERNION_COV',
    [62] = 'NAV_CONTROLLER_OUTPUT',
    [63] = 'GLOBAL_POSITION_INT_COV',
    [64] = 'LOCAL_POSITION_NED_COV',
    [65] = 'RC_CHANNELS',
    [66] = 'REQUEST_DATA_STREAM',
    [67] = 'DATA_STREAM',
    [69] = 'MANUAL_CONTROL',
    [70] = 'RC_CHANNELS_OVERRIDE',
    [73] = 'MISSION_ITEM_INT',
    [74] = 'VFR_HUD',
    [75] = 'COMMAND_INT',
    [76] = 'COMMAND_LONG',
    [77] = 'COMMAND_ACK',
    [80] = 'COMMAND_CANCEL',
    [81] = 'MANUAL_SETPOINT',
    [82] = 'SET_ATTITUDE_TARGET',
    [83] = 'ATTITUDE_TARGET',
    [84] = 'SET_POSITION_TARGET_LOCAL_NED',
    [85] = 'POSITION_TARGET_LOCAL_NED',
    [86] = 'SET_POSITION_TARGET_GLOBAL_INT',
    [87] = 'POSITION_TARGET_GLOBAL_INT',
    [89] = 'LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET',
    [90] = 'HIL_STATE',
    [91] = 'HIL_CONTROLS',
    [92] = 'HIL_RC_INPUTS_RAW',
    [93] = 'HIL_ACTUATOR_CONTROLS',
    [100] = 'OPTICAL_FLOW',
    [101] = 'GLOBAL_VISION_POSITION_ESTIMATE',
    [102] = 'VISION_POSITION_ESTIMATE',
    [103] = 'VISION_SPEED_ESTIMATE',
    [104] = 'VICON_POSITION_ESTIMATE',
    [105] = 'HIGHRES_IMU',
    [106] = 'OPTICAL_FLOW_RAD',
    [107] = 'HIL_SENSOR',
    [108] = 'SIM_STATE',
    [109] = 'RADIO_STATUS',
    [110] = 'FILE_TRANSFER_PROTOCOL',
    [111] = 'TIMESYNC',
    [112] = 'CAMERA_TRIGGER',
    [113] = 'HIL_GPS',
    [114] = 'HIL_OPTICAL_FLOW',
    [115] = 'HIL_STATE_QUATERNION',
    [116] = 'SCALED_IMU2',
    [117] = 'LOG_REQUEST_LIST',
    [118] = 'LOG_ENTRY',
    [119] = 'LOG_REQUEST_DATA',
    [120] = 'LOG_DATA',
    [121] = 'LOG_ERASE',
    [122] = 'LOG_REQUEST_END',
    [123] = 'GPS_INJECT_DATA',
    [124] = 'GPS2_RAW',
    [125] = 'POWER_STATUS',
    [126] = 'SERIAL_CONTROL',
    [127] = 'GPS_RTK',
    [128] = 'GPS2_RTK',
    [129] = 'SCALED_IMU3',
    [130] = 'DATA_TRANSMISSION_HANDSHAKE',
    [131] = 'ENCAPSULATED_DATA',
    [132] = 'DISTANCE_SENSOR',
    [133] = 'TERRAIN_REQUEST',
    [134] = 'TERRAIN_DATA',
    [135] = 'TERRAIN_CHECK',
    [136] = 'TERRAIN_REPORT',
    [137] = 'SCALED_PRESSURE2',
    [138] = 'ATT_POS_MOCAP',
    [139] = 'SET_ACTUATOR_CONTROL_TARGET',
    [140] = 'ACTUATOR_CONTROL_TARGET',
    [141] = 'ALTITUDE',
    [142] = 'RESOURCE_REQUEST',
    [143] = 'SCALED_PRESSURE3',
    [144] = 'FOLLOW_TARGET',
    [146] = 'CONTROL_SYSTEM_STATE',
    [147] = 'BATTERY_STATUS',
    [148] = 'AUTOPILOT_VERSION',
    [149] = 'LANDING_TARGET',
    [162] = 'FENCE_STATUS',
    [192] = 'MAG_CAL_REPORT',
    [225] = 'EFI_STATUS',
    [230] = 'ESTIMATOR_STATUS',
    [231] = 'WIND_COV',
    [232] = 'GPS_INPUT',
    [233] = 'GPS_RTCM_DATA',
    [234] = 'HIGH_LATENCY',
    [235] = 'HIGH_LATENCY2',
    [241] = 'VIBRATION',
    [242] = 'HOME_POSITION',
    [243] = 'SET_HOME_POSITION',
    [244] = 'MESSAGE_INTERVAL',
    [245] = 'EXTENDED_SYS_STATE',
    [246] = 'ADSB_VEHICLE',
    [247] = 'COLLISION',
    [248] = 'V2_EXTENSION',
    [249] = 'MEMORY_VECT',
    [250] = 'DEBUG_VECT',
    [251] = 'NAMED_VALUE_FLOAT',
    [252] = 'NAMED_VALUE_INT',
    [253] = 'STATUSTEXT',
    [254] = 'DEBUG',
    [256] = 'SETUP_SIGNING',
    [257] = 'BUTTON_CHANGE',
    [258] = 'PLAY_TUNE',
    [259] = 'CAMERA_INFORMATION',
    [260] = 'CAMERA_SETTINGS',
    [261] = 'STORAGE_INFORMATION',
    [262] = 'CAMERA_CAPTURE_STATUS',
    [263] = 'CAMERA_IMAGE_CAPTURED',
    [264] = 'FLIGHT_INFORMATION',
    [265] = 'MOUNT_ORIENTATION',
    [266] = 'LOGGING_DATA',
    [267] = 'LOGGING_DATA_ACKED',
    [268] = 'LOGGING_ACK',
    [269] = 'VIDEO_STREAM_INFORMATION',
    [270] = 'VIDEO_STREAM_STATUS',
    [271] = 'CAMERA_FOV_STATUS',
    [275] = 'CAMERA_TRACKING_IMAGE_STATUS',
    [276] = 'CAMERA_TRACKING_GEO_STATUS',
    [280] = 'GIMBAL_MANAGER_INFORMATION',
    [281] = 'GIMBAL_MANAGER_STATUS',
    [282] = 'GIMBAL_MANAGER_SET_ATTITUDE',
    [283] = 'GIMBAL_DEVICE_INFORMATION',
    [284] = 'GIMBAL_DEVICE_SET_ATTITUDE',
    [285] = 'GIMBAL_DEVICE_ATTITUDE_STATUS',
    [286] = 'AUTOPILOT_STATE_FOR_GIMBAL_DEVICE',
    [287] = 'GIMBAL_MANAGER_SET_PITCHYAW',
    [288] = 'GIMBAL_MANAGER_SET_MANUAL_CONTROL',
    [290] = 'ESC_INFO',
    [291] = 'ESC_STATUS',
    [299] = 'WIFI_CONFIG_AP',
    [301] = 'AIS_VESSEL',
    [310] = 'UAVCAN_NODE_STATUS',
    [311] = 'UAVCAN_NODE_INFO',
    [320] = 'PARAM_EXT_REQUEST_READ',
    [321] = 'PARAM_EXT_REQUEST_LIST',
    [322] = 'PARAM_EXT_VALUE',
    [323] = 'PARAM_EXT_SET',
    [324] = 'PARAM_EXT_ACK',
    [330] = 'OBSTACLE_DISTANCE',
    [331] = 'ODOMETRY',
    [332] = 'TRAJECTORY_REPRESENTATION_WAYPOINTS',
    [333] = 'TRAJECTORY_REPRESENTATION_BEZIER',
    [334] = 'CELLULAR_STATUS',
    [335] = 'ISBD_LINK_STATUS',
    [336] = 'CELLULAR_CONFIG',
    [339] = 'RAW_RPM',
    [340] = 'UTM_GLOBAL_POSITION',
    [350] = 'DEBUG_FLOAT_ARRAY',
    [360] = 'ORBIT_EXECUTION_STATUS',
    [370] = 'SMART_BATTERY_INFO',
    [373] = 'GENERATOR_STATUS',
    [375] = 'ACTUATOR_OUTPUT_STATUS',
    [380] = 'TIME_ESTIMATE_TO_TARGET',
    [385] = 'TUNNEL',
    [386] = 'CAN_FRAME',
    [390] = 'ONBOARD_COMPUTER_STATUS',
    [395] = 'COMPONENT_INFORMATION',
    [397] = 'COMPONENT_METADATA',
    [400] = 'PLAY_TUNE_V2',
    [401] = 'SUPPORTED_TUNES',
    [410] = 'EVENT',
    [411] = 'CURRENT_EVENT_SEQUENCE',
    [412] = 'REQUEST_EVENT',
    [413] = 'RESPONSE_EVENT_ERROR',
    [387] = 'CANFD_FRAME',
    [388] = 'CAN_FILTER_MODIFY',
    [9000] = 'WHEEL_DISTANCE',
    [9005] = 'WINCH_STATUS',
    [12900] = 'OPEN_DRONE_ID_BASIC_ID',
    [12901] = 'OPEN_DRONE_ID_LOCATION',
    [12902] = 'OPEN_DRONE_ID_AUTHENTICATION',
    [12903] = 'OPEN_DRONE_ID_SELF_ID',
    [12904] = 'OPEN_DRONE_ID_SYSTEM',
    [12905] = 'OPEN_DRONE_ID_OPERATOR_ID',
    [12915] = 'OPEN_DRONE_ID_MESSAGE_PACK',
    [12918] = 'OPEN_DRONE_ID_ARM_STATUS',
    [12919] = 'OPEN_DRONE_ID_SYSTEM_UPDATE',
    [12920] = 'HYGROMETER_SENSOR',
    [0] = 'HEARTBEAT',
    [300] = 'PROTOCOL_VERSION',
}

enumEntryName = {
    ["FIRMWARE_VERSION_TYPE"] = {
        [0] = "FIRMWARE_VERSION_TYPE_DEV",
        [64] = "FIRMWARE_VERSION_TYPE_ALPHA",
        [128] = "FIRMWARE_VERSION_TYPE_BETA",
        [192] = "FIRMWARE_VERSION_TYPE_RC",
        [255] = "FIRMWARE_VERSION_TYPE_OFFICIAL",
    },
    ["HL_FAILURE_FLAG"] = {
        [1] = "HL_FAILURE_FLAG_GPS",
        [2] = "HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE",
        [4] = "HL_FAILURE_FLAG_ABSOLUTE_PRESSURE",
        [8] = "HL_FAILURE_FLAG_3D_ACCEL",
        [16] = "HL_FAILURE_FLAG_3D_GYRO",
        [32] = "HL_FAILURE_FLAG_3D_MAG",
        [64] = "HL_FAILURE_FLAG_TERRAIN",
        [128] = "HL_FAILURE_FLAG_BATTERY",
        [256] = "HL_FAILURE_FLAG_RC_RECEIVER",
        [512] = "HL_FAILURE_FLAG_OFFBOARD_LINK",
        [1024] = "HL_FAILURE_FLAG_ENGINE",
        [2048] = "HL_FAILURE_FLAG_GEOFENCE",
        [4096] = "HL_FAILURE_FLAG_ESTIMATOR",
        [8192] = "HL_FAILURE_FLAG_MISSION",
    },
    ["MAV_GOTO"] = {
        [0] = "MAV_GOTO_DO_HOLD",
        [1] = "MAV_GOTO_DO_CONTINUE",
        [2] = "MAV_GOTO_HOLD_AT_CURRENT_POSITION",
        [3] = "MAV_GOTO_HOLD_AT_SPECIFIED_POSITION",
    },
    ["MAV_MODE"] = {
        [0] = "MAV_MODE_PREFLIGHT",
        [64] = "MAV_MODE_MANUAL_DISARMED",
        [66] = "MAV_MODE_TEST_DISARMED",
        [80] = "MAV_MODE_STABILIZE_DISARMED",
        [88] = "MAV_MODE_GUIDED_DISARMED",
        [92] = "MAV_MODE_AUTO_DISARMED",
        [192] = "MAV_MODE_MANUAL_ARMED",
        [194] = "MAV_MODE_TEST_ARMED",
        [208] = "MAV_MODE_STABILIZE_ARMED",
        [216] = "MAV_MODE_GUIDED_ARMED",
        [220] = "MAV_MODE_AUTO_ARMED",
    },
    ["MAV_SYS_STATUS_SENSOR"] = {
        [1] = "MAV_SYS_STATUS_SENSOR_3D_GYRO",
        [2] = "MAV_SYS_STATUS_SENSOR_3D_ACCEL",
        [4] = "MAV_SYS_STATUS_SENSOR_3D_MAG",
        [8] = "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE",
        [16] = "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE",
        [32] = "MAV_SYS_STATUS_SENSOR_GPS",
        [64] = "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW",
        [128] = "MAV_SYS_STATUS_SENSOR_VISION_POSITION",
        [256] = "MAV_SYS_STATUS_SENSOR_LASER_POSITION",
        [512] = "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH",
        [1024] = "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL",
        [2048] = "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION",
        [4096] = "MAV_SYS_STATUS_SENSOR_YAW_POSITION",
        [8192] = "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL",
        [16384] = "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL",
        [32768] = "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS",
        [65536] = "MAV_SYS_STATUS_SENSOR_RC_RECEIVER",
        [131072] = "MAV_SYS_STATUS_SENSOR_3D_GYRO2",
        [262144] = "MAV_SYS_STATUS_SENSOR_3D_ACCEL2",
        [524288] = "MAV_SYS_STATUS_SENSOR_3D_MAG2",
        [1048576] = "MAV_SYS_STATUS_GEOFENCE",
        [2097152] = "MAV_SYS_STATUS_AHRS",
        [4194304] = "MAV_SYS_STATUS_TERRAIN",
        [8388608] = "MAV_SYS_STATUS_REVERSE_MOTOR",
        [16777216] = "MAV_SYS_STATUS_LOGGING",
        [33554432] = "MAV_SYS_STATUS_SENSOR_BATTERY",
        [67108864] = "MAV_SYS_STATUS_SENSOR_PROXIMITY",
        [134217728] = "MAV_SYS_STATUS_SENSOR_SATCOM",
        [268435456] = "MAV_SYS_STATUS_PREARM_CHECK",
        [536870912] = "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE",
        [1073741824] = "MAV_SYS_STATUS_SENSOR_PROPULSION",
        [2147483648] = "MAV_SYS_STATUS_EXTENSION_USED",
    },
    ["MAV_SYS_STATUS_SENSOR_EXTENDED"] = {
        [1] = "MAV_SYS_STATUS_RECOVERY_SYSTEM",
    },
    ["MAV_FRAME"] = {
        [0] = "MAV_FRAME_GLOBAL",
        [1] = "MAV_FRAME_LOCAL_NED",
        [2] = "MAV_FRAME_MISSION",
        [3] = "MAV_FRAME_GLOBAL_RELATIVE_ALT",
        [4] = "MAV_FRAME_LOCAL_ENU",
        [5] = "MAV_FRAME_GLOBAL_INT",
        [6] = "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT",
        [7] = "MAV_FRAME_LOCAL_OFFSET_NED",
        [8] = "MAV_FRAME_BODY_NED",
        [9] = "MAV_FRAME_BODY_OFFSET_NED",
        [10] = "MAV_FRAME_GLOBAL_TERRAIN_ALT",
        [11] = "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT",
        [12] = "MAV_FRAME_BODY_FRD",
        [13] = "MAV_FRAME_RESERVED_13",
        [14] = "MAV_FRAME_RESERVED_14",
        [15] = "MAV_FRAME_RESERVED_15",
        [16] = "MAV_FRAME_RESERVED_16",
        [17] = "MAV_FRAME_RESERVED_17",
        [18] = "MAV_FRAME_RESERVED_18",
        [19] = "MAV_FRAME_RESERVED_19",
        [20] = "MAV_FRAME_LOCAL_FRD",
        [21] = "MAV_FRAME_LOCAL_FLU",
    },
    ["MAVLINK_DATA_STREAM_TYPE"] = {
        [0] = "MAVLINK_DATA_STREAM_IMG_JPEG",
        [1] = "MAVLINK_DATA_STREAM_IMG_BMP",
        [2] = "MAVLINK_DATA_STREAM_IMG_RAW8U",
        [3] = "MAVLINK_DATA_STREAM_IMG_RAW32U",
        [4] = "MAVLINK_DATA_STREAM_IMG_PGM",
        [5] = "MAVLINK_DATA_STREAM_IMG_PNG",
    },
    ["FENCE_ACTION"] = {
        [0] = "FENCE_ACTION_NONE",
        [1] = "FENCE_ACTION_GUIDED",
        [2] = "FENCE_ACTION_REPORT",
        [3] = "FENCE_ACTION_GUIDED_THR_PASS",
        [4] = "FENCE_ACTION_RTL",
        [5] = "FENCE_ACTION_HOLD",
        [6] = "FENCE_ACTION_TERMINATE",
        [7] = "FENCE_ACTION_LAND",
    },
    ["FENCE_BREACH"] = {
        [0] = "FENCE_BREACH_NONE",
        [1] = "FENCE_BREACH_MINALT",
        [2] = "FENCE_BREACH_MAXALT",
        [3] = "FENCE_BREACH_BOUNDARY",
    },
    ["FENCE_MITIGATE"] = {
        [0] = "FENCE_MITIGATE_UNKNOWN",
        [1] = "FENCE_MITIGATE_NONE",
        [2] = "FENCE_MITIGATE_VEL_LIMIT",
    },
    ["MAV_MOUNT_MODE"] = {
        [0] = "MAV_MOUNT_MODE_RETRACT",
        [1] = "MAV_MOUNT_MODE_NEUTRAL",
        [2] = "MAV_MOUNT_MODE_MAVLINK_TARGETING",
        [3] = "MAV_MOUNT_MODE_RC_TARGETING",
        [4] = "MAV_MOUNT_MODE_GPS_POINT",
        [5] = "MAV_MOUNT_MODE_SYSID_TARGET",
        [6] = "MAV_MOUNT_MODE_HOME_LOCATION",
    },
    ["GIMBAL_DEVICE_CAP_FLAGS"] = {
        [1] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT",
        [2] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL",
        [4] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS",
        [8] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW",
        [16] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK",
        [32] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS",
        [64] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW",
        [128] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK",
        [256] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS",
        [512] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW",
        [1024] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK",
        [2048] = "GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW",
        [4096] = "GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME",
        [8192] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS",
    },
    ["GIMBAL_MANAGER_CAP_FLAGS"] = {
        [1] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT",
        [2] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL",
        [4] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS",
        [8] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW",
        [16] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK",
        [32] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS",
        [64] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW",
        [128] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK",
        [256] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS",
        [512] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW",
        [1024] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK",
        [2048] = "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW",
        [4096] = "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME",
        [8192] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS",
        [65536] = "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL",
        [131072] = "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL",
    },
    ["GIMBAL_DEVICE_FLAGS"] = {
        [1] = "GIMBAL_DEVICE_FLAGS_RETRACT",
        [2] = "GIMBAL_DEVICE_FLAGS_NEUTRAL",
        [4] = "GIMBAL_DEVICE_FLAGS_ROLL_LOCK",
        [8] = "GIMBAL_DEVICE_FLAGS_PITCH_LOCK",
        [16] = "GIMBAL_DEVICE_FLAGS_YAW_LOCK",
        [32] = "GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME",
        [64] = "GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME",
        [128] = "GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME",
        [256] = "GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE",
        [512] = "GIMBAL_DEVICE_FLAGS_RC_MIXED",
    },
    ["GIMBAL_MANAGER_FLAGS"] = {
        [1] = "GIMBAL_MANAGER_FLAGS_RETRACT",
        [2] = "GIMBAL_MANAGER_FLAGS_NEUTRAL",
        [4] = "GIMBAL_MANAGER_FLAGS_ROLL_LOCK",
        [8] = "GIMBAL_MANAGER_FLAGS_PITCH_LOCK",
        [16] = "GIMBAL_MANAGER_FLAGS_YAW_LOCK",
        [32] = "GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME",
        [64] = "GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME",
        [128] = "GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME",
        [256] = "GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE",
        [512] = "GIMBAL_MANAGER_FLAGS_RC_MIXED",
    },
    ["GIMBAL_DEVICE_ERROR_FLAGS"] = {
        [1] = "GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT",
        [2] = "GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT",
        [4] = "GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT",
        [8] = "GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR",
        [16] = "GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR",
        [32] = "GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR",
        [64] = "GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR",
        [128] = "GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR",
        [256] = "GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING",
        [512] = "GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER",
    },
    ["GRIPPER_ACTIONS"] = {
        [0] = "GRIPPER_ACTION_RELEASE",
        [1] = "GRIPPER_ACTION_GRAB",
    },
    ["WINCH_ACTIONS"] = {
        [0] = "WINCH_RELAXED",
        [1] = "WINCH_RELATIVE_LENGTH_CONTROL",
        [2] = "WINCH_RATE_CONTROL",
        [3] = "WINCH_LOCK",
        [4] = "WINCH_DELIVER",
        [5] = "WINCH_HOLD",
        [6] = "WINCH_RETRACT",
        [7] = "WINCH_LOAD_LINE",
        [8] = "WINCH_ABANDON_LINE",
        [9] = "WINCH_LOAD_PAYLOAD",
    },
    ["UAVCAN_NODE_HEALTH"] = {
        [0] = "UAVCAN_NODE_HEALTH_OK",
        [1] = "UAVCAN_NODE_HEALTH_WARNING",
        [2] = "UAVCAN_NODE_HEALTH_ERROR",
        [3] = "UAVCAN_NODE_HEALTH_CRITICAL",
    },
    ["UAVCAN_NODE_MODE"] = {
        [0] = "UAVCAN_NODE_MODE_OPERATIONAL",
        [1] = "UAVCAN_NODE_MODE_INITIALIZATION",
        [2] = "UAVCAN_NODE_MODE_MAINTENANCE",
        [3] = "UAVCAN_NODE_MODE_SOFTWARE_UPDATE",
        [7] = "UAVCAN_NODE_MODE_OFFLINE",
    },
    ["ESC_CONNECTION_TYPE"] = {
        [0] = "ESC_CONNECTION_TYPE_PPM",
        [1] = "ESC_CONNECTION_TYPE_SERIAL",
        [2] = "ESC_CONNECTION_TYPE_ONESHOT",
        [3] = "ESC_CONNECTION_TYPE_I2C",
        [4] = "ESC_CONNECTION_TYPE_CAN",
        [5] = "ESC_CONNECTION_TYPE_DSHOT",
    },
    ["ESC_FAILURE_FLAGS"] = {
        [0] = "ESC_FAILURE_NONE",
        [1] = "ESC_FAILURE_OVER_CURRENT",
        [2] = "ESC_FAILURE_OVER_VOLTAGE",
        [4] = "ESC_FAILURE_OVER_TEMPERATURE",
        [8] = "ESC_FAILURE_OVER_RPM",
        [16] = "ESC_FAILURE_INCONSISTENT_CMD",
        [32] = "ESC_FAILURE_MOTOR_STUCK",
        [64] = "ESC_FAILURE_GENERIC",
    },
    ["STORAGE_STATUS"] = {
        [0] = "STORAGE_STATUS_EMPTY",
        [1] = "STORAGE_STATUS_UNFORMATTED",
        [2] = "STORAGE_STATUS_READY",
        [3] = "STORAGE_STATUS_NOT_SUPPORTED",
    },
    ["STORAGE_TYPE"] = {
        [0] = "STORAGE_TYPE_UNKNOWN",
        [1] = "STORAGE_TYPE_USB_STICK",
        [2] = "STORAGE_TYPE_SD",
        [3] = "STORAGE_TYPE_MICROSD",
        [4] = "STORAGE_TYPE_CF",
        [5] = "STORAGE_TYPE_CFE",
        [6] = "STORAGE_TYPE_XQD",
        [7] = "STORAGE_TYPE_HD",
        [254] = "STORAGE_TYPE_OTHER",
    },
    ["STORAGE_USAGE_FLAG"] = {
        [1] = "STORAGE_USAGE_FLAG_SET",
        [2] = "STORAGE_USAGE_FLAG_PHOTO",
        [4] = "STORAGE_USAGE_FLAG_VIDEO",
        [8] = "STORAGE_USAGE_FLAG_LOGS",
    },
    ["ORBIT_YAW_BEHAVIOUR"] = {
        [0] = "ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER",
        [1] = "ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING",
        [2] = "ORBIT_YAW_BEHAVIOUR_UNCONTROLLED",
        [3] = "ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE",
        [4] = "ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED",
    },
    ["WIFI_CONFIG_AP_RESPONSE"] = {
        [0] = "WIFI_CONFIG_AP_RESPONSE_UNDEFINED",
        [1] = "WIFI_CONFIG_AP_RESPONSE_ACCEPTED",
        [2] = "WIFI_CONFIG_AP_RESPONSE_REJECTED",
        [3] = "WIFI_CONFIG_AP_RESPONSE_MODE_ERROR",
        [4] = "WIFI_CONFIG_AP_RESPONSE_SSID_ERROR",
        [5] = "WIFI_CONFIG_AP_RESPONSE_PASSWORD_ERROR",
    },
    ["CELLULAR_CONFIG_RESPONSE"] = {
        [0] = "CELLULAR_CONFIG_RESPONSE_ACCEPTED",
        [1] = "CELLULAR_CONFIG_RESPONSE_APN_ERROR",
        [2] = "CELLULAR_CONFIG_RESPONSE_PIN_ERROR",
        [3] = "CELLULAR_CONFIG_RESPONSE_REJECTED",
        [4] = "CELLULAR_CONFIG_BLOCKED_PUK_REQUIRED",
    },
    ["WIFI_CONFIG_AP_MODE"] = {
        [0] = "WIFI_CONFIG_AP_MODE_UNDEFINED",
        [1] = "WIFI_CONFIG_AP_MODE_AP",
        [2] = "WIFI_CONFIG_AP_MODE_STATION",
        [3] = "WIFI_CONFIG_AP_MODE_DISABLED",
    },
    ["COMP_METADATA_TYPE"] = {
        [0] = "COMP_METADATA_TYPE_GENERAL",
        [1] = "COMP_METADATA_TYPE_PARAMETER",
        [2] = "COMP_METADATA_TYPE_COMMANDS",
        [3] = "COMP_METADATA_TYPE_PERIPHERALS",
        [4] = "COMP_METADATA_TYPE_EVENTS",
        [5] = "COMP_METADATA_TYPE_ACTUATORS",
    },
    ["ACTUATOR_CONFIGURATION"] = {
        [0] = "ACTUATOR_CONFIGURATION_NONE",
        [1] = "ACTUATOR_CONFIGURATION_BEEP",
        [2] = "ACTUATOR_CONFIGURATION_3D_MODE_ON",
        [3] = "ACTUATOR_CONFIGURATION_3D_MODE_OFF",
        [4] = "ACTUATOR_CONFIGURATION_SPIN_DIRECTION1",
        [5] = "ACTUATOR_CONFIGURATION_SPIN_DIRECTION2",
    },
    ["ACTUATOR_OUTPUT_FUNCTION"] = {
        [0] = "ACTUATOR_OUTPUT_FUNCTION_NONE",
        [1] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR1",
        [2] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR2",
        [3] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR3",
        [4] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR4",
        [5] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR5",
        [6] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR6",
        [7] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR7",
        [8] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR8",
        [9] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR9",
        [10] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR10",
        [11] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR11",
        [12] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR12",
        [13] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR13",
        [14] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR14",
        [15] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR15",
        [16] = "ACTUATOR_OUTPUT_FUNCTION_MOTOR16",
        [33] = "ACTUATOR_OUTPUT_FUNCTION_SERVO1",
        [34] = "ACTUATOR_OUTPUT_FUNCTION_SERVO2",
        [35] = "ACTUATOR_OUTPUT_FUNCTION_SERVO3",
        [36] = "ACTUATOR_OUTPUT_FUNCTION_SERVO4",
        [37] = "ACTUATOR_OUTPUT_FUNCTION_SERVO5",
        [38] = "ACTUATOR_OUTPUT_FUNCTION_SERVO6",
        [39] = "ACTUATOR_OUTPUT_FUNCTION_SERVO7",
        [40] = "ACTUATOR_OUTPUT_FUNCTION_SERVO8",
        [41] = "ACTUATOR_OUTPUT_FUNCTION_SERVO9",
        [42] = "ACTUATOR_OUTPUT_FUNCTION_SERVO10",
        [43] = "ACTUATOR_OUTPUT_FUNCTION_SERVO11",
        [44] = "ACTUATOR_OUTPUT_FUNCTION_SERVO12",
        [45] = "ACTUATOR_OUTPUT_FUNCTION_SERVO13",
        [46] = "ACTUATOR_OUTPUT_FUNCTION_SERVO14",
        [47] = "ACTUATOR_OUTPUT_FUNCTION_SERVO15",
        [48] = "ACTUATOR_OUTPUT_FUNCTION_SERVO16",
    },
    ["AUTOTUNE_AXIS"] = {
        [0] = "AUTOTUNE_AXIS_DEFAULT",
        [1] = "AUTOTUNE_AXIS_ROLL",
        [2] = "AUTOTUNE_AXIS_PITCH",
        [4] = "AUTOTUNE_AXIS_YAW",
    },
    ["PREFLIGHT_STORAGE_PARAMETER_ACTION"] = {
        [0] = "PARAM_READ_PERSISTENT",
        [1] = "PARAM_WRITE_PERSISTENT",
        [2] = "PARAM_RESET_CONFIG_DEFAULT",
        [3] = "PARAM_RESET_SENSOR_DEFAULT",
        [4] = "PARAM_RESET_ALL_DEFAULT",
    },
    ["PREFLIGHT_STORAGE_MISSION_ACTION"] = {
        [0] = "MISSION_READ_PERSISTENT",
        [1] = "MISSION_WRITE_PERSISTENT",
        [2] = "MISSION_RESET_DEFAULT",
    },
    ["MAV_CMD"] = {
        [16] = "MAV_CMD_NAV_WAYPOINT",
        [17] = "MAV_CMD_NAV_LOITER_UNLIM",
        [18] = "MAV_CMD_NAV_LOITER_TURNS",
        [19] = "MAV_CMD_NAV_LOITER_TIME",
        [20] = "MAV_CMD_NAV_RETURN_TO_LAUNCH",
        [21] = "MAV_CMD_NAV_LAND",
        [22] = "MAV_CMD_NAV_TAKEOFF",
        [23] = "MAV_CMD_NAV_LAND_LOCAL",
        [24] = "MAV_CMD_NAV_TAKEOFF_LOCAL",
        [25] = "MAV_CMD_NAV_FOLLOW",
        [30] = "MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT",
        [31] = "MAV_CMD_NAV_LOITER_TO_ALT",
        [32] = "MAV_CMD_DO_FOLLOW",
        [33] = "MAV_CMD_DO_FOLLOW_REPOSITION",
        [34] = "MAV_CMD_DO_ORBIT",
        [80] = "MAV_CMD_NAV_ROI",
        [81] = "MAV_CMD_NAV_PATHPLANNING",
        [82] = "MAV_CMD_NAV_SPLINE_WAYPOINT",
        [84] = "MAV_CMD_NAV_VTOL_TAKEOFF",
        [85] = "MAV_CMD_NAV_VTOL_LAND",
        [92] = "MAV_CMD_NAV_GUIDED_ENABLE",
        [93] = "MAV_CMD_NAV_DELAY",
        [94] = "MAV_CMD_NAV_PAYLOAD_PLACE",
        [95] = "MAV_CMD_NAV_LAST",
        [112] = "MAV_CMD_CONDITION_DELAY",
        [113] = "MAV_CMD_CONDITION_CHANGE_ALT",
        [114] = "MAV_CMD_CONDITION_DISTANCE",
        [115] = "MAV_CMD_CONDITION_YAW",
        [159] = "MAV_CMD_CONDITION_LAST",
        [176] = "MAV_CMD_DO_SET_MODE",
        [177] = "MAV_CMD_DO_JUMP",
        [178] = "MAV_CMD_DO_CHANGE_SPEED",
        [179] = "MAV_CMD_DO_SET_HOME",
        [180] = "MAV_CMD_DO_SET_PARAMETER",
        [181] = "MAV_CMD_DO_SET_RELAY",
        [182] = "MAV_CMD_DO_REPEAT_RELAY",
        [183] = "MAV_CMD_DO_SET_SERVO",
        [184] = "MAV_CMD_DO_REPEAT_SERVO",
        [185] = "MAV_CMD_DO_FLIGHTTERMINATION",
        [186] = "MAV_CMD_DO_CHANGE_ALTITUDE",
        [187] = "MAV_CMD_DO_SET_ACTUATOR",
        [189] = "MAV_CMD_DO_LAND_START",
        [190] = "MAV_CMD_DO_RALLY_LAND",
        [191] = "MAV_CMD_DO_GO_AROUND",
        [192] = "MAV_CMD_DO_REPOSITION",
        [193] = "MAV_CMD_DO_PAUSE_CONTINUE",
        [194] = "MAV_CMD_DO_SET_REVERSE",
        [195] = "MAV_CMD_DO_SET_ROI_LOCATION",
        [196] = "MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET",
        [197] = "MAV_CMD_DO_SET_ROI_NONE",
        [198] = "MAV_CMD_DO_SET_ROI_SYSID",
        [200] = "MAV_CMD_DO_CONTROL_VIDEO",
        [201] = "MAV_CMD_DO_SET_ROI",
        [202] = "MAV_CMD_DO_DIGICAM_CONFIGURE",
        [203] = "MAV_CMD_DO_DIGICAM_CONTROL",
        [204] = "MAV_CMD_DO_MOUNT_CONFIGURE",
        [205] = "MAV_CMD_DO_MOUNT_CONTROL",
        [206] = "MAV_CMD_DO_SET_CAM_TRIGG_DIST",
        [207] = "MAV_CMD_DO_FENCE_ENABLE",
        [208] = "MAV_CMD_DO_PARACHUTE",
        [209] = "MAV_CMD_DO_MOTOR_TEST",
        [210] = "MAV_CMD_DO_INVERTED_FLIGHT",
        [211] = "MAV_CMD_DO_GRIPPER",
        [212] = "MAV_CMD_DO_AUTOTUNE_ENABLE",
        [213] = "MAV_CMD_NAV_SET_YAW_SPEED",
        [214] = "MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL",
        [220] = "MAV_CMD_DO_MOUNT_CONTROL_QUAT",
        [221] = "MAV_CMD_DO_GUIDED_MASTER",
        [222] = "MAV_CMD_DO_GUIDED_LIMITS",
        [223] = "MAV_CMD_DO_ENGINE_CONTROL",
        [224] = "MAV_CMD_DO_SET_MISSION_CURRENT",
        [240] = "MAV_CMD_DO_LAST",
        [241] = "MAV_CMD_PREFLIGHT_CALIBRATION",
        [242] = "MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS",
        [243] = "MAV_CMD_PREFLIGHT_UAVCAN",
        [245] = "MAV_CMD_PREFLIGHT_STORAGE",
        [246] = "MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN",
        [252] = "MAV_CMD_OVERRIDE_GOTO",
        [260] = "MAV_CMD_OBLIQUE_SURVEY",
        [300] = "MAV_CMD_MISSION_START",
        [310] = "MAV_CMD_ACTUATOR_TEST",
        [311] = "MAV_CMD_CONFIGURE_ACTUATOR",
        [400] = "MAV_CMD_COMPONENT_ARM_DISARM",
        [401] = "MAV_CMD_RUN_PREARM_CHECKS",
        [405] = "MAV_CMD_ILLUMINATOR_ON_OFF",
        [410] = "MAV_CMD_GET_HOME_POSITION",
        [420] = "MAV_CMD_INJECT_FAILURE",
        [500] = "MAV_CMD_START_RX_PAIR",
        [510] = "MAV_CMD_GET_MESSAGE_INTERVAL",
        [511] = "MAV_CMD_SET_MESSAGE_INTERVAL",
        [512] = "MAV_CMD_REQUEST_MESSAGE",
        [519] = "MAV_CMD_REQUEST_PROTOCOL_VERSION",
        [520] = "MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES",
        [521] = "MAV_CMD_REQUEST_CAMERA_INFORMATION",
        [522] = "MAV_CMD_REQUEST_CAMERA_SETTINGS",
        [525] = "MAV_CMD_REQUEST_STORAGE_INFORMATION",
        [526] = "MAV_CMD_STORAGE_FORMAT",
        [527] = "MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS",
        [528] = "MAV_CMD_REQUEST_FLIGHT_INFORMATION",
        [529] = "MAV_CMD_RESET_CAMERA_SETTINGS",
        [530] = "MAV_CMD_SET_CAMERA_MODE",
        [531] = "MAV_CMD_SET_CAMERA_ZOOM",
        [532] = "MAV_CMD_SET_CAMERA_FOCUS",
        [533] = "MAV_CMD_SET_STORAGE_USAGE",
        [600] = "MAV_CMD_JUMP_TAG",
        [601] = "MAV_CMD_DO_JUMP_TAG",
        [1000] = "MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW",
        [1001] = "MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE",
        [2000] = "MAV_CMD_IMAGE_START_CAPTURE",
        [2001] = "MAV_CMD_IMAGE_STOP_CAPTURE",
        [2002] = "MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE",
        [2003] = "MAV_CMD_DO_TRIGGER_CONTROL",
        [2004] = "MAV_CMD_CAMERA_TRACK_POINT",
        [2005] = "MAV_CMD_CAMERA_TRACK_RECTANGLE",
        [2010] = "MAV_CMD_CAMERA_STOP_TRACKING",
        [2500] = "MAV_CMD_VIDEO_START_CAPTURE",
        [2501] = "MAV_CMD_VIDEO_STOP_CAPTURE",
        [2502] = "MAV_CMD_VIDEO_START_STREAMING",
        [2503] = "MAV_CMD_VIDEO_STOP_STREAMING",
        [2504] = "MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION",
        [2505] = "MAV_CMD_REQUEST_VIDEO_STREAM_STATUS",
        [2510] = "MAV_CMD_LOGGING_START",
        [2511] = "MAV_CMD_LOGGING_STOP",
        [2520] = "MAV_CMD_AIRFRAME_CONFIGURATION",
        [2600] = "MAV_CMD_CONTROL_HIGH_LATENCY",
        [2800] = "MAV_CMD_PANORAMA_CREATE",
        [3000] = "MAV_CMD_DO_VTOL_TRANSITION",
        [3001] = "MAV_CMD_ARM_AUTHORIZATION_REQUEST",
        [4000] = "MAV_CMD_SET_GUIDED_SUBMODE_STANDARD",
        [4001] = "MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE",
        [4501] = "MAV_CMD_CONDITION_GATE",
        [5000] = "MAV_CMD_NAV_FENCE_RETURN_POINT",
        [5001] = "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION",
        [5002] = "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION",
        [5003] = "MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION",
        [5004] = "MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION",
        [5100] = "MAV_CMD_NAV_RALLY_POINT",
        [5200] = "MAV_CMD_UAVCAN_GET_NODE_INFO",
        [10001] = "MAV_CMD_DO_ADSB_OUT_IDENT",
        [30001] = "MAV_CMD_PAYLOAD_PREPARE_DEPLOY",
        [30002] = "MAV_CMD_PAYLOAD_CONTROL_DEPLOY",
        [31000] = "MAV_CMD_WAYPOINT_USER_1",
        [31001] = "MAV_CMD_WAYPOINT_USER_2",
        [31002] = "MAV_CMD_WAYPOINT_USER_3",
        [31003] = "MAV_CMD_WAYPOINT_USER_4",
        [31004] = "MAV_CMD_WAYPOINT_USER_5",
        [31005] = "MAV_CMD_SPATIAL_USER_1",
        [31006] = "MAV_CMD_SPATIAL_USER_2",
        [31007] = "MAV_CMD_SPATIAL_USER_3",
        [31008] = "MAV_CMD_SPATIAL_USER_4",
        [31009] = "MAV_CMD_SPATIAL_USER_5",
        [31010] = "MAV_CMD_USER_1",
        [31011] = "MAV_CMD_USER_2",
        [31012] = "MAV_CMD_USER_3",
        [31013] = "MAV_CMD_USER_4",
        [31014] = "MAV_CMD_USER_5",
        [32000] = "MAV_CMD_CAN_FORWARD",
        [42006] = "MAV_CMD_FIXED_MAG_CAL_YAW",
        [42600] = "MAV_CMD_DO_WINCH",
    },
    ["MAV_DATA_STREAM"] = {
        [0] = "MAV_DATA_STREAM_ALL",
        [1] = "MAV_DATA_STREAM_RAW_SENSORS",
        [2] = "MAV_DATA_STREAM_EXTENDED_STATUS",
        [3] = "MAV_DATA_STREAM_RC_CHANNELS",
        [4] = "MAV_DATA_STREAM_RAW_CONTROLLER",
        [6] = "MAV_DATA_STREAM_POSITION",
        [10] = "MAV_DATA_STREAM_EXTRA1",
        [11] = "MAV_DATA_STREAM_EXTRA2",
        [12] = "MAV_DATA_STREAM_EXTRA3",
    },
    ["MAV_ROI"] = {
        [0] = "MAV_ROI_NONE",
        [1] = "MAV_ROI_WPNEXT",
        [2] = "MAV_ROI_WPINDEX",
        [3] = "MAV_ROI_LOCATION",
        [4] = "MAV_ROI_TARGET",
    },
    ["MAV_PARAM_TYPE"] = {
        [1] = "MAV_PARAM_TYPE_UINT8",
        [2] = "MAV_PARAM_TYPE_INT8",
        [3] = "MAV_PARAM_TYPE_UINT16",
        [4] = "MAV_PARAM_TYPE_INT16",
        [5] = "MAV_PARAM_TYPE_UINT32",
        [6] = "MAV_PARAM_TYPE_INT32",
        [7] = "MAV_PARAM_TYPE_UINT64",
        [8] = "MAV_PARAM_TYPE_INT64",
        [9] = "MAV_PARAM_TYPE_REAL32",
        [10] = "MAV_PARAM_TYPE_REAL64",
    },
    ["MAV_PARAM_EXT_TYPE"] = {
        [1] = "MAV_PARAM_EXT_TYPE_UINT8",
        [2] = "MAV_PARAM_EXT_TYPE_INT8",
        [3] = "MAV_PARAM_EXT_TYPE_UINT16",
        [4] = "MAV_PARAM_EXT_TYPE_INT16",
        [5] = "MAV_PARAM_EXT_TYPE_UINT32",
        [6] = "MAV_PARAM_EXT_TYPE_INT32",
        [7] = "MAV_PARAM_EXT_TYPE_UINT64",
        [8] = "MAV_PARAM_EXT_TYPE_INT64",
        [9] = "MAV_PARAM_EXT_TYPE_REAL32",
        [10] = "MAV_PARAM_EXT_TYPE_REAL64",
        [11] = "MAV_PARAM_EXT_TYPE_CUSTOM",
    },
    ["MAV_RESULT"] = {
        [0] = "MAV_RESULT_ACCEPTED",
        [1] = "MAV_RESULT_TEMPORARILY_REJECTED",
        [2] = "MAV_RESULT_DENIED",
        [3] = "MAV_RESULT_UNSUPPORTED",
        [4] = "MAV_RESULT_FAILED",
        [5] = "MAV_RESULT_IN_PROGRESS",
        [6] = "MAV_RESULT_CANCELLED",
    },
    ["MAV_MISSION_RESULT"] = {
        [0] = "MAV_MISSION_ACCEPTED",
        [1] = "MAV_MISSION_ERROR",
        [2] = "MAV_MISSION_UNSUPPORTED_FRAME",
        [3] = "MAV_MISSION_UNSUPPORTED",
        [4] = "MAV_MISSION_NO_SPACE",
        [5] = "MAV_MISSION_INVALID",
        [6] = "MAV_MISSION_INVALID_PARAM1",
        [7] = "MAV_MISSION_INVALID_PARAM2",
        [8] = "MAV_MISSION_INVALID_PARAM3",
        [9] = "MAV_MISSION_INVALID_PARAM4",
        [10] = "MAV_MISSION_INVALID_PARAM5_X",
        [11] = "MAV_MISSION_INVALID_PARAM6_Y",
        [12] = "MAV_MISSION_INVALID_PARAM7",
        [13] = "MAV_MISSION_INVALID_SEQUENCE",
        [14] = "MAV_MISSION_DENIED",
        [15] = "MAV_MISSION_OPERATION_CANCELLED",
    },
    ["MAV_SEVERITY"] = {
        [0] = "MAV_SEVERITY_EMERGENCY",
        [1] = "MAV_SEVERITY_ALERT",
        [2] = "MAV_SEVERITY_CRITICAL",
        [3] = "MAV_SEVERITY_ERROR",
        [4] = "MAV_SEVERITY_WARNING",
        [5] = "MAV_SEVERITY_NOTICE",
        [6] = "MAV_SEVERITY_INFO",
        [7] = "MAV_SEVERITY_DEBUG",
    },
    ["MAV_POWER_STATUS"] = {
        [1] = "MAV_POWER_STATUS_BRICK_VALID",
        [2] = "MAV_POWER_STATUS_SERVO_VALID",
        [4] = "MAV_POWER_STATUS_USB_CONNECTED",
        [8] = "MAV_POWER_STATUS_PERIPH_OVERCURRENT",
        [16] = "MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT",
        [32] = "MAV_POWER_STATUS_CHANGED",
    },
    ["SERIAL_CONTROL_DEV"] = {
        [0] = "SERIAL_CONTROL_DEV_TELEM1",
        [1] = "SERIAL_CONTROL_DEV_TELEM2",
        [2] = "SERIAL_CONTROL_DEV_GPS1",
        [3] = "SERIAL_CONTROL_DEV_GPS2",
        [10] = "SERIAL_CONTROL_DEV_SHELL",
        [100] = "SERIAL_CONTROL_SERIAL0",
        [101] = "SERIAL_CONTROL_SERIAL1",
        [102] = "SERIAL_CONTROL_SERIAL2",
        [103] = "SERIAL_CONTROL_SERIAL3",
        [104] = "SERIAL_CONTROL_SERIAL4",
        [105] = "SERIAL_CONTROL_SERIAL5",
        [106] = "SERIAL_CONTROL_SERIAL6",
        [107] = "SERIAL_CONTROL_SERIAL7",
        [108] = "SERIAL_CONTROL_SERIAL8",
        [109] = "SERIAL_CONTROL_SERIAL9",
    },
    ["SERIAL_CONTROL_FLAG"] = {
        [1] = "SERIAL_CONTROL_FLAG_REPLY",
        [2] = "SERIAL_CONTROL_FLAG_RESPOND",
        [4] = "SERIAL_CONTROL_FLAG_EXCLUSIVE",
        [8] = "SERIAL_CONTROL_FLAG_BLOCKING",
        [16] = "SERIAL_CONTROL_FLAG_MULTI",
    },
    ["MAV_DISTANCE_SENSOR"] = {
        [0] = "MAV_DISTANCE_SENSOR_LASER",
        [1] = "MAV_DISTANCE_SENSOR_ULTRASOUND",
        [2] = "MAV_DISTANCE_SENSOR_INFRARED",
        [3] = "MAV_DISTANCE_SENSOR_RADAR",
        [4] = "MAV_DISTANCE_SENSOR_UNKNOWN",
    },
    ["MAV_SENSOR_ORIENTATION"] = {
        [0] = "MAV_SENSOR_ROTATION_NONE",
        [1] = "MAV_SENSOR_ROTATION_YAW_45",
        [2] = "MAV_SENSOR_ROTATION_YAW_90",
        [3] = "MAV_SENSOR_ROTATION_YAW_135",
        [4] = "MAV_SENSOR_ROTATION_YAW_180",
        [5] = "MAV_SENSOR_ROTATION_YAW_225",
        [6] = "MAV_SENSOR_ROTATION_YAW_270",
        [7] = "MAV_SENSOR_ROTATION_YAW_315",
        [8] = "MAV_SENSOR_ROTATION_ROLL_180",
        [9] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_45",
        [10] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_90",
        [11] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_135",
        [12] = "MAV_SENSOR_ROTATION_PITCH_180",
        [13] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_225",
        [14] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_270",
        [15] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_315",
        [16] = "MAV_SENSOR_ROTATION_ROLL_90",
        [17] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_45",
        [18] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_90",
        [19] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_135",
        [20] = "MAV_SENSOR_ROTATION_ROLL_270",
        [21] = "MAV_SENSOR_ROTATION_ROLL_270_YAW_45",
        [22] = "MAV_SENSOR_ROTATION_ROLL_270_YAW_90",
        [23] = "MAV_SENSOR_ROTATION_ROLL_270_YAW_135",
        [24] = "MAV_SENSOR_ROTATION_PITCH_90",
        [25] = "MAV_SENSOR_ROTATION_PITCH_270",
        [26] = "MAV_SENSOR_ROTATION_PITCH_180_YAW_90",
        [27] = "MAV_SENSOR_ROTATION_PITCH_180_YAW_270",
        [28] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_90",
        [29] = "MAV_SENSOR_ROTATION_ROLL_180_PITCH_90",
        [30] = "MAV_SENSOR_ROTATION_ROLL_270_PITCH_90",
        [31] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_180",
        [32] = "MAV_SENSOR_ROTATION_ROLL_270_PITCH_180",
        [33] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_270",
        [34] = "MAV_SENSOR_ROTATION_ROLL_180_PITCH_270",
        [35] = "MAV_SENSOR_ROTATION_ROLL_270_PITCH_270",
        [36] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90",
        [37] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_270",
        [38] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293",
        [39] = "MAV_SENSOR_ROTATION_PITCH_315",
        [40] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_315",
        [100] = "MAV_SENSOR_ROTATION_CUSTOM",
    },
    ["MAV_PROTOCOL_CAPABILITY"] = {
        [1] = "MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT",
        [2] = "MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT",
        [4] = "MAV_PROTOCOL_CAPABILITY_MISSION_INT",
        [8] = "MAV_PROTOCOL_CAPABILITY_COMMAND_INT",
        [16] = "MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE",
        [32] = "MAV_PROTOCOL_CAPABILITY_FTP",
        [64] = "MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET",
        [128] = "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED",
        [256] = "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT",
        [512] = "MAV_PROTOCOL_CAPABILITY_TERRAIN",
        [1024] = "MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET",
        [2048] = "MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION",
        [4096] = "MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION",
        [8192] = "MAV_PROTOCOL_CAPABILITY_MAVLINK2",
        [16384] = "MAV_PROTOCOL_CAPABILITY_MISSION_FENCE",
        [32768] = "MAV_PROTOCOL_CAPABILITY_MISSION_RALLY",
        [65536] = "MAV_PROTOCOL_CAPABILITY_RESERVED2",
        [131072] = "MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST",
    },
    ["MAV_MISSION_TYPE"] = {
        [0] = "MAV_MISSION_TYPE_MISSION",
        [1] = "MAV_MISSION_TYPE_FENCE",
        [2] = "MAV_MISSION_TYPE_RALLY",
        [255] = "MAV_MISSION_TYPE_ALL",
    },
    ["MAV_ESTIMATOR_TYPE"] = {
        [0] = "MAV_ESTIMATOR_TYPE_UNKNOWN",
        [1] = "MAV_ESTIMATOR_TYPE_NAIVE",
        [2] = "MAV_ESTIMATOR_TYPE_VISION",
        [3] = "MAV_ESTIMATOR_TYPE_VIO",
        [4] = "MAV_ESTIMATOR_TYPE_GPS",
        [5] = "MAV_ESTIMATOR_TYPE_GPS_INS",
        [6] = "MAV_ESTIMATOR_TYPE_MOCAP",
        [7] = "MAV_ESTIMATOR_TYPE_LIDAR",
        [8] = "MAV_ESTIMATOR_TYPE_AUTOPILOT",
    },
    ["MAV_BATTERY_TYPE"] = {
        [0] = "MAV_BATTERY_TYPE_UNKNOWN",
        [1] = "MAV_BATTERY_TYPE_LIPO",
        [2] = "MAV_BATTERY_TYPE_LIFE",
        [3] = "MAV_BATTERY_TYPE_LION",
        [4] = "MAV_BATTERY_TYPE_NIMH",
    },
    ["MAV_BATTERY_FUNCTION"] = {
        [0] = "MAV_BATTERY_FUNCTION_UNKNOWN",
        [1] = "MAV_BATTERY_FUNCTION_ALL",
        [2] = "MAV_BATTERY_FUNCTION_PROPULSION",
        [3] = "MAV_BATTERY_FUNCTION_AVIONICS",
        [4] = "MAV_BATTERY_FUNCTION_PAYLOAD",
    },
    ["MAV_BATTERY_CHARGE_STATE"] = {
        [0] = "MAV_BATTERY_CHARGE_STATE_UNDEFINED",
        [1] = "MAV_BATTERY_CHARGE_STATE_OK",
        [2] = "MAV_BATTERY_CHARGE_STATE_LOW",
        [3] = "MAV_BATTERY_CHARGE_STATE_CRITICAL",
        [4] = "MAV_BATTERY_CHARGE_STATE_EMERGENCY",
        [5] = "MAV_BATTERY_CHARGE_STATE_FAILED",
        [6] = "MAV_BATTERY_CHARGE_STATE_UNHEALTHY",
        [7] = "MAV_BATTERY_CHARGE_STATE_CHARGING",
    },
    ["MAV_BATTERY_MODE"] = {
        [0] = "MAV_BATTERY_MODE_UNKNOWN",
        [1] = "MAV_BATTERY_MODE_AUTO_DISCHARGING",
        [2] = "MAV_BATTERY_MODE_HOT_SWAP",
    },
    ["MAV_BATTERY_FAULT"] = {
        [1] = "MAV_BATTERY_FAULT_DEEP_DISCHARGE",
        [2] = "MAV_BATTERY_FAULT_SPIKES",
        [4] = "MAV_BATTERY_FAULT_CELL_FAIL",
        [8] = "MAV_BATTERY_FAULT_OVER_CURRENT",
        [16] = "MAV_BATTERY_FAULT_OVER_TEMPERATURE",
        [32] = "MAV_BATTERY_FAULT_UNDER_TEMPERATURE",
        [64] = "MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE",
        [128] = "MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE",
        [256] = "BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION",
    },
    ["MAV_GENERATOR_STATUS_FLAG"] = {
        [1] = "MAV_GENERATOR_STATUS_FLAG_OFF",
        [2] = "MAV_GENERATOR_STATUS_FLAG_READY",
        [4] = "MAV_GENERATOR_STATUS_FLAG_GENERATING",
        [8] = "MAV_GENERATOR_STATUS_FLAG_CHARGING",
        [16] = "MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER",
        [32] = "MAV_GENERATOR_STATUS_FLAG_MAXPOWER",
        [64] = "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING",
        [128] = "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT",
        [256] = "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING",
        [512] = "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT",
        [1024] = "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT",
        [2048] = "MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT",
        [4096] = "MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING",
        [8192] = "MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING",
        [16384] = "MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT",
        [32768] = "MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT",
        [65536] = "MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT",
        [131072] = "MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT",
        [262144] = "MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT",
        [524288] = "MAV_GENERATOR_STATUS_FLAG_START_INHIBITED",
        [1048576] = "MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED",
        [2097152] = "MAV_GENERATOR_STATUS_FLAG_WARMING_UP",
        [4194304] = "MAV_GENERATOR_STATUS_FLAG_IDLE",
    },
    ["MAV_VTOL_STATE"] = {
        [0] = "MAV_VTOL_STATE_UNDEFINED",
        [1] = "MAV_VTOL_STATE_TRANSITION_TO_FW",
        [2] = "MAV_VTOL_STATE_TRANSITION_TO_MC",
        [3] = "MAV_VTOL_STATE_MC",
        [4] = "MAV_VTOL_STATE_FW",
    },
    ["MAV_LANDED_STATE"] = {
        [0] = "MAV_LANDED_STATE_UNDEFINED",
        [1] = "MAV_LANDED_STATE_ON_GROUND",
        [2] = "MAV_LANDED_STATE_IN_AIR",
        [3] = "MAV_LANDED_STATE_TAKEOFF",
        [4] = "MAV_LANDED_STATE_LANDING",
    },
    ["ADSB_ALTITUDE_TYPE"] = {
        [0] = "ADSB_ALTITUDE_TYPE_PRESSURE_QNH",
        [1] = "ADSB_ALTITUDE_TYPE_GEOMETRIC",
    },
    ["ADSB_EMITTER_TYPE"] = {
        [0] = "ADSB_EMITTER_TYPE_NO_INFO",
        [1] = "ADSB_EMITTER_TYPE_LIGHT",
        [2] = "ADSB_EMITTER_TYPE_SMALL",
        [3] = "ADSB_EMITTER_TYPE_LARGE",
        [4] = "ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE",
        [5] = "ADSB_EMITTER_TYPE_HEAVY",
        [6] = "ADSB_EMITTER_TYPE_HIGHLY_MANUV",
        [7] = "ADSB_EMITTER_TYPE_ROTOCRAFT",
        [8] = "ADSB_EMITTER_TYPE_UNASSIGNED",
        [9] = "ADSB_EMITTER_TYPE_GLIDER",
        [10] = "ADSB_EMITTER_TYPE_LIGHTER_AIR",
        [11] = "ADSB_EMITTER_TYPE_PARACHUTE",
        [12] = "ADSB_EMITTER_TYPE_ULTRA_LIGHT",
        [13] = "ADSB_EMITTER_TYPE_UNASSIGNED2",
        [14] = "ADSB_EMITTER_TYPE_UAV",
        [15] = "ADSB_EMITTER_TYPE_SPACE",
        [16] = "ADSB_EMITTER_TYPE_UNASSGINED3",
        [17] = "ADSB_EMITTER_TYPE_EMERGENCY_SURFACE",
        [18] = "ADSB_EMITTER_TYPE_SERVICE_SURFACE",
        [19] = "ADSB_EMITTER_TYPE_POINT_OBSTACLE",
    },
    ["ADSB_FLAGS"] = {
        [1] = "ADSB_FLAGS_VALID_COORDS",
        [2] = "ADSB_FLAGS_VALID_ALTITUDE",
        [4] = "ADSB_FLAGS_VALID_HEADING",
        [8] = "ADSB_FLAGS_VALID_VELOCITY",
        [16] = "ADSB_FLAGS_VALID_CALLSIGN",
        [32] = "ADSB_FLAGS_VALID_SQUAWK",
        [64] = "ADSB_FLAGS_SIMULATED",
        [128] = "ADSB_FLAGS_VERTICAL_VELOCITY_VALID",
        [256] = "ADSB_FLAGS_BARO_VALID",
        [32768] = "ADSB_FLAGS_SOURCE_UAT",
    },
    ["MAV_DO_REPOSITION_FLAGS"] = {
        [1] = "MAV_DO_REPOSITION_FLAGS_CHANGE_MODE",
    },
    ["ESTIMATOR_STATUS_FLAGS"] = {
        [1] = "ESTIMATOR_ATTITUDE",
        [2] = "ESTIMATOR_VELOCITY_HORIZ",
        [4] = "ESTIMATOR_VELOCITY_VERT",
        [8] = "ESTIMATOR_POS_HORIZ_REL",
        [16] = "ESTIMATOR_POS_HORIZ_ABS",
        [32] = "ESTIMATOR_POS_VERT_ABS",
        [64] = "ESTIMATOR_POS_VERT_AGL",
        [128] = "ESTIMATOR_CONST_POS_MODE",
        [256] = "ESTIMATOR_PRED_POS_HORIZ_REL",
        [512] = "ESTIMATOR_PRED_POS_HORIZ_ABS",
        [1024] = "ESTIMATOR_GPS_GLITCH",
        [2048] = "ESTIMATOR_ACCEL_ERROR",
    },
    ["MOTOR_TEST_ORDER"] = {
        [0] = "MOTOR_TEST_ORDER_DEFAULT",
        [1] = "MOTOR_TEST_ORDER_SEQUENCE",
        [2] = "MOTOR_TEST_ORDER_BOARD",
    },
    ["MOTOR_TEST_THROTTLE_TYPE"] = {
        [0] = "MOTOR_TEST_THROTTLE_PERCENT",
        [1] = "MOTOR_TEST_THROTTLE_PWM",
        [2] = "MOTOR_TEST_THROTTLE_PILOT",
        [3] = "MOTOR_TEST_COMPASS_CAL",
    },
    ["GPS_INPUT_IGNORE_FLAGS"] = {
        [1] = "GPS_INPUT_IGNORE_FLAG_ALT",
        [2] = "GPS_INPUT_IGNORE_FLAG_HDOP",
        [4] = "GPS_INPUT_IGNORE_FLAG_VDOP",
        [8] = "GPS_INPUT_IGNORE_FLAG_VEL_HORIZ",
        [16] = "GPS_INPUT_IGNORE_FLAG_VEL_VERT",
        [32] = "GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY",
        [64] = "GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY",
        [128] = "GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY",
    },
    ["MAV_COLLISION_ACTION"] = {
        [0] = "MAV_COLLISION_ACTION_NONE",
        [1] = "MAV_COLLISION_ACTION_REPORT",
        [2] = "MAV_COLLISION_ACTION_ASCEND_OR_DESCEND",
        [3] = "MAV_COLLISION_ACTION_MOVE_HORIZONTALLY",
        [4] = "MAV_COLLISION_ACTION_MOVE_PERPENDICULAR",
        [5] = "MAV_COLLISION_ACTION_RTL",
        [6] = "MAV_COLLISION_ACTION_HOVER",
    },
    ["MAV_COLLISION_THREAT_LEVEL"] = {
        [0] = "MAV_COLLISION_THREAT_LEVEL_NONE",
        [1] = "MAV_COLLISION_THREAT_LEVEL_LOW",
        [2] = "MAV_COLLISION_THREAT_LEVEL_HIGH",
    },
    ["MAV_COLLISION_SRC"] = {
        [0] = "MAV_COLLISION_SRC_ADSB",
        [1] = "MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT",
    },
    ["GPS_FIX_TYPE"] = {
        [0] = "GPS_FIX_TYPE_NO_GPS",
        [1] = "GPS_FIX_TYPE_NO_FIX",
        [2] = "GPS_FIX_TYPE_2D_FIX",
        [3] = "GPS_FIX_TYPE_3D_FIX",
        [4] = "GPS_FIX_TYPE_DGPS",
        [5] = "GPS_FIX_TYPE_RTK_FLOAT",
        [6] = "GPS_FIX_TYPE_RTK_FIXED",
        [7] = "GPS_FIX_TYPE_STATIC",
        [8] = "GPS_FIX_TYPE_PPP",
    },
    ["RTK_BASELINE_COORDINATE_SYSTEM"] = {
        [0] = "RTK_BASELINE_COORDINATE_SYSTEM_ECEF",
        [1] = "RTK_BASELINE_COORDINATE_SYSTEM_NED",
    },
    ["LANDING_TARGET_TYPE"] = {
        [0] = "LANDING_TARGET_TYPE_LIGHT_BEACON",
        [1] = "LANDING_TARGET_TYPE_RADIO_BEACON",
        [2] = "LANDING_TARGET_TYPE_VISION_FIDUCIAL",
        [3] = "LANDING_TARGET_TYPE_VISION_OTHER",
    },
    ["VTOL_TRANSITION_HEADING"] = {
        [0] = "VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT",
        [1] = "VTOL_TRANSITION_HEADING_NEXT_WAYPOINT",
        [2] = "VTOL_TRANSITION_HEADING_TAKEOFF",
        [3] = "VTOL_TRANSITION_HEADING_SPECIFIED",
        [4] = "VTOL_TRANSITION_HEADING_ANY",
    },
    ["CAMERA_CAP_FLAGS"] = {
        [1] = "CAMERA_CAP_FLAGS_CAPTURE_VIDEO",
        [2] = "CAMERA_CAP_FLAGS_CAPTURE_IMAGE",
        [4] = "CAMERA_CAP_FLAGS_HAS_MODES",
        [8] = "CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE",
        [16] = "CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE",
        [32] = "CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE",
        [64] = "CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM",
        [128] = "CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS",
        [256] = "CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM",
        [512] = "CAMERA_CAP_FLAGS_HAS_TRACKING_POINT",
        [1024] = "CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE",
        [2048] = "CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS",
    },
    ["VIDEO_STREAM_STATUS_FLAGS"] = {
        [1] = "VIDEO_STREAM_STATUS_FLAGS_RUNNING",
        [2] = "VIDEO_STREAM_STATUS_FLAGS_THERMAL",
    },
    ["VIDEO_STREAM_TYPE"] = {
        [0] = "VIDEO_STREAM_TYPE_RTSP",
        [1] = "VIDEO_STREAM_TYPE_RTPUDP",
        [2] = "VIDEO_STREAM_TYPE_TCP_MPEG",
        [3] = "VIDEO_STREAM_TYPE_MPEG_TS_H264",
    },
    ["CAMERA_TRACKING_STATUS_FLAGS"] = {
        [0] = "CAMERA_TRACKING_STATUS_FLAGS_IDLE",
        [1] = "CAMERA_TRACKING_STATUS_FLAGS_ACTIVE",
        [2] = "CAMERA_TRACKING_STATUS_FLAGS_ERROR",
    },
    ["CAMERA_TRACKING_MODE"] = {
        [0] = "CAMERA_TRACKING_MODE_NONE",
        [1] = "CAMERA_TRACKING_MODE_POINT",
        [2] = "CAMERA_TRACKING_MODE_RECTANGLE",
    },
    ["CAMERA_TRACKING_TARGET_DATA"] = {
        [0] = "CAMERA_TRACKING_TARGET_DATA_NONE",
        [1] = "CAMERA_TRACKING_TARGET_DATA_EMBEDDED",
        [2] = "CAMERA_TRACKING_TARGET_DATA_RENDERED",
        [4] = "CAMERA_TRACKING_TARGET_DATA_IN_STATUS",
    },
    ["CAMERA_ZOOM_TYPE"] = {
        [0] = "ZOOM_TYPE_STEP",
        [1] = "ZOOM_TYPE_CONTINUOUS",
        [2] = "ZOOM_TYPE_RANGE",
        [3] = "ZOOM_TYPE_FOCAL_LENGTH",
    },
    ["SET_FOCUS_TYPE"] = {
        [0] = "FOCUS_TYPE_STEP",
        [1] = "FOCUS_TYPE_CONTINUOUS",
        [2] = "FOCUS_TYPE_RANGE",
        [3] = "FOCUS_TYPE_METERS",
        [4] = "FOCUS_TYPE_AUTO",
        [5] = "FOCUS_TYPE_AUTO_SINGLE",
        [6] = "FOCUS_TYPE_AUTO_CONTINUOUS",
    },
    ["PARAM_ACK"] = {
        [0] = "PARAM_ACK_ACCEPTED",
        [1] = "PARAM_ACK_VALUE_UNSUPPORTED",
        [2] = "PARAM_ACK_FAILED",
        [3] = "PARAM_ACK_IN_PROGRESS",
    },
    ["CAMERA_MODE"] = {
        [0] = "CAMERA_MODE_IMAGE",
        [1] = "CAMERA_MODE_VIDEO",
        [2] = "CAMERA_MODE_IMAGE_SURVEY",
    },
    ["MAV_ARM_AUTH_DENIED_REASON"] = {
        [0] = "MAV_ARM_AUTH_DENIED_REASON_GENERIC",
        [1] = "MAV_ARM_AUTH_DENIED_REASON_NONE",
        [2] = "MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT",
        [3] = "MAV_ARM_AUTH_DENIED_REASON_TIMEOUT",
        [4] = "MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE",
        [5] = "MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER",
    },
    ["RC_TYPE"] = {
        [0] = "RC_TYPE_SPEKTRUM_DSM2",
        [1] = "RC_TYPE_SPEKTRUM_DSMX",
    },
    ["POSITION_TARGET_TYPEMASK"] = {
        [1] = "POSITION_TARGET_TYPEMASK_X_IGNORE",
        [2] = "POSITION_TARGET_TYPEMASK_Y_IGNORE",
        [4] = "POSITION_TARGET_TYPEMASK_Z_IGNORE",
        [8] = "POSITION_TARGET_TYPEMASK_VX_IGNORE",
        [16] = "POSITION_TARGET_TYPEMASK_VY_IGNORE",
        [32] = "POSITION_TARGET_TYPEMASK_VZ_IGNORE",
        [64] = "POSITION_TARGET_TYPEMASK_AX_IGNORE",
        [128] = "POSITION_TARGET_TYPEMASK_AY_IGNORE",
        [256] = "POSITION_TARGET_TYPEMASK_AZ_IGNORE",
        [512] = "POSITION_TARGET_TYPEMASK_FORCE_SET",
        [1024] = "POSITION_TARGET_TYPEMASK_YAW_IGNORE",
        [2048] = "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE",
    },
    ["ATTITUDE_TARGET_TYPEMASK"] = {
        [1] = "ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE",
        [2] = "ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE",
        [4] = "ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE",
        [32] = "ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET",
        [64] = "ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE",
        [128] = "ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE",
    },
    ["UTM_FLIGHT_STATE"] = {
        [1] = "UTM_FLIGHT_STATE_UNKNOWN",
        [2] = "UTM_FLIGHT_STATE_GROUND",
        [3] = "UTM_FLIGHT_STATE_AIRBORNE",
        [16] = "UTM_FLIGHT_STATE_EMERGENCY",
        [32] = "UTM_FLIGHT_STATE_NOCTRL",
    },
    ["UTM_DATA_AVAIL_FLAGS"] = {
        [1] = "UTM_DATA_AVAIL_FLAGS_TIME_VALID",
        [2] = "UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE",
        [4] = "UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE",
        [8] = "UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE",
        [16] = "UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE",
        [32] = "UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE",
        [64] = "UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE",
        [128] = "UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE",
    },
    ["CELLULAR_STATUS_FLAG"] = {
        [0] = "CELLULAR_STATUS_FLAG_UNKNOWN",
        [1] = "CELLULAR_STATUS_FLAG_FAILED",
        [2] = "CELLULAR_STATUS_FLAG_INITIALIZING",
        [3] = "CELLULAR_STATUS_FLAG_LOCKED",
        [4] = "CELLULAR_STATUS_FLAG_DISABLED",
        [5] = "CELLULAR_STATUS_FLAG_DISABLING",
        [6] = "CELLULAR_STATUS_FLAG_ENABLING",
        [7] = "CELLULAR_STATUS_FLAG_ENABLED",
        [8] = "CELLULAR_STATUS_FLAG_SEARCHING",
        [9] = "CELLULAR_STATUS_FLAG_REGISTERED",
        [10] = "CELLULAR_STATUS_FLAG_DISCONNECTING",
        [11] = "CELLULAR_STATUS_FLAG_CONNECTING",
        [12] = "CELLULAR_STATUS_FLAG_CONNECTED",
    },
    ["CELLULAR_NETWORK_FAILED_REASON"] = {
        [0] = "CELLULAR_NETWORK_FAILED_REASON_NONE",
        [1] = "CELLULAR_NETWORK_FAILED_REASON_UNKNOWN",
        [2] = "CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING",
        [3] = "CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR",
    },
    ["CELLULAR_NETWORK_RADIO_TYPE"] = {
        [0] = "CELLULAR_NETWORK_RADIO_TYPE_NONE",
        [1] = "CELLULAR_NETWORK_RADIO_TYPE_GSM",
        [2] = "CELLULAR_NETWORK_RADIO_TYPE_CDMA",
        [3] = "CELLULAR_NETWORK_RADIO_TYPE_WCDMA",
        [4] = "CELLULAR_NETWORK_RADIO_TYPE_LTE",
    },
    ["PRECISION_LAND_MODE"] = {
        [0] = "PRECISION_LAND_MODE_DISABLED",
        [1] = "PRECISION_LAND_MODE_OPPORTUNISTIC",
        [2] = "PRECISION_LAND_MODE_REQUIRED",
    },
    ["PARACHUTE_ACTION"] = {
        [0] = "PARACHUTE_DISABLE",
        [1] = "PARACHUTE_ENABLE",
        [2] = "PARACHUTE_RELEASE",
    },
    ["MAV_TUNNEL_PAYLOAD_TYPE"] = {
        [0] = "MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN",
        [200] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0",
        [201] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1",
        [202] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2",
        [203] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3",
        [204] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4",
        [205] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5",
        [206] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6",
        [207] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7",
        [208] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8",
        [209] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9",
    },
    ["MAV_ODID_ID_TYPE"] = {
        [0] = "MAV_ODID_ID_TYPE_NONE",
        [1] = "MAV_ODID_ID_TYPE_SERIAL_NUMBER",
        [2] = "MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID",
        [3] = "MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID",
        [4] = "MAV_ODID_ID_TYPE_SPECIFIC_SESSION_ID",
    },
    ["MAV_ODID_UA_TYPE"] = {
        [0] = "MAV_ODID_UA_TYPE_NONE",
        [1] = "MAV_ODID_UA_TYPE_AEROPLANE",
        [2] = "MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR",
        [3] = "MAV_ODID_UA_TYPE_GYROPLANE",
        [4] = "MAV_ODID_UA_TYPE_HYBRID_LIFT",
        [5] = "MAV_ODID_UA_TYPE_ORNITHOPTER",
        [6] = "MAV_ODID_UA_TYPE_GLIDER",
        [7] = "MAV_ODID_UA_TYPE_KITE",
        [8] = "MAV_ODID_UA_TYPE_FREE_BALLOON",
        [9] = "MAV_ODID_UA_TYPE_CAPTIVE_BALLOON",
        [10] = "MAV_ODID_UA_TYPE_AIRSHIP",
        [11] = "MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE",
        [12] = "MAV_ODID_UA_TYPE_ROCKET",
        [13] = "MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT",
        [14] = "MAV_ODID_UA_TYPE_GROUND_OBSTACLE",
        [15] = "MAV_ODID_UA_TYPE_OTHER",
    },
    ["MAV_ODID_STATUS"] = {
        [0] = "MAV_ODID_STATUS_UNDECLARED",
        [1] = "MAV_ODID_STATUS_GROUND",
        [2] = "MAV_ODID_STATUS_AIRBORNE",
        [3] = "MAV_ODID_STATUS_EMERGENCY",
        [4] = "MAV_ODID_STATUS_REMOTE_ID_SYSTEM_FAILURE",
    },
    ["MAV_ODID_HEIGHT_REF"] = {
        [0] = "MAV_ODID_HEIGHT_REF_OVER_TAKEOFF",
        [1] = "MAV_ODID_HEIGHT_REF_OVER_GROUND",
    },
    ["MAV_ODID_HOR_ACC"] = {
        [0] = "MAV_ODID_HOR_ACC_UNKNOWN",
        [1] = "MAV_ODID_HOR_ACC_10NM",
        [2] = "MAV_ODID_HOR_ACC_4NM",
        [3] = "MAV_ODID_HOR_ACC_2NM",
        [4] = "MAV_ODID_HOR_ACC_1NM",
        [5] = "MAV_ODID_HOR_ACC_0_5NM",
        [6] = "MAV_ODID_HOR_ACC_0_3NM",
        [7] = "MAV_ODID_HOR_ACC_0_1NM",
        [8] = "MAV_ODID_HOR_ACC_0_05NM",
        [9] = "MAV_ODID_HOR_ACC_30_METER",
        [10] = "MAV_ODID_HOR_ACC_10_METER",
        [11] = "MAV_ODID_HOR_ACC_3_METER",
        [12] = "MAV_ODID_HOR_ACC_1_METER",
    },
    ["MAV_ODID_VER_ACC"] = {
        [0] = "MAV_ODID_VER_ACC_UNKNOWN",
        [1] = "MAV_ODID_VER_ACC_150_METER",
        [2] = "MAV_ODID_VER_ACC_45_METER",
        [3] = "MAV_ODID_VER_ACC_25_METER",
        [4] = "MAV_ODID_VER_ACC_10_METER",
        [5] = "MAV_ODID_VER_ACC_3_METER",
        [6] = "MAV_ODID_VER_ACC_1_METER",
    },
    ["MAV_ODID_SPEED_ACC"] = {
        [0] = "MAV_ODID_SPEED_ACC_UNKNOWN",
        [1] = "MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND",
        [2] = "MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND",
        [3] = "MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND",
        [4] = "MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND",
    },
    ["MAV_ODID_TIME_ACC"] = {
        [0] = "MAV_ODID_TIME_ACC_UNKNOWN",
        [1] = "MAV_ODID_TIME_ACC_0_1_SECOND",
        [2] = "MAV_ODID_TIME_ACC_0_2_SECOND",
        [3] = "MAV_ODID_TIME_ACC_0_3_SECOND",
        [4] = "MAV_ODID_TIME_ACC_0_4_SECOND",
        [5] = "MAV_ODID_TIME_ACC_0_5_SECOND",
        [6] = "MAV_ODID_TIME_ACC_0_6_SECOND",
        [7] = "MAV_ODID_TIME_ACC_0_7_SECOND",
        [8] = "MAV_ODID_TIME_ACC_0_8_SECOND",
        [9] = "MAV_ODID_TIME_ACC_0_9_SECOND",
        [10] = "MAV_ODID_TIME_ACC_1_0_SECOND",
        [11] = "MAV_ODID_TIME_ACC_1_1_SECOND",
        [12] = "MAV_ODID_TIME_ACC_1_2_SECOND",
        [13] = "MAV_ODID_TIME_ACC_1_3_SECOND",
        [14] = "MAV_ODID_TIME_ACC_1_4_SECOND",
        [15] = "MAV_ODID_TIME_ACC_1_5_SECOND",
    },
    ["MAV_ODID_AUTH_TYPE"] = {
        [0] = "MAV_ODID_AUTH_TYPE_NONE",
        [1] = "MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE",
        [2] = "MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE",
        [3] = "MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE",
        [4] = "MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID",
        [5] = "MAV_ODID_AUTH_TYPE_SPECIFIC_AUTHENTICATION",
    },
    ["MAV_ODID_DESC_TYPE"] = {
        [0] = "MAV_ODID_DESC_TYPE_TEXT",
        [1] = "MAV_ODID_DESC_TYPE_EMERGENCY",
        [2] = "MAV_ODID_DESC_TYPE_EXTENDED_STATUS",
    },
    ["MAV_ODID_OPERATOR_LOCATION_TYPE"] = {
        [0] = "MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF",
        [1] = "MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS",
        [2] = "MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED",
    },
    ["MAV_ODID_CLASSIFICATION_TYPE"] = {
        [0] = "MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED",
        [1] = "MAV_ODID_CLASSIFICATION_TYPE_EU",
    },
    ["MAV_ODID_CATEGORY_EU"] = {
        [0] = "MAV_ODID_CATEGORY_EU_UNDECLARED",
        [1] = "MAV_ODID_CATEGORY_EU_OPEN",
        [2] = "MAV_ODID_CATEGORY_EU_SPECIFIC",
        [3] = "MAV_ODID_CATEGORY_EU_CERTIFIED",
    },
    ["MAV_ODID_CLASS_EU"] = {
        [0] = "MAV_ODID_CLASS_EU_UNDECLARED",
        [1] = "MAV_ODID_CLASS_EU_CLASS_0",
        [2] = "MAV_ODID_CLASS_EU_CLASS_1",
        [3] = "MAV_ODID_CLASS_EU_CLASS_2",
        [4] = "MAV_ODID_CLASS_EU_CLASS_3",
        [5] = "MAV_ODID_CLASS_EU_CLASS_4",
        [6] = "MAV_ODID_CLASS_EU_CLASS_5",
        [7] = "MAV_ODID_CLASS_EU_CLASS_6",
    },
    ["MAV_ODID_OPERATOR_ID_TYPE"] = {
        [0] = "MAV_ODID_OPERATOR_ID_TYPE_CAA",
    },
    ["MAV_ODID_ARM_STATUS"] = {
        [0] = "MAV_ODID_ARM_STATUS_GOOD_TO_ARM",
        [1] = "MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC",
    },
    ["TUNE_FORMAT"] = {
        [1] = "TUNE_FORMAT_QBASIC1_1",
        [2] = "TUNE_FORMAT_MML_MODERN",
    },
    ["AIS_TYPE"] = {
        [0] = "AIS_TYPE_UNKNOWN",
        [1] = "AIS_TYPE_RESERVED_1",
        [2] = "AIS_TYPE_RESERVED_2",
        [3] = "AIS_TYPE_RESERVED_3",
        [4] = "AIS_TYPE_RESERVED_4",
        [5] = "AIS_TYPE_RESERVED_5",
        [6] = "AIS_TYPE_RESERVED_6",
        [7] = "AIS_TYPE_RESERVED_7",
        [8] = "AIS_TYPE_RESERVED_8",
        [9] = "AIS_TYPE_RESERVED_9",
        [10] = "AIS_TYPE_RESERVED_10",
        [11] = "AIS_TYPE_RESERVED_11",
        [12] = "AIS_TYPE_RESERVED_12",
        [13] = "AIS_TYPE_RESERVED_13",
        [14] = "AIS_TYPE_RESERVED_14",
        [15] = "AIS_TYPE_RESERVED_15",
        [16] = "AIS_TYPE_RESERVED_16",
        [17] = "AIS_TYPE_RESERVED_17",
        [18] = "AIS_TYPE_RESERVED_18",
        [19] = "AIS_TYPE_RESERVED_19",
        [20] = "AIS_TYPE_WIG",
        [21] = "AIS_TYPE_WIG_HAZARDOUS_A",
        [22] = "AIS_TYPE_WIG_HAZARDOUS_B",
        [23] = "AIS_TYPE_WIG_HAZARDOUS_C",
        [24] = "AIS_TYPE_WIG_HAZARDOUS_D",
        [25] = "AIS_TYPE_WIG_RESERVED_1",
        [26] = "AIS_TYPE_WIG_RESERVED_2",
        [27] = "AIS_TYPE_WIG_RESERVED_3",
        [28] = "AIS_TYPE_WIG_RESERVED_4",
        [29] = "AIS_TYPE_WIG_RESERVED_5",
        [30] = "AIS_TYPE_FISHING",
        [31] = "AIS_TYPE_TOWING",
        [32] = "AIS_TYPE_TOWING_LARGE",
        [33] = "AIS_TYPE_DREDGING",
        [34] = "AIS_TYPE_DIVING",
        [35] = "AIS_TYPE_MILITARY",
        [36] = "AIS_TYPE_SAILING",
        [37] = "AIS_TYPE_PLEASURE",
        [38] = "AIS_TYPE_RESERVED_20",
        [39] = "AIS_TYPE_RESERVED_21",
        [40] = "AIS_TYPE_HSC",
        [41] = "AIS_TYPE_HSC_HAZARDOUS_A",
        [42] = "AIS_TYPE_HSC_HAZARDOUS_B",
        [43] = "AIS_TYPE_HSC_HAZARDOUS_C",
        [44] = "AIS_TYPE_HSC_HAZARDOUS_D",
        [45] = "AIS_TYPE_HSC_RESERVED_1",
        [46] = "AIS_TYPE_HSC_RESERVED_2",
        [47] = "AIS_TYPE_HSC_RESERVED_3",
        [48] = "AIS_TYPE_HSC_RESERVED_4",
        [49] = "AIS_TYPE_HSC_UNKNOWN",
        [50] = "AIS_TYPE_PILOT",
        [51] = "AIS_TYPE_SAR",
        [52] = "AIS_TYPE_TUG",
        [53] = "AIS_TYPE_PORT_TENDER",
        [54] = "AIS_TYPE_ANTI_POLLUTION",
        [55] = "AIS_TYPE_LAW_ENFORCEMENT",
        [56] = "AIS_TYPE_SPARE_LOCAL_1",
        [57] = "AIS_TYPE_SPARE_LOCAL_2",
        [58] = "AIS_TYPE_MEDICAL_TRANSPORT",
        [59] = "AIS_TYPE_NONECOMBATANT",
        [60] = "AIS_TYPE_PASSENGER",
        [61] = "AIS_TYPE_PASSENGER_HAZARDOUS_A",
        [62] = "AIS_TYPE_PASSENGER_HAZARDOUS_B",
        [63] = "AIS_TYPE_PASSENGER_HAZARDOUS_C",
        [64] = "AIS_TYPE_PASSENGER_HAZARDOUS_D",
        [65] = "AIS_TYPE_PASSENGER_RESERVED_1",
        [66] = "AIS_TYPE_PASSENGER_RESERVED_2",
        [67] = "AIS_TYPE_PASSENGER_RESERVED_3",
        [68] = "AIS_TYPE_PASSENGER_RESERVED_4",
        [69] = "AIS_TYPE_PASSENGER_UNKNOWN",
        [70] = "AIS_TYPE_CARGO",
        [71] = "AIS_TYPE_CARGO_HAZARDOUS_A",
        [72] = "AIS_TYPE_CARGO_HAZARDOUS_B",
        [73] = "AIS_TYPE_CARGO_HAZARDOUS_C",
        [74] = "AIS_TYPE_CARGO_HAZARDOUS_D",
        [75] = "AIS_TYPE_CARGO_RESERVED_1",
        [76] = "AIS_TYPE_CARGO_RESERVED_2",
        [77] = "AIS_TYPE_CARGO_RESERVED_3",
        [78] = "AIS_TYPE_CARGO_RESERVED_4",
        [79] = "AIS_TYPE_CARGO_UNKNOWN",
        [80] = "AIS_TYPE_TANKER",
        [81] = "AIS_TYPE_TANKER_HAZARDOUS_A",
        [82] = "AIS_TYPE_TANKER_HAZARDOUS_B",
        [83] = "AIS_TYPE_TANKER_HAZARDOUS_C",
        [84] = "AIS_TYPE_TANKER_HAZARDOUS_D",
        [85] = "AIS_TYPE_TANKER_RESERVED_1",
        [86] = "AIS_TYPE_TANKER_RESERVED_2",
        [87] = "AIS_TYPE_TANKER_RESERVED_3",
        [88] = "AIS_TYPE_TANKER_RESERVED_4",
        [89] = "AIS_TYPE_TANKER_UNKNOWN",
        [90] = "AIS_TYPE_OTHER",
        [91] = "AIS_TYPE_OTHER_HAZARDOUS_A",
        [92] = "AIS_TYPE_OTHER_HAZARDOUS_B",
        [93] = "AIS_TYPE_OTHER_HAZARDOUS_C",
        [94] = "AIS_TYPE_OTHER_HAZARDOUS_D",
        [95] = "AIS_TYPE_OTHER_RESERVED_1",
        [96] = "AIS_TYPE_OTHER_RESERVED_2",
        [97] = "AIS_TYPE_OTHER_RESERVED_3",
        [98] = "AIS_TYPE_OTHER_RESERVED_4",
        [99] = "AIS_TYPE_OTHER_UNKNOWN",
    },
    ["AIS_NAV_STATUS"] = {
        [0] = "UNDER_WAY",
        [1] = "AIS_NAV_ANCHORED",
        [2] = "AIS_NAV_UN_COMMANDED",
        [3] = "AIS_NAV_RESTRICTED_MANOEUVERABILITY",
        [4] = "AIS_NAV_DRAUGHT_CONSTRAINED",
        [5] = "AIS_NAV_MOORED",
        [6] = "AIS_NAV_AGROUND",
        [7] = "AIS_NAV_FISHING",
        [8] = "AIS_NAV_SAILING",
        [9] = "AIS_NAV_RESERVED_HSC",
        [10] = "AIS_NAV_RESERVED_WIG",
        [11] = "AIS_NAV_RESERVED_1",
        [12] = "AIS_NAV_RESERVED_2",
        [13] = "AIS_NAV_RESERVED_3",
        [14] = "AIS_NAV_AIS_SART",
        [15] = "AIS_NAV_UNKNOWN",
    },
    ["AIS_FLAGS"] = {
        [1] = "AIS_FLAGS_POSITION_ACCURACY",
        [2] = "AIS_FLAGS_VALID_COG",
        [4] = "AIS_FLAGS_VALID_VELOCITY",
        [8] = "AIS_FLAGS_HIGH_VELOCITY",
        [16] = "AIS_FLAGS_VALID_TURN_RATE",
        [32] = "AIS_FLAGS_TURN_RATE_SIGN_ONLY",
        [64] = "AIS_FLAGS_VALID_DIMENSIONS",
        [128] = "AIS_FLAGS_LARGE_BOW_DIMENSION",
        [256] = "AIS_FLAGS_LARGE_STERN_DIMENSION",
        [512] = "AIS_FLAGS_LARGE_PORT_DIMENSION",
        [1024] = "AIS_FLAGS_LARGE_STARBOARD_DIMENSION",
        [2048] = "AIS_FLAGS_VALID_CALLSIGN",
        [4096] = "AIS_FLAGS_VALID_NAME",
    },
    ["FAILURE_UNIT"] = {
        [0] = "FAILURE_UNIT_SENSOR_GYRO",
        [1] = "FAILURE_UNIT_SENSOR_ACCEL",
        [2] = "FAILURE_UNIT_SENSOR_MAG",
        [3] = "FAILURE_UNIT_SENSOR_BARO",
        [4] = "FAILURE_UNIT_SENSOR_GPS",
        [5] = "FAILURE_UNIT_SENSOR_OPTICAL_FLOW",
        [6] = "FAILURE_UNIT_SENSOR_VIO",
        [7] = "FAILURE_UNIT_SENSOR_DISTANCE_SENSOR",
        [8] = "FAILURE_UNIT_SENSOR_AIRSPEED",
        [100] = "FAILURE_UNIT_SYSTEM_BATTERY",
        [101] = "FAILURE_UNIT_SYSTEM_MOTOR",
        [102] = "FAILURE_UNIT_SYSTEM_SERVO",
        [103] = "FAILURE_UNIT_SYSTEM_AVOIDANCE",
        [104] = "FAILURE_UNIT_SYSTEM_RC_SIGNAL",
        [105] = "FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL",
    },
    ["FAILURE_TYPE"] = {
        [0] = "FAILURE_TYPE_OK",
        [1] = "FAILURE_TYPE_OFF",
        [2] = "FAILURE_TYPE_STUCK",
        [3] = "FAILURE_TYPE_GARBAGE",
        [4] = "FAILURE_TYPE_WRONG",
        [5] = "FAILURE_TYPE_SLOW",
        [6] = "FAILURE_TYPE_DELAYED",
        [7] = "FAILURE_TYPE_INTERMITTENT",
    },
    ["NAV_VTOL_LAND_OPTIONS"] = {
        [0] = "NAV_VTOL_LAND_OPTIONS_DEFAULT",
        [1] = "NAV_VTOL_LAND_OPTIONS_FW_DESCENT",
        [2] = "NAV_VTOL_LAND_OPTIONS_HOVER_DESCENT",
    },
    ["MAV_WINCH_STATUS_FLAG"] = {
        [1] = "MAV_WINCH_STATUS_HEALTHY",
        [2] = "MAV_WINCH_STATUS_FULLY_RETRACTED",
        [4] = "MAV_WINCH_STATUS_MOVING",
        [8] = "MAV_WINCH_STATUS_CLUTCH_ENGAGED",
        [16] = "MAV_WINCH_STATUS_LOCKED",
        [32] = "MAV_WINCH_STATUS_DROPPING",
        [64] = "MAV_WINCH_STATUS_ARRESTING",
        [128] = "MAV_WINCH_STATUS_GROUND_SENSE",
        [256] = "MAV_WINCH_STATUS_RETRACTING",
        [512] = "MAV_WINCH_STATUS_REDELIVER",
        [1024] = "MAV_WINCH_STATUS_ABANDON_LINE",
        [2048] = "MAV_WINCH_STATUS_LOCKING",
        [4096] = "MAV_WINCH_STATUS_LOAD_LINE",
        [8192] = "MAV_WINCH_STATUS_LOAD_PAYLOAD",
    },
    ["MAG_CAL_STATUS"] = {
        [0] = "MAG_CAL_NOT_STARTED",
        [1] = "MAG_CAL_WAITING_TO_START",
        [2] = "MAG_CAL_RUNNING_STEP_ONE",
        [3] = "MAG_CAL_RUNNING_STEP_TWO",
        [4] = "MAG_CAL_SUCCESS",
        [5] = "MAG_CAL_FAILED",
        [6] = "MAG_CAL_BAD_ORIENTATION",
        [7] = "MAG_CAL_BAD_RADIUS",
    },
    ["MAV_EVENT_ERROR_REASON"] = {
        [0] = "MAV_EVENT_ERROR_REASON_UNAVAILABLE",
    },
    ["MAV_EVENT_CURRENT_SEQUENCE_FLAGS"] = {
        [1] = "MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET",
    },
    ["HIL_SENSOR_UPDATED_FLAGS"] = {
        [0] = "HIL_SENSOR_UPDATED_NONE",
        [1] = "HIL_SENSOR_UPDATED_XACC",
        [2] = "HIL_SENSOR_UPDATED_YACC",
        [4] = "HIL_SENSOR_UPDATED_ZACC",
        [8] = "HIL_SENSOR_UPDATED_XGYRO",
        [16] = "HIL_SENSOR_UPDATED_YGYRO",
        [32] = "HIL_SENSOR_UPDATED_ZGYRO",
        [64] = "HIL_SENSOR_UPDATED_XMAG",
        [128] = "HIL_SENSOR_UPDATED_YMAG",
        [256] = "HIL_SENSOR_UPDATED_ZMAG",
        [512] = "HIL_SENSOR_UPDATED_ABS_PRESSURE",
        [1024] = "HIL_SENSOR_UPDATED_DIFF_PRESSURE",
        [2048] = "HIL_SENSOR_UPDATED_PRESSURE_ALT",
        [4096] = "HIL_SENSOR_UPDATED_TEMPERATURE",
        [2147483648] = "HIL_SENSOR_UPDATED_RESET",
    },
    ["HIGHRES_IMU_UPDATED_FLAGS"] = {
        [0] = "HIGHRES_IMU_UPDATED_NONE",
        [1] = "HIGHRES_IMU_UPDATED_XACC",
        [2] = "HIGHRES_IMU_UPDATED_YACC",
        [4] = "HIGHRES_IMU_UPDATED_ZACC",
        [8] = "HIGHRES_IMU_UPDATED_XGYRO",
        [16] = "HIGHRES_IMU_UPDATED_YGYRO",
        [32] = "HIGHRES_IMU_UPDATED_ZGYRO",
        [64] = "HIGHRES_IMU_UPDATED_XMAG",
        [128] = "HIGHRES_IMU_UPDATED_YMAG",
        [256] = "HIGHRES_IMU_UPDATED_ZMAG",
        [512] = "HIGHRES_IMU_UPDATED_ABS_PRESSURE",
        [1024] = "HIGHRES_IMU_UPDATED_DIFF_PRESSURE",
        [2048] = "HIGHRES_IMU_UPDATED_PRESSURE_ALT",
        [4096] = "HIGHRES_IMU_UPDATED_TEMPERATURE",
        [65535] = "HIGHRES_IMU_UPDATED_ALL",
    },
    ["CAN_FILTER_OP"] = {
        [0] = "CAN_FILTER_REPLACE",
        [1] = "CAN_FILTER_ADD",
        [2] = "CAN_FILTER_REMOVE",
    },
    ["MAV_FTP_ERR"] = {
        [0] = "MAV_FTP_ERR_NONE",
        [1] = "MAV_FTP_ERR_FAIL",
        [2] = "MAV_FTP_ERR_FAILERRNO",
        [3] = "MAV_FTP_ERR_INVALIDDATASIZE",
        [4] = "MAV_FTP_ERR_INVALIDSESSION",
        [5] = "MAV_FTP_ERR_NOSESSIONSAVAILABLE",
        [6] = "MAV_FTP_ERR_EOF",
        [7] = "MAV_FTP_ERR_UNKNOWNCOMMAND",
        [8] = "MAV_FTP_ERR_FILEEXISTS",
        [9] = "MAV_FTP_ERR_FILEPROTECTED",
        [10] = "MAV_FTP_ERR_FILENOTFOUND",
    },
    ["MAV_FTP_OPCODE"] = {
        [0] = "MAV_FTP_OPCODE_NONE",
        [1] = "MAV_FTP_OPCODE_TERMINATESESSION",
        [2] = "MAV_FTP_OPCODE_RESETSESSION",
        [3] = "MAV_FTP_OPCODE_LISTDIRECTORY",
        [4] = "MAV_FTP_OPCODE_OPENFILERO",
        [5] = "MAV_FTP_OPCODE_READFILE",
        [6] = "MAV_FTP_OPCODE_CREATEFILE",
        [7] = "MAV_FTP_OPCODE_WRITEFILE",
        [8] = "MAV_FTP_OPCODE_REMOVEFILE",
        [9] = "MAV_FTP_OPCODE_CREATEDIRECTORY",
        [10] = "MAV_FTP_OPCODE_REMOVEDIRECTORY",
        [11] = "MAV_FTP_OPCODE_OPENFILEWO",
        [12] = "MAV_FTP_OPCODE_TRUNCATEFILE",
        [13] = "MAV_FTP_OPCODE_RENAME",
        [14] = "MAV_FTP_OPCODE_CALCFILECRC",
        [15] = "MAV_FTP_OPCODE_BURSTREADFILE",
        [128] = "MAV_FTP_OPCODE_ACK",
        [129] = "MAV_FTP_OPCODE_NAK",
    },
    ["MISSION_STATE"] = {
        [0] = "MISSION_STATE_UNKNOWN",
        [1] = "MISSION_STATE_NO_MISSION",
        [2] = "MISSION_STATE_NOT_STARTED",
        [3] = "MISSION_STATE_ACTIVE",
        [4] = "MISSION_STATE_PAUSED",
        [5] = "MISSION_STATE_COMPLETE",
    },
    ["MAV_AUTOPILOT"] = {
        [0] = "MAV_AUTOPILOT_GENERIC",
        [1] = "MAV_AUTOPILOT_RESERVED",
        [2] = "MAV_AUTOPILOT_SLUGS",
        [3] = "MAV_AUTOPILOT_ARDUPILOTMEGA",
        [4] = "MAV_AUTOPILOT_OPENPILOT",
        [5] = "MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY",
        [6] = "MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY",
        [7] = "MAV_AUTOPILOT_GENERIC_MISSION_FULL",
        [8] = "MAV_AUTOPILOT_INVALID",
        [9] = "MAV_AUTOPILOT_PPZ",
        [10] = "MAV_AUTOPILOT_UDB",
        [11] = "MAV_AUTOPILOT_FP",
        [12] = "MAV_AUTOPILOT_PX4",
        [13] = "MAV_AUTOPILOT_SMACCMPILOT",
        [14] = "MAV_AUTOPILOT_AUTOQUAD",
        [15] = "MAV_AUTOPILOT_ARMAZILA",
        [16] = "MAV_AUTOPILOT_AEROB",
        [17] = "MAV_AUTOPILOT_ASLUAV",
        [18] = "MAV_AUTOPILOT_SMARTAP",
        [19] = "MAV_AUTOPILOT_AIRRAILS",
        [20] = "MAV_AUTOPILOT_REFLEX",
    },
    ["MAV_TYPE"] = {
        [0] = "MAV_TYPE_GENERIC",
        [1] = "MAV_TYPE_FIXED_WING",
        [2] = "MAV_TYPE_QUADROTOR",
        [3] = "MAV_TYPE_COAXIAL",
        [4] = "MAV_TYPE_HELICOPTER",
        [5] = "MAV_TYPE_ANTENNA_TRACKER",
        [6] = "MAV_TYPE_GCS",
        [7] = "MAV_TYPE_AIRSHIP",
        [8] = "MAV_TYPE_FREE_BALLOON",
        [9] = "MAV_TYPE_ROCKET",
        [10] = "MAV_TYPE_GROUND_ROVER",
        [11] = "MAV_TYPE_SURFACE_BOAT",
        [12] = "MAV_TYPE_SUBMARINE",
        [13] = "MAV_TYPE_HEXAROTOR",
        [14] = "MAV_TYPE_OCTOROTOR",
        [15] = "MAV_TYPE_TRICOPTER",
        [16] = "MAV_TYPE_FLAPPING_WING",
        [17] = "MAV_TYPE_KITE",
        [18] = "MAV_TYPE_ONBOARD_CONTROLLER",
        [19] = "MAV_TYPE_VTOL_TAILSITTER_DUOROTOR",
        [20] = "MAV_TYPE_VTOL_TAILSITTER_QUADROTOR",
        [21] = "MAV_TYPE_VTOL_TILTROTOR",
        [22] = "MAV_TYPE_VTOL_FIXEDROTOR",
        [23] = "MAV_TYPE_VTOL_TAILSITTER",
        [24] = "MAV_TYPE_VTOL_TILTWING",
        [25] = "MAV_TYPE_VTOL_RESERVED5",
        [26] = "MAV_TYPE_GIMBAL",
        [27] = "MAV_TYPE_ADSB",
        [28] = "MAV_TYPE_PARAFOIL",
        [29] = "MAV_TYPE_DODECAROTOR",
        [30] = "MAV_TYPE_CAMERA",
        [31] = "MAV_TYPE_CHARGING_STATION",
        [32] = "MAV_TYPE_FLARM",
        [33] = "MAV_TYPE_SERVO",
        [34] = "MAV_TYPE_ODID",
        [35] = "MAV_TYPE_DECAROTOR",
        [36] = "MAV_TYPE_BATTERY",
        [37] = "MAV_TYPE_PARACHUTE",
        [38] = "MAV_TYPE_LOG",
        [39] = "MAV_TYPE_OSD",
        [40] = "MAV_TYPE_IMU",
        [41] = "MAV_TYPE_GPS",
        [42] = "MAV_TYPE_WINCH",
    },
    ["MAV_MODE_FLAG"] = {
        [1] = "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED",
        [2] = "MAV_MODE_FLAG_TEST_ENABLED",
        [4] = "MAV_MODE_FLAG_AUTO_ENABLED",
        [8] = "MAV_MODE_FLAG_GUIDED_ENABLED",
        [16] = "MAV_MODE_FLAG_STABILIZE_ENABLED",
        [32] = "MAV_MODE_FLAG_HIL_ENABLED",
        [64] = "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED",
        [128] = "MAV_MODE_FLAG_SAFETY_ARMED",
    },
    ["MAV_MODE_FLAG_DECODE_POSITION"] = {
        [1] = "MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE",
        [2] = "MAV_MODE_FLAG_DECODE_POSITION_TEST",
        [4] = "MAV_MODE_FLAG_DECODE_POSITION_AUTO",
        [8] = "MAV_MODE_FLAG_DECODE_POSITION_GUIDED",
        [16] = "MAV_MODE_FLAG_DECODE_POSITION_STABILIZE",
        [32] = "MAV_MODE_FLAG_DECODE_POSITION_HIL",
        [64] = "MAV_MODE_FLAG_DECODE_POSITION_MANUAL",
        [128] = "MAV_MODE_FLAG_DECODE_POSITION_SAFETY",
    },
    ["MAV_STATE"] = {
        [0] = "MAV_STATE_UNINIT",
        [1] = "MAV_STATE_BOOT",
        [2] = "MAV_STATE_CALIBRATING",
        [3] = "MAV_STATE_STANDBY",
        [4] = "MAV_STATE_ACTIVE",
        [5] = "MAV_STATE_CRITICAL",
        [6] = "MAV_STATE_EMERGENCY",
        [7] = "MAV_STATE_POWEROFF",
        [8] = "MAV_STATE_FLIGHT_TERMINATION",
    },
    ["MAV_COMPONENT"] = {
        [0] = "MAV_COMP_ID_ALL",
        [1] = "MAV_COMP_ID_AUTOPILOT1",
        [25] = "MAV_COMP_ID_USER1",
        [26] = "MAV_COMP_ID_USER2",
        [27] = "MAV_COMP_ID_USER3",
        [28] = "MAV_COMP_ID_USER4",
        [29] = "MAV_COMP_ID_USER5",
        [30] = "MAV_COMP_ID_USER6",
        [31] = "MAV_COMP_ID_USER7",
        [32] = "MAV_COMP_ID_USER8",
        [33] = "MAV_COMP_ID_USER9",
        [34] = "MAV_COMP_ID_USER10",
        [35] = "MAV_COMP_ID_USER11",
        [36] = "MAV_COMP_ID_USER12",
        [37] = "MAV_COMP_ID_USER13",
        [38] = "MAV_COMP_ID_USER14",
        [39] = "MAV_COMP_ID_USER15",
        [40] = "MAV_COMP_ID_USER16",
        [41] = "MAV_COMP_ID_USER17",
        [42] = "MAV_COMP_ID_USER18",
        [43] = "MAV_COMP_ID_USER19",
        [44] = "MAV_COMP_ID_USER20",
        [45] = "MAV_COMP_ID_USER21",
        [46] = "MAV_COMP_ID_USER22",
        [47] = "MAV_COMP_ID_USER23",
        [48] = "MAV_COMP_ID_USER24",
        [49] = "MAV_COMP_ID_USER25",
        [50] = "MAV_COMP_ID_USER26",
        [51] = "MAV_COMP_ID_USER27",
        [52] = "MAV_COMP_ID_USER28",
        [53] = "MAV_COMP_ID_USER29",
        [54] = "MAV_COMP_ID_USER30",
        [55] = "MAV_COMP_ID_USER31",
        [56] = "MAV_COMP_ID_USER32",
        [57] = "MAV_COMP_ID_USER33",
        [58] = "MAV_COMP_ID_USER34",
        [59] = "MAV_COMP_ID_USER35",
        [60] = "MAV_COMP_ID_USER36",
        [61] = "MAV_COMP_ID_USER37",
        [62] = "MAV_COMP_ID_USER38",
        [63] = "MAV_COMP_ID_USER39",
        [64] = "MAV_COMP_ID_USER40",
        [65] = "MAV_COMP_ID_USER41",
        [66] = "MAV_COMP_ID_USER42",
        [67] = "MAV_COMP_ID_USER43",
        [68] = "MAV_COMP_ID_TELEMETRY_RADIO",
        [69] = "MAV_COMP_ID_USER45",
        [70] = "MAV_COMP_ID_USER46",
        [71] = "MAV_COMP_ID_USER47",
        [72] = "MAV_COMP_ID_USER48",
        [73] = "MAV_COMP_ID_USER49",
        [74] = "MAV_COMP_ID_USER50",
        [75] = "MAV_COMP_ID_USER51",
        [76] = "MAV_COMP_ID_USER52",
        [77] = "MAV_COMP_ID_USER53",
        [78] = "MAV_COMP_ID_USER54",
        [79] = "MAV_COMP_ID_USER55",
        [80] = "MAV_COMP_ID_USER56",
        [81] = "MAV_COMP_ID_USER57",
        [82] = "MAV_COMP_ID_USER58",
        [83] = "MAV_COMP_ID_USER59",
        [84] = "MAV_COMP_ID_USER60",
        [85] = "MAV_COMP_ID_USER61",
        [86] = "MAV_COMP_ID_USER62",
        [87] = "MAV_COMP_ID_USER63",
        [88] = "MAV_COMP_ID_USER64",
        [89] = "MAV_COMP_ID_USER65",
        [90] = "MAV_COMP_ID_USER66",
        [91] = "MAV_COMP_ID_USER67",
        [92] = "MAV_COMP_ID_USER68",
        [93] = "MAV_COMP_ID_USER69",
        [94] = "MAV_COMP_ID_USER70",
        [95] = "MAV_COMP_ID_USER71",
        [96] = "MAV_COMP_ID_USER72",
        [97] = "MAV_COMP_ID_USER73",
        [98] = "MAV_COMP_ID_USER74",
        [99] = "MAV_COMP_ID_USER75",
        [100] = "MAV_COMP_ID_CAMERA",
        [101] = "MAV_COMP_ID_CAMERA2",
        [102] = "MAV_COMP_ID_CAMERA3",
        [103] = "MAV_COMP_ID_CAMERA4",
        [104] = "MAV_COMP_ID_CAMERA5",
        [105] = "MAV_COMP_ID_CAMERA6",
        [140] = "MAV_COMP_ID_SERVO1",
        [141] = "MAV_COMP_ID_SERVO2",
        [142] = "MAV_COMP_ID_SERVO3",
        [143] = "MAV_COMP_ID_SERVO4",
        [144] = "MAV_COMP_ID_SERVO5",
        [145] = "MAV_COMP_ID_SERVO6",
        [146] = "MAV_COMP_ID_SERVO7",
        [147] = "MAV_COMP_ID_SERVO8",
        [148] = "MAV_COMP_ID_SERVO9",
        [149] = "MAV_COMP_ID_SERVO10",
        [150] = "MAV_COMP_ID_SERVO11",
        [151] = "MAV_COMP_ID_SERVO12",
        [152] = "MAV_COMP_ID_SERVO13",
        [153] = "MAV_COMP_ID_SERVO14",
        [154] = "MAV_COMP_ID_GIMBAL",
        [155] = "MAV_COMP_ID_LOG",
        [156] = "MAV_COMP_ID_ADSB",
        [157] = "MAV_COMP_ID_OSD",
        [158] = "MAV_COMP_ID_PERIPHERAL",
        [159] = "MAV_COMP_ID_QX1_GIMBAL",
        [160] = "MAV_COMP_ID_FLARM",
        [161] = "MAV_COMP_ID_PARACHUTE",
        [169] = "MAV_COMP_ID_WINCH",
        [171] = "MAV_COMP_ID_GIMBAL2",
        [172] = "MAV_COMP_ID_GIMBAL3",
        [173] = "MAV_COMP_ID_GIMBAL4",
        [174] = "MAV_COMP_ID_GIMBAL5",
        [175] = "MAV_COMP_ID_GIMBAL6",
        [180] = "MAV_COMP_ID_BATTERY",
        [181] = "MAV_COMP_ID_BATTERY2",
        [189] = "MAV_COMP_ID_MAVCAN",
        [190] = "MAV_COMP_ID_MISSIONPLANNER",
        [191] = "MAV_COMP_ID_ONBOARD_COMPUTER",
        [192] = "MAV_COMP_ID_ONBOARD_COMPUTER2",
        [193] = "MAV_COMP_ID_ONBOARD_COMPUTER3",
        [194] = "MAV_COMP_ID_ONBOARD_COMPUTER4",
        [195] = "MAV_COMP_ID_PATHPLANNER",
        [196] = "MAV_COMP_ID_OBSTACLE_AVOIDANCE",
        [197] = "MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY",
        [198] = "MAV_COMP_ID_PAIRING_MANAGER",
        [200] = "MAV_COMP_ID_IMU",
        [201] = "MAV_COMP_ID_IMU_2",
        [202] = "MAV_COMP_ID_IMU_3",
        [220] = "MAV_COMP_ID_GPS",
        [221] = "MAV_COMP_ID_GPS2",
        [236] = "MAV_COMP_ID_ODID_TXRX_1",
        [237] = "MAV_COMP_ID_ODID_TXRX_2",
        [238] = "MAV_COMP_ID_ODID_TXRX_3",
        [240] = "MAV_COMP_ID_UDP_BRIDGE",
        [241] = "MAV_COMP_ID_UART_BRIDGE",
        [242] = "MAV_COMP_ID_TUNNEL_NODE",
        [250] = "MAV_COMP_ID_SYSTEM_CONTROL",
    },
}
f.magic = ProtoField.uint8("mavlink_proto.magic", "Magic value / version", base.HEX, protocolVersions)
f.length = ProtoField.uint8("mavlink_proto.length", "Payload length")
f.incompatibility_flag = ProtoField.uint8("mavlink_proto.incompatibility_flag", "Incompatibility flag")
f.compatibility_flag = ProtoField.uint8("mavlink_proto.compatibility_flag", "Compatibility flag")
f.sequence = ProtoField.uint8("mavlink_proto.sequence", "Packet sequence")
f.sysid = ProtoField.uint8("mavlink_proto.sysid", "System id", base.HEX)
f.compid = ProtoField.uint8("mavlink_proto.compid", "Component id", base.HEX)
f.msgid = ProtoField.uint24("mavlink_proto.msgid", "Message id", base.DEC, messageName)
f.payload = ProtoField.uint8("mavlink_proto.payload", "Payload", base.DEC, messageName)
f.crc = ProtoField.uint16("mavlink_proto.crc", "Message CRC", base.HEX)
f.signature_link = ProtoField.uint8("mavlink_proto.signature_link", "Link id", base.DEC)
f.signature_time = ProtoField.absolute_time("mavlink_proto.signature_time", "Time")
f.signature_signature = ProtoField.bytes("mavlink_proto.signature_signature", "Signature")
f.rawheader = ProtoField.bytes("mavlink_proto.rawheader", "Unparsable header fragment")
f.rawpayload = ProtoField.bytes("mavlink_proto.rawpayload", "Unparsable payload")

f.cmd_MAV_CMD_NAV_WAYPOINT_param1 = ProtoField.new("param1: Hold (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param2 = ProtoField.new("param2: Accept Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param3 = ProtoField.new("param3: Pass Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_TURNS_param1 = ProtoField.new("param1: Turns (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param2 = ProtoField.new("param2: Heading Required (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param4 = ProtoField.new("param4: Xtrack Location (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_TIME_param1 = ProtoField.new("param1: Time (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param2 = ProtoField.new("param2: Heading Required (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param4 = ProtoField.new("param4: Xtrack Location (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param7", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_NAV_LAND_param1 = ProtoField.new("param1: Abort Alt (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param2 = ProtoField.new("param2: Land Mode (PRECISION_LAND_MODE)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param2", ftypes.UINT32, enumEntryName.PRECISION_LAND_MODE)
f.cmd_MAV_CMD_NAV_LAND_param4 = ProtoField.new("param4: Yaw Angle (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_TAKEOFF_param1 = ProtoField.new("param1: Pitch (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LAND_LOCAL_param1 = ProtoField.new("param1: Target (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param2 = ProtoField.new("param2: Offset (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param3 = ProtoField.new("param3: Descend Rate (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param5 = ProtoField.new("param5: Y Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param6 = ProtoField.new("param6: X Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param7 = ProtoField.new("param7: Z Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1 = ProtoField.new("param1: Pitch (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3 = ProtoField.new("param3: Ascend Rate (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5 = ProtoField.new("param5: Y Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6 = ProtoField.new("param6: X Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7 = ProtoField.new("param7: Z Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FOLLOW_param1 = ProtoField.new("param1: Following (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param2 = ProtoField.new("param2: Ground Speed (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1 = ProtoField.new("param1: Action (float)", "mavlink_proto.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1 = ProtoField.new("param1: Heading Required (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2 = ProtoField.new("param2: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4 = ProtoField.new("param4: Xtrack Location (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FOLLOW_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_param4 = ProtoField.new("param4: Altitude Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_param5 = ProtoField.new("param5: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_param7 = ProtoField.new("param7: Time to Land (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1 = ProtoField.new("param1: Camera Q1 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2 = ProtoField.new("param2: Camera Q2 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3 = ProtoField.new("param3: Camera Q3 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4 = ProtoField.new("param4: Camera Q4 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5 = ProtoField.new("param5: Altitude Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6 = ProtoField.new("param6: X Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7 = ProtoField.new("param7: Y Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_ORBIT_param1 = ProtoField.new("param1: Radius (float)", "mavlink_proto.cmd_MAV_CMD_DO_ORBIT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ORBIT_param2 = ProtoField.new("param2: Velocity (float)", "mavlink_proto.cmd_MAV_CMD_DO_ORBIT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ORBIT_param3 = ProtoField.new("param3: Yaw Behavior (ORBIT_YAW_BEHAVIOUR)", "mavlink_proto.cmd_MAV_CMD_DO_ORBIT_param3", ftypes.UINT32, enumEntryName.ORBIT_YAW_BEHAVIOUR)
f.cmd_MAV_CMD_DO_ORBIT_param4 = ProtoField.new("param4: Orbits (float)", "mavlink_proto.cmd_MAV_CMD_DO_ORBIT_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ORBIT_param5 = ProtoField.new("param5: Latitude/X (float)", "mavlink_proto.cmd_MAV_CMD_DO_ORBIT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ORBIT_param6 = ProtoField.new("param6: Longitude/Y (float)", "mavlink_proto.cmd_MAV_CMD_DO_ORBIT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ORBIT_param7 = ProtoField.new("param7: Altitude/Z (float)", "mavlink_proto.cmd_MAV_CMD_DO_ORBIT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_ROI_param1 = ProtoField.new("param1: ROI Mode (MAV_ROI)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param1", ftypes.UINT32, enumEntryName.MAV_ROI)
f.cmd_MAV_CMD_NAV_ROI_param2 = ProtoField.new("param2: WP Index (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param3 = ProtoField.new("param3: ROI Index (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param5 = ProtoField.new("param5: X (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param6 = ProtoField.new("param6: Y (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param7 = ProtoField.new("param7: Z (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_PATHPLANNING_param1 = ProtoField.new("param1: Local Ctrl (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param2 = ProtoField.new("param2: Global Ctrl (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param5 = ProtoField.new("param5: Latitude/X (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param6 = ProtoField.new("param6: Longitude/Y (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param7 = ProtoField.new("param7: Altitude/Z (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1 = ProtoField.new("param1: Hold (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5 = ProtoField.new("param5: Latitude/X (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6 = ProtoField.new("param6: Longitude/Y (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7 = ProtoField.new("param7: Altitude/Z (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2 = ProtoField.new("param2: Transition Heading (VTOL_TRANSITION_HEADING)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2", ftypes.UINT32, enumEntryName.VTOL_TRANSITION_HEADING)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4 = ProtoField.new("param4: Yaw Angle (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_VTOL_LAND_param1 = ProtoField.new("param1: Land Options (NAV_VTOL_LAND_OPTIONS)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param1", ftypes.UINT32, enumEntryName.NAV_VTOL_LAND_OPTIONS)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param3 = ProtoField.new("param3: Approach Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param7 = ProtoField.new("param7: Ground Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_DELAY_param1 = ProtoField.new("param1: Delay (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_DELAY_param2 = ProtoField.new("param2: Hour (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_DELAY_param3 = ProtoField.new("param3: Minute (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_DELAY_param4 = ProtoField.new("param4: Second (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1 = ProtoField.new("param1: Max Descent (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_CONDITION_DELAY_param1 = ProtoField.new("param1: Delay (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_DELAY_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1 = ProtoField.new("param1: Rate (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONDITION_DISTANCE_param1 = ProtoField.new("param1: Distance (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_DISTANCE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONDITION_YAW_param1 = ProtoField.new("param1: Angle (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_YAW_param2 = ProtoField.new("param2: Angular Speed (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_YAW_param3 = ProtoField.new("param3: Direction (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_YAW_param4 = ProtoField.new("param4: Relative (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param4", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_DO_SET_MODE_param1 = ProtoField.new("param1: Mode (MAV_MODE)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MODE_param1", ftypes.UINT32, enumEntryName.MAV_MODE)
f.cmd_MAV_CMD_DO_SET_MODE_param2 = ProtoField.new("param2: Custom Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MODE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_MODE_param3 = ProtoField.new("param3: Custom Submode (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MODE_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_JUMP_param1 = ProtoField.new("param1: Number (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_JUMP_param2 = ProtoField.new("param2: Repeat (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_CHANGE_SPEED_param1 = ProtoField.new("param1: Speed Type (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_SPEED_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CHANGE_SPEED_param2 = ProtoField.new("param2: Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_SPEED_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CHANGE_SPEED_param3 = ProtoField.new("param3: Throttle (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_SPEED_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_HOME_param1 = ProtoField.new("param1: Use Current (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_HOME_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_HOME_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_HOME_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_HOME_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_PARAMETER_param1 = ProtoField.new("param1: Number (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_PARAMETER_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_PARAMETER_param2 = ProtoField.new("param2: Value (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_PARAMETER_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_RELAY_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_RELAY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_RELAY_param2 = ProtoField.new("param2: Setting (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_RELAY_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_REPEAT_RELAY_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_RELAY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_RELAY_param2 = ProtoField.new("param2: Count (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_RELAY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_RELAY_param3 = ProtoField.new("param3: Time (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_RELAY_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_SERVO_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_SERVO_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_SERVO_param2 = ProtoField.new("param2: PWM (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_SERVO_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_REPEAT_SERVO_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_SERVO_param2 = ProtoField.new("param2: PWM (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_SERVO_param3 = ProtoField.new("param3: Count (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_SERVO_param4 = ProtoField.new("param4: Time (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1 = ProtoField.new("param1: Terminate (float)", "mavlink_proto.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1 = ProtoField.new("param1: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2 = ProtoField.new("param2: Frame (MAV_FRAME)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2", ftypes.UINT32, enumEntryName.MAV_FRAME)

f.cmd_MAV_CMD_DO_SET_ACTUATOR_param1 = ProtoField.new("param1: Actuator 1 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ACTUATOR_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ACTUATOR_param2 = ProtoField.new("param2: Actuator 2 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ACTUATOR_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ACTUATOR_param3 = ProtoField.new("param3: Actuator 3 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ACTUATOR_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ACTUATOR_param4 = ProtoField.new("param4: Actuator 4 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ACTUATOR_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ACTUATOR_param5 = ProtoField.new("param5: Actuator 5 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ACTUATOR_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ACTUATOR_param6 = ProtoField.new("param6: Actuator 6 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ACTUATOR_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ACTUATOR_param7 = ProtoField.new("param7: Index (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ACTUATOR_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_LAND_START_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_LAND_START_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_LAND_START_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_LAND_START_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_LAND_START_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_LAND_START_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_RALLY_LAND_param1 = ProtoField.new("param1: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_RALLY_LAND_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_RALLY_LAND_param2 = ProtoField.new("param2: Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_RALLY_LAND_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GO_AROUND_param1 = ProtoField.new("param1: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_GO_AROUND_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_REPOSITION_param1 = ProtoField.new("param1: Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param2 = ProtoField.new("param2: Bitmask (MAV_DO_REPOSITION_FLAGS)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param2", ftypes.UINT32, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param2_flagMAV_DO_REPOSITION_FLAGS_CHANGE_MODE = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param2.MAV_DO_REPOSITION_FLAGS_CHANGE_MODE", "MAV_DO_REPOSITION_FLAGS_CHANGE_MODE")
f.cmd_MAV_CMD_DO_REPOSITION_param2_flagMAV_DO_REPOSITION_FLAGS_ENUM_END = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param2.MAV_DO_REPOSITION_FLAGS_ENUM_END", "MAV_DO_REPOSITION_FLAGS_ENUM_END")
f.cmd_MAV_CMD_DO_REPOSITION_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1 = ProtoField.new("param1: Continue (float)", "mavlink_proto.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_REVERSE_param1 = ProtoField.new("param1: Reverse (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_REVERSE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param1 = ProtoField.new("param1: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param1 = ProtoField.new("param1: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5 = ProtoField.new("param5: Pitch Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6 = ProtoField.new("param6: Roll Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7 = ProtoField.new("param7: Yaw Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_NONE_param1 = ProtoField.new("param1: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_NONE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param2 = ProtoField.new("param2: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_SYSID_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1 = ProtoField.new("param1: ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2 = ProtoField.new("param2: Transmission (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3 = ProtoField.new("param3: Interval (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4 = ProtoField.new("param4: Recording (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_param1 = ProtoField.new("param1: ROI Mode (MAV_ROI)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_param1", ftypes.UINT32, enumEntryName.MAV_ROI)
f.cmd_MAV_CMD_DO_SET_ROI_param2 = ProtoField.new("param2: WP Index (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_param3 = ProtoField.new("param3: ROI Index (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1 = ProtoField.new("param1: Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2 = ProtoField.new("param2: Shutter Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3 = ProtoField.new("param3: Aperture (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4 = ProtoField.new("param4: ISO (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5 = ProtoField.new("param5: Exposure (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6 = ProtoField.new("param6: Command Identity (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7 = ProtoField.new("param7: Engine Cut-off (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1 = ProtoField.new("param1: Session Control (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2 = ProtoField.new("param2: Zoom Absolute (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3 = ProtoField.new("param3: Zoom Relative (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4 = ProtoField.new("param4: Focus (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5 = ProtoField.new("param5: Shoot Command (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6 = ProtoField.new("param6: Command Identity (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7 = ProtoField.new("param7: Shot ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1 = ProtoField.new("param1: Mode (MAV_MOUNT_MODE)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1", ftypes.UINT32, enumEntryName.MAV_MOUNT_MODE)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2 = ProtoField.new("param2: Stabilize Roll (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3 = ProtoField.new("param3: Stabilize Pitch (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4 = ProtoField.new("param4: Stabilize Yaw (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param5 = ProtoField.new("param5: Roll Input Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param6 = ProtoField.new("param6: Pitch Input Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param7 = ProtoField.new("param7: Yaw Input Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param1 = ProtoField.new("param1: Pitch (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param2 = ProtoField.new("param2: Roll (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param3 = ProtoField.new("param3: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param4 = ProtoField.new("param4: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7 = ProtoField.new("param7: Mode (MAV_MOUNT_MODE)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7", ftypes.UINT32, enumEntryName.MAV_MOUNT_MODE)

f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1 = ProtoField.new("param1: Distance (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2 = ProtoField.new("param2: Shutter (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3 = ProtoField.new("param3: Trigger (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FENCE_ENABLE_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_DO_FENCE_ENABLE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_PARACHUTE_param1 = ProtoField.new("param1: Action (PARACHUTE_ACTION)", "mavlink_proto.cmd_MAV_CMD_DO_PARACHUTE_param1", ftypes.UINT32, enumEntryName.PARACHUTE_ACTION)

f.cmd_MAV_CMD_DO_MOTOR_TEST_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param2 = ProtoField.new("param2: Throttle Type (MOTOR_TEST_THROTTLE_TYPE)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param2", ftypes.UINT32, enumEntryName.MOTOR_TEST_THROTTLE_TYPE)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param3 = ProtoField.new("param3: Throttle (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param4 = ProtoField.new("param4: Timeout (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param5 = ProtoField.new("param5: Motor Count (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param6 = ProtoField.new("param6: Test Order (MOTOR_TEST_ORDER)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param6", ftypes.UINT32, enumEntryName.MOTOR_TEST_ORDER)

f.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1 = ProtoField.new("param1: Inverted (float)", "mavlink_proto.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GRIPPER_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_GRIPPER_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GRIPPER_param2 = ProtoField.new("param2: Action (GRIPPER_ACTIONS)", "mavlink_proto.cmd_MAV_CMD_DO_GRIPPER_param2", ftypes.UINT32, enumEntryName.GRIPPER_ACTIONS)

f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2 = ProtoField.new("param2: Axis (AUTOTUNE_AXIS)", "mavlink_proto.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2", ftypes.UINT32, enumEntryName.AUTOTUNE_AXIS)

f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1 = ProtoField.new("param1: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2 = ProtoField.new("param2: Speed (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3 = ProtoField.new("param3: Angle (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1 = ProtoField.new("param1: Trigger Cycle (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2 = ProtoField.new("param2: Shutter Integration (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1 = ProtoField.new("param1: Q1 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2 = ProtoField.new("param2: Q2 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3 = ProtoField.new("param3: Q3 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4 = ProtoField.new("param4: Q4 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GUIDED_MASTER_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_MASTER_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_MASTER_param2 = ProtoField.new("param2: Component ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_MASTER_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1 = ProtoField.new("param1: Timeout (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2 = ProtoField.new("param2: Min Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3 = ProtoField.new("param3: Max Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4 = ProtoField.new("param4: Horiz. Move Limit (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1 = ProtoField.new("param1: Start Engine (float)", "mavlink_proto.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2 = ProtoField.new("param2: Cold Start (float)", "mavlink_proto.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3 = ProtoField.new("param3: Height Delay (float)", "mavlink_proto.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1 = ProtoField.new("param1: Number (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param2 = ProtoField.new("param2: Reset Mission (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param2", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1 = ProtoField.new("param1: Gyro Temperature (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2 = ProtoField.new("param2: Magnetometer (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3 = ProtoField.new("param3: Ground Pressure (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4 = ProtoField.new("param4: Remote Control (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5 = ProtoField.new("param5: Accelerometer (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6 = ProtoField.new("param6: Compmot or Airspeed (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7 = ProtoField.new("param7: ESC or Baro (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1 = ProtoField.new("param1: Sensor Type (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2 = ProtoField.new("param2: X Offset (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3 = ProtoField.new("param3: Y Offset (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4 = ProtoField.new("param4: Z Offset (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5 = ProtoField.new("param5: 4th Dimension (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6 = ProtoField.new("param6: 5th Dimension (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7 = ProtoField.new("param7: 6th Dimension (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1 = ProtoField.new("param1: Actuator ID (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1 = ProtoField.new("param1: Parameter Storage (PREFLIGHT_STORAGE_PARAMETER_ACTION)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1", ftypes.UINT32, enumEntryName.PREFLIGHT_STORAGE_PARAMETER_ACTION)
f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2 = ProtoField.new("param2: Mission Storage (PREFLIGHT_STORAGE_MISSION_ACTION)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2", ftypes.UINT32, enumEntryName.PREFLIGHT_STORAGE_MISSION_ACTION)
f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3 = ProtoField.new("param3: Logging Rate (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1 = ProtoField.new("param1: Autopilot (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2 = ProtoField.new("param2: Companion (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param3 = ProtoField.new("param3: Component action (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param4 = ProtoField.new("param4: Component ID (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_OVERRIDE_GOTO_param1 = ProtoField.new("param1: Continue (MAV_GOTO)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param1", ftypes.UINT32, enumEntryName.MAV_GOTO)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param2 = ProtoField.new("param2: Position (MAV_GOTO)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param2", ftypes.UINT32, enumEntryName.MAV_GOTO)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param3 = ProtoField.new("param3: Frame (MAV_FRAME)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param3", ftypes.UINT32, enumEntryName.MAV_FRAME)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param5 = ProtoField.new("param5: Latitude/X (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param6 = ProtoField.new("param6: Longitude/Y (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param7 = ProtoField.new("param7: Altitude/Z (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_OBLIQUE_SURVEY_param1 = ProtoField.new("param1: Distance (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param2 = ProtoField.new("param2: Shutter (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param3 = ProtoField.new("param3: Min Interval (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param4 = ProtoField.new("param4: Positions (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param5 = ProtoField.new("param5: Roll Angle (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param6 = ProtoField.new("param6: Pitch Angle (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_MISSION_START_param1 = ProtoField.new("param1: First Item (float)", "mavlink_proto.cmd_MAV_CMD_MISSION_START_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_MISSION_START_param2 = ProtoField.new("param2: Last Item (float)", "mavlink_proto.cmd_MAV_CMD_MISSION_START_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_ACTUATOR_TEST_param1 = ProtoField.new("param1: Value (float)", "mavlink_proto.cmd_MAV_CMD_ACTUATOR_TEST_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_ACTUATOR_TEST_param2 = ProtoField.new("param2: Timeout (float)", "mavlink_proto.cmd_MAV_CMD_ACTUATOR_TEST_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_ACTUATOR_TEST_param5 = ProtoField.new("param5: Output Function (ACTUATOR_OUTPUT_FUNCTION)", "mavlink_proto.cmd_MAV_CMD_ACTUATOR_TEST_param5", ftypes.UINT32, enumEntryName.ACTUATOR_OUTPUT_FUNCTION)

f.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param1 = ProtoField.new("param1: Configuration (ACTUATOR_CONFIGURATION)", "mavlink_proto.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param1", ftypes.UINT32, enumEntryName.ACTUATOR_CONFIGURATION)
f.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param5 = ProtoField.new("param5: Output Function (ACTUATOR_OUTPUT_FUNCTION)", "mavlink_proto.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param5", ftypes.UINT32, enumEntryName.ACTUATOR_OUTPUT_FUNCTION)

f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1 = ProtoField.new("param1: Arm (float)", "mavlink_proto.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2 = ProtoField.new("param2: Force (float)", "mavlink_proto.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_ILLUMINATOR_ON_OFF_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_ILLUMINATOR_ON_OFF_param1", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_INJECT_FAILURE_param1 = ProtoField.new("param1: Failure unit (FAILURE_UNIT)", "mavlink_proto.cmd_MAV_CMD_INJECT_FAILURE_param1", ftypes.UINT32, enumEntryName.FAILURE_UNIT)
f.cmd_MAV_CMD_INJECT_FAILURE_param2 = ProtoField.new("param2: Failure type (FAILURE_TYPE)", "mavlink_proto.cmd_MAV_CMD_INJECT_FAILURE_param2", ftypes.UINT32, enumEntryName.FAILURE_TYPE)
f.cmd_MAV_CMD_INJECT_FAILURE_param3 = ProtoField.new("param3: Instance (float)", "mavlink_proto.cmd_MAV_CMD_INJECT_FAILURE_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_START_RX_PAIR_param1 = ProtoField.new("param1: Spektrum (float)", "mavlink_proto.cmd_MAV_CMD_START_RX_PAIR_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_START_RX_PAIR_param2 = ProtoField.new("param2: RC Type (RC_TYPE)", "mavlink_proto.cmd_MAV_CMD_START_RX_PAIR_param2", ftypes.UINT32, enumEntryName.RC_TYPE)

f.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1 = ProtoField.new("param1: Message ID (float)", "mavlink_proto.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1 = ProtoField.new("param1: Message ID (float)", "mavlink_proto.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2 = ProtoField.new("param2: Interval (float)", "mavlink_proto.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7 = ProtoField.new("param7: Response Target (float)", "mavlink_proto.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_MESSAGE_param1 = ProtoField.new("param1: Message ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param2 = ProtoField.new("param2: Req Param 1 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param3 = ProtoField.new("param3: Req Param 2 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param4 = ProtoField.new("param4: Req Param 3 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param5 = ProtoField.new("param5: Req Param 4 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param6 = ProtoField.new("param6: Req Param 5 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param7 = ProtoField.new("param7: Response Target (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1 = ProtoField.new("param1: Protocol (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1 = ProtoField.new("param1: Version (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1 = ProtoField.new("param1: Capabilities (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1 = ProtoField.new("param1: Settings (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1 = ProtoField.new("param1: Storage ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2 = ProtoField.new("param2: Information (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_STORAGE_FORMAT_param1 = ProtoField.new("param1: Storage ID (float)", "mavlink_proto.cmd_MAV_CMD_STORAGE_FORMAT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_STORAGE_FORMAT_param2 = ProtoField.new("param2: Format (float)", "mavlink_proto.cmd_MAV_CMD_STORAGE_FORMAT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_STORAGE_FORMAT_param3 = ProtoField.new("param3: Reset Image Log (float)", "mavlink_proto.cmd_MAV_CMD_STORAGE_FORMAT_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1 = ProtoField.new("param1: Capture Status (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1 = ProtoField.new("param1: Flight Information (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1 = ProtoField.new("param1: Reset (float)", "mavlink_proto.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_CAMERA_MODE_param2 = ProtoField.new("param2: Camera Mode (CAMERA_MODE)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_MODE_param2", ftypes.UINT32, enumEntryName.CAMERA_MODE)

f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1 = ProtoField.new("param1: Zoom Type (CAMERA_ZOOM_TYPE)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1", ftypes.UINT32, enumEntryName.CAMERA_ZOOM_TYPE)
f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2 = ProtoField.new("param2: Zoom Value (float)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1 = ProtoField.new("param1: Focus Type (SET_FOCUS_TYPE)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1", ftypes.UINT32, enumEntryName.SET_FOCUS_TYPE)
f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2 = ProtoField.new("param2: Focus Value (float)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_STORAGE_USAGE_param1 = ProtoField.new("param1: Storage ID (float)", "mavlink_proto.cmd_MAV_CMD_SET_STORAGE_USAGE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_STORAGE_USAGE_param2 = ProtoField.new("param2: Usage (STORAGE_USAGE_FLAG)", "mavlink_proto.cmd_MAV_CMD_SET_STORAGE_USAGE_param2", ftypes.UINT32, nil)
f.cmd_MAV_CMD_SET_STORAGE_USAGE_param2_flagSTORAGE_USAGE_FLAG_SET = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_SET_STORAGE_USAGE_param2.STORAGE_USAGE_FLAG_SET", "STORAGE_USAGE_FLAG_SET")
f.cmd_MAV_CMD_SET_STORAGE_USAGE_param2_flagSTORAGE_USAGE_FLAG_PHOTO = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_SET_STORAGE_USAGE_param2.STORAGE_USAGE_FLAG_PHOTO", "STORAGE_USAGE_FLAG_PHOTO")
f.cmd_MAV_CMD_SET_STORAGE_USAGE_param2_flagSTORAGE_USAGE_FLAG_VIDEO = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_SET_STORAGE_USAGE_param2.STORAGE_USAGE_FLAG_VIDEO", "STORAGE_USAGE_FLAG_VIDEO")
f.cmd_MAV_CMD_SET_STORAGE_USAGE_param2_flagSTORAGE_USAGE_FLAG_LOGS = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_SET_STORAGE_USAGE_param2.STORAGE_USAGE_FLAG_LOGS", "STORAGE_USAGE_FLAG_LOGS")

f.cmd_MAV_CMD_JUMP_TAG_param1 = ProtoField.new("param1: Tag (float)", "mavlink_proto.cmd_MAV_CMD_JUMP_TAG_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_JUMP_TAG_param1 = ProtoField.new("param1: Tag (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_TAG_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_JUMP_TAG_param2 = ProtoField.new("param2: Repeat (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_TAG_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1 = ProtoField.new("param1: Pitch angle (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2 = ProtoField.new("param2: Yaw angle (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3 = ProtoField.new("param3: Pitch rate (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4 = ProtoField.new("param4: Yaw rate (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5 = ProtoField.new("param5: Gimbal manager flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5", ftypes.UINT32, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE", "GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_RC_MIXED = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_RC_MIXED", "GIMBAL_MANAGER_FLAGS_RC_MIXED")
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7 = ProtoField.new("param7: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1 = ProtoField.new("param1: sysid primary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2 = ProtoField.new("param2: compid primary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3 = ProtoField.new("param3: sysid secondary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4 = ProtoField.new("param4: compid secondary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7 = ProtoField.new("param7: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2 = ProtoField.new("param2: Interval (float)", "mavlink_proto.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3 = ProtoField.new("param3: Total Images (float)", "mavlink_proto.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4 = ProtoField.new("param4: Sequence Number (float)", "mavlink_proto.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE_param1 = ProtoField.new("param1: Number (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2 = ProtoField.new("param2: Reset (float)", "mavlink_proto.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3 = ProtoField.new("param3: Pause (float)", "mavlink_proto.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1 = ProtoField.new("param1: Point x (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2 = ProtoField.new("param2: Point y (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1 = ProtoField.new("param1: Top left corner x (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2 = ProtoField.new("param2: Top left corner y (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3 = ProtoField.new("param3: Bottom right corner x (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4 = ProtoField.new("param4: Bottom right corner y (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2 = ProtoField.new("param2: Status Frequency (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_VIDEO_START_STREAMING_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_START_STREAMING_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_LOGGING_START_param1 = ProtoField.new("param1: Format (float)", "mavlink_proto.cmd_MAV_CMD_LOGGING_START_param1", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1 = ProtoField.new("param1: Landing Gear ID (float)", "mavlink_proto.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2 = ProtoField.new("param2: Landing Gear Position (float)", "mavlink_proto.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PANORAMA_CREATE_param1 = ProtoField.new("param1: Horizontal Angle (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PANORAMA_CREATE_param2 = ProtoField.new("param2: Vertical Angle (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PANORAMA_CREATE_param3 = ProtoField.new("param3: Horizontal Speed (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PANORAMA_CREATE_param4 = ProtoField.new("param4: Vertical Speed (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1 = ProtoField.new("param1: State (MAV_VTOL_STATE)", "mavlink_proto.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1", ftypes.UINT32, enumEntryName.MAV_VTOL_STATE)
f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param2 = ProtoField.new("param2: Immediate (float)", "mavlink_proto.cmd_MAV_CMD_DO_VTOL_TRANSITION_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1 = ProtoField.new("param1: Radius (float)", "mavlink_proto.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONDITION_GATE_param1 = ProtoField.new("param1: Geometry (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_GATE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_GATE_param2 = ProtoField.new("param2: UseAltitude (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_GATE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_GATE_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_GATE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_GATE_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_GATE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_GATE_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_GATE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1 = ProtoField.new("param1: Vertex Count (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2 = ProtoField.new("param2: Inclusion Group (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1 = ProtoField.new("param1: Vertex Count (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1 = ProtoField.new("param1: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2 = ProtoField.new("param2: Inclusion Group (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1 = ProtoField.new("param1: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_RALLY_POINT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_RALLY_POINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_RALLY_POINT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_RALLY_POINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_RALLY_POINT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_RALLY_POINT_param7", ftypes.FLOAT, nil)



f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1 = ProtoField.new("param1: Operation Mode (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2 = ProtoField.new("param2: Approach Vector (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3 = ProtoField.new("param3: Ground Speed (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4 = ProtoField.new("param4: Altitude Clearance (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1 = ProtoField.new("param1: Operation Mode (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_1_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_1_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_1_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_1_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_1_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_1_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_2_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_2_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_2_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_2_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_2_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_2_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_3_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_3_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_3_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_3_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_3_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_3_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_4_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_4_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_4_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_4_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_4_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_4_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_5_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_5_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_5_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_5_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_5_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_5_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_1_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_1_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_1_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_1_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_1_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_1_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_2_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_2_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_2_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_2_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_2_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_2_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_3_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_3_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_3_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_3_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_3_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_3_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_4_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_4_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_4_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_4_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_4_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_4_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_5_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_5_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_5_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_5_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_5_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_5_param7", ftypes.FLOAT, nil)






f.cmd_MAV_CMD_CAN_FORWARD_param1 = ProtoField.new("param1: bus (float)", "mavlink_proto.cmd_MAV_CMD_CAN_FORWARD_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1 = ProtoField.new("param1: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2 = ProtoField.new("param2: CompassMask (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3 = ProtoField.new("param3: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4 = ProtoField.new("param4: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_WINCH_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_WINCH_param2 = ProtoField.new("param2: Action (WINCH_ACTIONS)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param2", ftypes.UINT32, enumEntryName.WINCH_ACTIONS)
f.cmd_MAV_CMD_DO_WINCH_param3 = ProtoField.new("param3: Length (float)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_WINCH_param4 = ProtoField.new("param4: Rate (float)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param4", ftypes.FLOAT, nil)


f.SYS_STATUS_onboard_control_sensors_present = ProtoField.new("onboard_control_sensors_present (MAV_SYS_STATUS_SENSOR)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_present", ftypes.UINT32, nil)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_GYRO = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_GYRO", "MAV_SYS_STATUS_SENSOR_3D_GYRO")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_ACCEL", "MAV_SYS_STATUS_SENSOR_3D_ACCEL")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_MAG = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_MAG", "MAV_SYS_STATUS_SENSOR_3D_MAG")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_GPS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_GPS", "MAV_SYS_STATUS_SENSOR_GPS")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_VISION_POSITION", "MAV_SYS_STATUS_SENSOR_VISION_POSITION")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_LASER_POSITION", "MAV_SYS_STATUS_SENSOR_LASER_POSITION")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_YAW_POSITION", "MAV_SYS_STATUS_SENSOR_YAW_POSITION")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_RC_RECEIVER", "MAV_SYS_STATUS_SENSOR_RC_RECEIVER")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_GYRO2", "MAV_SYS_STATUS_SENSOR_3D_GYRO2")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_ACCEL2", "MAV_SYS_STATUS_SENSOR_3D_ACCEL2")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_MAG2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_MAG2", "MAV_SYS_STATUS_SENSOR_3D_MAG2")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_GEOFENCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_GEOFENCE", "MAV_SYS_STATUS_GEOFENCE")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_AHRS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_AHRS", "MAV_SYS_STATUS_AHRS")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_TERRAIN = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_TERRAIN", "MAV_SYS_STATUS_TERRAIN")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_REVERSE_MOTOR = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_REVERSE_MOTOR", "MAV_SYS_STATUS_REVERSE_MOTOR")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_LOGGING = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_LOGGING", "MAV_SYS_STATUS_LOGGING")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_BATTERY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_BATTERY", "MAV_SYS_STATUS_SENSOR_BATTERY")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_PROXIMITY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_PROXIMITY", "MAV_SYS_STATUS_SENSOR_PROXIMITY")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_SATCOM = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_SATCOM", "MAV_SYS_STATUS_SENSOR_SATCOM")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_PREARM_CHECK = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_PREARM_CHECK", "MAV_SYS_STATUS_PREARM_CHECK")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_PROPULSION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_PROPULSION", "MAV_SYS_STATUS_SENSOR_PROPULSION")
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_EXTENSION_USED = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_EXTENSION_USED", "MAV_SYS_STATUS_EXTENSION_USED")
f.SYS_STATUS_onboard_control_sensors_enabled = ProtoField.new("onboard_control_sensors_enabled (MAV_SYS_STATUS_SENSOR)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled", ftypes.UINT32, nil)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_GYRO = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_GYRO", "MAV_SYS_STATUS_SENSOR_3D_GYRO")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_ACCEL", "MAV_SYS_STATUS_SENSOR_3D_ACCEL")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_MAG = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_MAG", "MAV_SYS_STATUS_SENSOR_3D_MAG")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_GPS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_GPS", "MAV_SYS_STATUS_SENSOR_GPS")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_VISION_POSITION", "MAV_SYS_STATUS_SENSOR_VISION_POSITION")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_LASER_POSITION", "MAV_SYS_STATUS_SENSOR_LASER_POSITION")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_YAW_POSITION", "MAV_SYS_STATUS_SENSOR_YAW_POSITION")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_RC_RECEIVER", "MAV_SYS_STATUS_SENSOR_RC_RECEIVER")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_GYRO2", "MAV_SYS_STATUS_SENSOR_3D_GYRO2")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_ACCEL2", "MAV_SYS_STATUS_SENSOR_3D_ACCEL2")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_MAG2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_MAG2", "MAV_SYS_STATUS_SENSOR_3D_MAG2")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_GEOFENCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_GEOFENCE", "MAV_SYS_STATUS_GEOFENCE")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_AHRS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_AHRS", "MAV_SYS_STATUS_AHRS")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_TERRAIN = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_TERRAIN", "MAV_SYS_STATUS_TERRAIN")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_REVERSE_MOTOR = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_REVERSE_MOTOR", "MAV_SYS_STATUS_REVERSE_MOTOR")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_LOGGING = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_LOGGING", "MAV_SYS_STATUS_LOGGING")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_BATTERY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_BATTERY", "MAV_SYS_STATUS_SENSOR_BATTERY")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_PROXIMITY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_PROXIMITY", "MAV_SYS_STATUS_SENSOR_PROXIMITY")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_SATCOM = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_SATCOM", "MAV_SYS_STATUS_SENSOR_SATCOM")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_PREARM_CHECK = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_PREARM_CHECK", "MAV_SYS_STATUS_PREARM_CHECK")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_PROPULSION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_PROPULSION", "MAV_SYS_STATUS_SENSOR_PROPULSION")
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_EXTENSION_USED = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_EXTENSION_USED", "MAV_SYS_STATUS_EXTENSION_USED")
f.SYS_STATUS_onboard_control_sensors_health = ProtoField.new("onboard_control_sensors_health (MAV_SYS_STATUS_SENSOR)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_health", ftypes.UINT32, nil)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_GYRO = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_GYRO", "MAV_SYS_STATUS_SENSOR_3D_GYRO")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_ACCEL", "MAV_SYS_STATUS_SENSOR_3D_ACCEL")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_MAG = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_MAG", "MAV_SYS_STATUS_SENSOR_3D_MAG")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_GPS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_GPS", "MAV_SYS_STATUS_SENSOR_GPS")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_VISION_POSITION", "MAV_SYS_STATUS_SENSOR_VISION_POSITION")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_LASER_POSITION", "MAV_SYS_STATUS_SENSOR_LASER_POSITION")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_YAW_POSITION", "MAV_SYS_STATUS_SENSOR_YAW_POSITION")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_RC_RECEIVER", "MAV_SYS_STATUS_SENSOR_RC_RECEIVER")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_GYRO2", "MAV_SYS_STATUS_SENSOR_3D_GYRO2")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_ACCEL2", "MAV_SYS_STATUS_SENSOR_3D_ACCEL2")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_MAG2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_MAG2", "MAV_SYS_STATUS_SENSOR_3D_MAG2")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_GEOFENCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_GEOFENCE", "MAV_SYS_STATUS_GEOFENCE")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_AHRS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_AHRS", "MAV_SYS_STATUS_AHRS")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_TERRAIN = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_TERRAIN", "MAV_SYS_STATUS_TERRAIN")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_REVERSE_MOTOR = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_REVERSE_MOTOR", "MAV_SYS_STATUS_REVERSE_MOTOR")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_LOGGING = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_LOGGING", "MAV_SYS_STATUS_LOGGING")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_BATTERY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_BATTERY", "MAV_SYS_STATUS_SENSOR_BATTERY")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_PROXIMITY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_PROXIMITY", "MAV_SYS_STATUS_SENSOR_PROXIMITY")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_SATCOM = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_SATCOM", "MAV_SYS_STATUS_SENSOR_SATCOM")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_PREARM_CHECK = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_PREARM_CHECK", "MAV_SYS_STATUS_PREARM_CHECK")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_PROPULSION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_PROPULSION", "MAV_SYS_STATUS_SENSOR_PROPULSION")
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_EXTENSION_USED = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_EXTENSION_USED", "MAV_SYS_STATUS_EXTENSION_USED")
f.SYS_STATUS_load = ProtoField.new("load (uint16_t)", "mavlink_proto.SYS_STATUS_load", ftypes.UINT16, nil)
f.SYS_STATUS_voltage_battery = ProtoField.new("voltage_battery (uint16_t)", "mavlink_proto.SYS_STATUS_voltage_battery", ftypes.UINT16, nil)
f.SYS_STATUS_current_battery = ProtoField.new("current_battery (int16_t)", "mavlink_proto.SYS_STATUS_current_battery", ftypes.INT16, nil)
f.SYS_STATUS_battery_remaining = ProtoField.new("battery_remaining (int8_t)", "mavlink_proto.SYS_STATUS_battery_remaining", ftypes.INT8, nil)
f.SYS_STATUS_drop_rate_comm = ProtoField.new("drop_rate_comm (uint16_t)", "mavlink_proto.SYS_STATUS_drop_rate_comm", ftypes.UINT16, nil)
f.SYS_STATUS_errors_comm = ProtoField.new("errors_comm (uint16_t)", "mavlink_proto.SYS_STATUS_errors_comm", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count1 = ProtoField.new("errors_count1 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count1", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count2 = ProtoField.new("errors_count2 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count2", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count3 = ProtoField.new("errors_count3 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count3", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count4 = ProtoField.new("errors_count4 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count4", ftypes.UINT16, nil)
f.SYS_STATUS_onboard_control_sensors_present_extended = ProtoField.new("onboard_control_sensors_present_extended (MAV_SYS_STATUS_SENSOR_EXTENDED)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_present_extended", ftypes.UINT32, enumEntryName.MAV_SYS_STATUS_SENSOR_EXTENDED)
f.SYS_STATUS_onboard_control_sensors_enabled_extended = ProtoField.new("onboard_control_sensors_enabled_extended (MAV_SYS_STATUS_SENSOR_EXTENDED)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled_extended", ftypes.UINT32, enumEntryName.MAV_SYS_STATUS_SENSOR_EXTENDED)
f.SYS_STATUS_onboard_control_sensors_health_extended = ProtoField.new("onboard_control_sensors_health_extended (MAV_SYS_STATUS_SENSOR_EXTENDED)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_health_extended", ftypes.UINT32, enumEntryName.MAV_SYS_STATUS_SENSOR_EXTENDED)

f.SYSTEM_TIME_time_unix_usec = ProtoField.new("time_unix_usec (uint64_t)", "mavlink_proto.SYSTEM_TIME_time_unix_usec", ftypes.UINT64, nil)
f.SYSTEM_TIME_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SYSTEM_TIME_time_boot_ms", ftypes.UINT32, nil)

f.PING_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.PING_time_usec", ftypes.UINT64, nil)
f.PING_seq = ProtoField.new("seq (uint32_t)", "mavlink_proto.PING_seq", ftypes.UINT32, nil)
f.PING_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PING_target_system", ftypes.UINT8, nil)
f.PING_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PING_target_component", ftypes.UINT8, nil)

f.CHANGE_OPERATOR_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_target_system", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_control_request = ProtoField.new("control_request (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_control_request", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_version = ProtoField.new("version (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_version", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_passkey = ProtoField.new("passkey (char)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_passkey", ftypes.STRING, nil)

f.CHANGE_OPERATOR_CONTROL_ACK_gcs_system_id = ProtoField.new("gcs_system_id (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_ACK_gcs_system_id", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_ACK_control_request = ProtoField.new("control_request (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_ACK_control_request", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_ACK_ack = ProtoField.new("ack (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_ACK_ack", ftypes.UINT8, nil)

f.AUTH_KEY_key = ProtoField.new("key (char)", "mavlink_proto.AUTH_KEY_key", ftypes.STRING, nil)

f.LINK_NODE_STATUS_timestamp = ProtoField.new("timestamp (uint64_t)", "mavlink_proto.LINK_NODE_STATUS_timestamp", ftypes.UINT64, nil)
f.LINK_NODE_STATUS_tx_buf = ProtoField.new("tx_buf (uint8_t)", "mavlink_proto.LINK_NODE_STATUS_tx_buf", ftypes.UINT8, nil)
f.LINK_NODE_STATUS_rx_buf = ProtoField.new("rx_buf (uint8_t)", "mavlink_proto.LINK_NODE_STATUS_rx_buf", ftypes.UINT8, nil)
f.LINK_NODE_STATUS_tx_rate = ProtoField.new("tx_rate (uint32_t)", "mavlink_proto.LINK_NODE_STATUS_tx_rate", ftypes.UINT32, nil)
f.LINK_NODE_STATUS_rx_rate = ProtoField.new("rx_rate (uint32_t)", "mavlink_proto.LINK_NODE_STATUS_rx_rate", ftypes.UINT32, nil)
f.LINK_NODE_STATUS_rx_parse_err = ProtoField.new("rx_parse_err (uint16_t)", "mavlink_proto.LINK_NODE_STATUS_rx_parse_err", ftypes.UINT16, nil)
f.LINK_NODE_STATUS_tx_overflows = ProtoField.new("tx_overflows (uint16_t)", "mavlink_proto.LINK_NODE_STATUS_tx_overflows", ftypes.UINT16, nil)
f.LINK_NODE_STATUS_rx_overflows = ProtoField.new("rx_overflows (uint16_t)", "mavlink_proto.LINK_NODE_STATUS_rx_overflows", ftypes.UINT16, nil)
f.LINK_NODE_STATUS_messages_sent = ProtoField.new("messages_sent (uint32_t)", "mavlink_proto.LINK_NODE_STATUS_messages_sent", ftypes.UINT32, nil)
f.LINK_NODE_STATUS_messages_received = ProtoField.new("messages_received (uint32_t)", "mavlink_proto.LINK_NODE_STATUS_messages_received", ftypes.UINT32, nil)
f.LINK_NODE_STATUS_messages_lost = ProtoField.new("messages_lost (uint32_t)", "mavlink_proto.LINK_NODE_STATUS_messages_lost", ftypes.UINT32, nil)

f.SET_MODE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_MODE_target_system", ftypes.UINT8, nil)
f.SET_MODE_base_mode = ProtoField.new("base_mode (MAV_MODE)", "mavlink_proto.SET_MODE_base_mode", ftypes.UINT8, enumEntryName.MAV_MODE)
f.SET_MODE_custom_mode = ProtoField.new("custom_mode (uint32_t)", "mavlink_proto.SET_MODE_custom_mode", ftypes.UINT32, nil)

f.PARAM_REQUEST_READ_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_REQUEST_READ_target_system", ftypes.UINT8, nil)
f.PARAM_REQUEST_READ_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_REQUEST_READ_target_component", ftypes.UINT8, nil)
f.PARAM_REQUEST_READ_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_REQUEST_READ_param_id", ftypes.STRING, nil)
f.PARAM_REQUEST_READ_param_index = ProtoField.new("param_index (int16_t)", "mavlink_proto.PARAM_REQUEST_READ_param_index", ftypes.INT16, nil)

f.PARAM_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.PARAM_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_REQUEST_LIST_target_component", ftypes.UINT8, nil)

f.PARAM_VALUE_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_VALUE_param_id", ftypes.STRING, nil)
f.PARAM_VALUE_param_value = ProtoField.new("param_value (float)", "mavlink_proto.PARAM_VALUE_param_value", ftypes.FLOAT, nil)
f.PARAM_VALUE_param_type = ProtoField.new("param_type (MAV_PARAM_TYPE)", "mavlink_proto.PARAM_VALUE_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_TYPE)
f.PARAM_VALUE_param_count = ProtoField.new("param_count (uint16_t)", "mavlink_proto.PARAM_VALUE_param_count", ftypes.UINT16, nil)
f.PARAM_VALUE_param_index = ProtoField.new("param_index (uint16_t)", "mavlink_proto.PARAM_VALUE_param_index", ftypes.UINT16, nil)

f.PARAM_SET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_SET_target_system", ftypes.UINT8, nil)
f.PARAM_SET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_SET_target_component", ftypes.UINT8, nil)
f.PARAM_SET_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_SET_param_id", ftypes.STRING, nil)
f.PARAM_SET_param_value = ProtoField.new("param_value (float)", "mavlink_proto.PARAM_SET_param_value", ftypes.FLOAT, nil)
f.PARAM_SET_param_type = ProtoField.new("param_type (MAV_PARAM_TYPE)", "mavlink_proto.PARAM_SET_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_TYPE)

f.GPS_RAW_INT_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS_RAW_INT_time_usec", ftypes.UINT64, nil)
f.GPS_RAW_INT_fix_type = ProtoField.new("fix_type (GPS_FIX_TYPE)", "mavlink_proto.GPS_RAW_INT_fix_type", ftypes.UINT8, enumEntryName.GPS_FIX_TYPE)
f.GPS_RAW_INT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GPS_RAW_INT_lat", ftypes.INT32, nil)
f.GPS_RAW_INT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GPS_RAW_INT_lon", ftypes.INT32, nil)
f.GPS_RAW_INT_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GPS_RAW_INT_alt", ftypes.INT32, nil)
f.GPS_RAW_INT_eph = ProtoField.new("eph (uint16_t)", "mavlink_proto.GPS_RAW_INT_eph", ftypes.UINT16, nil)
f.GPS_RAW_INT_epv = ProtoField.new("epv (uint16_t)", "mavlink_proto.GPS_RAW_INT_epv", ftypes.UINT16, nil)
f.GPS_RAW_INT_vel = ProtoField.new("vel (uint16_t)", "mavlink_proto.GPS_RAW_INT_vel", ftypes.UINT16, nil)
f.GPS_RAW_INT_cog = ProtoField.new("cog (uint16_t)", "mavlink_proto.GPS_RAW_INT_cog", ftypes.UINT16, nil)
f.GPS_RAW_INT_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS_RAW_INT_satellites_visible", ftypes.UINT8, nil)
f.GPS_RAW_INT_alt_ellipsoid = ProtoField.new("alt_ellipsoid (int32_t)", "mavlink_proto.GPS_RAW_INT_alt_ellipsoid", ftypes.INT32, nil)
f.GPS_RAW_INT_h_acc = ProtoField.new("h_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_h_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_v_acc = ProtoField.new("v_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_v_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_vel_acc = ProtoField.new("vel_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_vel_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_hdg_acc = ProtoField.new("hdg_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_hdg_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.GPS_RAW_INT_yaw", ftypes.UINT16, nil)

f.GPS_STATUS_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS_STATUS_satellites_visible", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_0 = ProtoField.new("satellite_prn[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_1 = ProtoField.new("satellite_prn[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_2 = ProtoField.new("satellite_prn[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_3 = ProtoField.new("satellite_prn[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_4 = ProtoField.new("satellite_prn[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_5 = ProtoField.new("satellite_prn[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_6 = ProtoField.new("satellite_prn[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_7 = ProtoField.new("satellite_prn[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_8 = ProtoField.new("satellite_prn[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_9 = ProtoField.new("satellite_prn[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_10 = ProtoField.new("satellite_prn[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_11 = ProtoField.new("satellite_prn[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_12 = ProtoField.new("satellite_prn[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_13 = ProtoField.new("satellite_prn[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_14 = ProtoField.new("satellite_prn[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_15 = ProtoField.new("satellite_prn[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_16 = ProtoField.new("satellite_prn[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_17 = ProtoField.new("satellite_prn[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_18 = ProtoField.new("satellite_prn[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_19 = ProtoField.new("satellite_prn[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_0 = ProtoField.new("satellite_used[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_1 = ProtoField.new("satellite_used[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_2 = ProtoField.new("satellite_used[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_3 = ProtoField.new("satellite_used[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_4 = ProtoField.new("satellite_used[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_5 = ProtoField.new("satellite_used[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_6 = ProtoField.new("satellite_used[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_7 = ProtoField.new("satellite_used[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_8 = ProtoField.new("satellite_used[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_9 = ProtoField.new("satellite_used[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_10 = ProtoField.new("satellite_used[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_11 = ProtoField.new("satellite_used[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_12 = ProtoField.new("satellite_used[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_13 = ProtoField.new("satellite_used[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_14 = ProtoField.new("satellite_used[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_15 = ProtoField.new("satellite_used[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_16 = ProtoField.new("satellite_used[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_17 = ProtoField.new("satellite_used[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_18 = ProtoField.new("satellite_used[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_19 = ProtoField.new("satellite_used[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_0 = ProtoField.new("satellite_elevation[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_1 = ProtoField.new("satellite_elevation[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_2 = ProtoField.new("satellite_elevation[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_3 = ProtoField.new("satellite_elevation[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_4 = ProtoField.new("satellite_elevation[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_5 = ProtoField.new("satellite_elevation[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_6 = ProtoField.new("satellite_elevation[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_7 = ProtoField.new("satellite_elevation[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_8 = ProtoField.new("satellite_elevation[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_9 = ProtoField.new("satellite_elevation[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_10 = ProtoField.new("satellite_elevation[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_11 = ProtoField.new("satellite_elevation[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_12 = ProtoField.new("satellite_elevation[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_13 = ProtoField.new("satellite_elevation[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_14 = ProtoField.new("satellite_elevation[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_15 = ProtoField.new("satellite_elevation[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_16 = ProtoField.new("satellite_elevation[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_17 = ProtoField.new("satellite_elevation[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_18 = ProtoField.new("satellite_elevation[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_19 = ProtoField.new("satellite_elevation[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_0 = ProtoField.new("satellite_azimuth[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_1 = ProtoField.new("satellite_azimuth[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_2 = ProtoField.new("satellite_azimuth[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_3 = ProtoField.new("satellite_azimuth[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_4 = ProtoField.new("satellite_azimuth[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_5 = ProtoField.new("satellite_azimuth[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_6 = ProtoField.new("satellite_azimuth[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_7 = ProtoField.new("satellite_azimuth[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_8 = ProtoField.new("satellite_azimuth[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_9 = ProtoField.new("satellite_azimuth[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_10 = ProtoField.new("satellite_azimuth[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_11 = ProtoField.new("satellite_azimuth[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_12 = ProtoField.new("satellite_azimuth[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_13 = ProtoField.new("satellite_azimuth[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_14 = ProtoField.new("satellite_azimuth[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_15 = ProtoField.new("satellite_azimuth[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_16 = ProtoField.new("satellite_azimuth[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_17 = ProtoField.new("satellite_azimuth[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_18 = ProtoField.new("satellite_azimuth[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_19 = ProtoField.new("satellite_azimuth[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_0 = ProtoField.new("satellite_snr[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_1 = ProtoField.new("satellite_snr[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_2 = ProtoField.new("satellite_snr[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_3 = ProtoField.new("satellite_snr[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_4 = ProtoField.new("satellite_snr[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_5 = ProtoField.new("satellite_snr[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_6 = ProtoField.new("satellite_snr[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_7 = ProtoField.new("satellite_snr[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_8 = ProtoField.new("satellite_snr[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_9 = ProtoField.new("satellite_snr[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_10 = ProtoField.new("satellite_snr[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_11 = ProtoField.new("satellite_snr[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_12 = ProtoField.new("satellite_snr[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_13 = ProtoField.new("satellite_snr[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_14 = ProtoField.new("satellite_snr[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_15 = ProtoField.new("satellite_snr[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_16 = ProtoField.new("satellite_snr[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_17 = ProtoField.new("satellite_snr[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_18 = ProtoField.new("satellite_snr[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_19 = ProtoField.new("satellite_snr[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_19", ftypes.UINT8, nil)

f.SCALED_IMU_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_IMU_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_IMU_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.SCALED_IMU_xacc", ftypes.INT16, nil)
f.SCALED_IMU_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.SCALED_IMU_yacc", ftypes.INT16, nil)
f.SCALED_IMU_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.SCALED_IMU_zacc", ftypes.INT16, nil)
f.SCALED_IMU_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.SCALED_IMU_xgyro", ftypes.INT16, nil)
f.SCALED_IMU_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.SCALED_IMU_ygyro", ftypes.INT16, nil)
f.SCALED_IMU_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.SCALED_IMU_zgyro", ftypes.INT16, nil)
f.SCALED_IMU_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.SCALED_IMU_xmag", ftypes.INT16, nil)
f.SCALED_IMU_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.SCALED_IMU_ymag", ftypes.INT16, nil)
f.SCALED_IMU_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.SCALED_IMU_zmag", ftypes.INT16, nil)
f.SCALED_IMU_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_IMU_temperature", ftypes.INT16, nil)

f.RAW_IMU_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.RAW_IMU_time_usec", ftypes.UINT64, nil)
f.RAW_IMU_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.RAW_IMU_xacc", ftypes.INT16, nil)
f.RAW_IMU_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.RAW_IMU_yacc", ftypes.INT16, nil)
f.RAW_IMU_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.RAW_IMU_zacc", ftypes.INT16, nil)
f.RAW_IMU_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.RAW_IMU_xgyro", ftypes.INT16, nil)
f.RAW_IMU_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.RAW_IMU_ygyro", ftypes.INT16, nil)
f.RAW_IMU_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.RAW_IMU_zgyro", ftypes.INT16, nil)
f.RAW_IMU_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.RAW_IMU_xmag", ftypes.INT16, nil)
f.RAW_IMU_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.RAW_IMU_ymag", ftypes.INT16, nil)
f.RAW_IMU_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.RAW_IMU_zmag", ftypes.INT16, nil)
f.RAW_IMU_id = ProtoField.new("id (uint8_t)", "mavlink_proto.RAW_IMU_id", ftypes.UINT8, nil)
f.RAW_IMU_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.RAW_IMU_temperature", ftypes.INT16, nil)

f.RAW_PRESSURE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.RAW_PRESSURE_time_usec", ftypes.UINT64, nil)
f.RAW_PRESSURE_press_abs = ProtoField.new("press_abs (int16_t)", "mavlink_proto.RAW_PRESSURE_press_abs", ftypes.INT16, nil)
f.RAW_PRESSURE_press_diff1 = ProtoField.new("press_diff1 (int16_t)", "mavlink_proto.RAW_PRESSURE_press_diff1", ftypes.INT16, nil)
f.RAW_PRESSURE_press_diff2 = ProtoField.new("press_diff2 (int16_t)", "mavlink_proto.RAW_PRESSURE_press_diff2", ftypes.INT16, nil)
f.RAW_PRESSURE_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.RAW_PRESSURE_temperature", ftypes.INT16, nil)

f.SCALED_PRESSURE_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_PRESSURE_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_PRESSURE_press_abs = ProtoField.new("press_abs (float)", "mavlink_proto.SCALED_PRESSURE_press_abs", ftypes.FLOAT, nil)
f.SCALED_PRESSURE_press_diff = ProtoField.new("press_diff (float)", "mavlink_proto.SCALED_PRESSURE_press_diff", ftypes.FLOAT, nil)
f.SCALED_PRESSURE_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_PRESSURE_temperature", ftypes.INT16, nil)
f.SCALED_PRESSURE_temperature_press_diff = ProtoField.new("temperature_press_diff (int16_t)", "mavlink_proto.SCALED_PRESSURE_temperature_press_diff", ftypes.INT16, nil)

f.ATTITUDE_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.ATTITUDE_time_boot_ms", ftypes.UINT32, nil)
f.ATTITUDE_roll = ProtoField.new("roll (float)", "mavlink_proto.ATTITUDE_roll", ftypes.FLOAT, nil)
f.ATTITUDE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.ATTITUDE_pitch", ftypes.FLOAT, nil)
f.ATTITUDE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.ATTITUDE_yaw", ftypes.FLOAT, nil)
f.ATTITUDE_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ATTITUDE_rollspeed", ftypes.FLOAT, nil)
f.ATTITUDE_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ATTITUDE_pitchspeed", ftypes.FLOAT, nil)
f.ATTITUDE_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ATTITUDE_yawspeed", ftypes.FLOAT, nil)

f.ATTITUDE_QUATERNION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.ATTITUDE_QUATERNION_time_boot_ms", ftypes.UINT32, nil)
f.ATTITUDE_QUATERNION_q1 = ProtoField.new("q1 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_q2 = ProtoField.new("q2 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_q3 = ProtoField.new("q3 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q3", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_q4 = ProtoField.new("q4 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q4", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_rollspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_pitchspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_yawspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_0 = ProtoField.new("repr_offset_q[0] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_0", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_1 = ProtoField.new("repr_offset_q[1] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_2 = ProtoField.new("repr_offset_q[2] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_3 = ProtoField.new("repr_offset_q[3] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_3", ftypes.FLOAT, nil)

f.LOCAL_POSITION_NED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.LOCAL_POSITION_NED_time_boot_ms", ftypes.UINT32, nil)
f.LOCAL_POSITION_NED_x = ProtoField.new("x (float)", "mavlink_proto.LOCAL_POSITION_NED_x", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_y = ProtoField.new("y (float)", "mavlink_proto.LOCAL_POSITION_NED_y", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_z = ProtoField.new("z (float)", "mavlink_proto.LOCAL_POSITION_NED_z", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_vx = ProtoField.new("vx (float)", "mavlink_proto.LOCAL_POSITION_NED_vx", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_vy = ProtoField.new("vy (float)", "mavlink_proto.LOCAL_POSITION_NED_vy", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_vz = ProtoField.new("vz (float)", "mavlink_proto.LOCAL_POSITION_NED_vz", ftypes.FLOAT, nil)

f.GLOBAL_POSITION_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GLOBAL_POSITION_INT_time_boot_ms", ftypes.UINT32, nil)
f.GLOBAL_POSITION_INT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_lat", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_lon", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_relative_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.GLOBAL_POSITION_INT_vx", ftypes.INT16, nil)
f.GLOBAL_POSITION_INT_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.GLOBAL_POSITION_INT_vy", ftypes.INT16, nil)
f.GLOBAL_POSITION_INT_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.GLOBAL_POSITION_INT_vz", ftypes.INT16, nil)
f.GLOBAL_POSITION_INT_hdg = ProtoField.new("hdg (uint16_t)", "mavlink_proto.GLOBAL_POSITION_INT_hdg", ftypes.UINT16, nil)

f.RC_CHANNELS_SCALED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.RC_CHANNELS_SCALED_time_boot_ms", ftypes.UINT32, nil)
f.RC_CHANNELS_SCALED_port = ProtoField.new("port (uint8_t)", "mavlink_proto.RC_CHANNELS_SCALED_port", ftypes.UINT8, nil)
f.RC_CHANNELS_SCALED_chan1_scaled = ProtoField.new("chan1_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan1_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan2_scaled = ProtoField.new("chan2_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan2_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan3_scaled = ProtoField.new("chan3_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan3_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan4_scaled = ProtoField.new("chan4_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan4_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan5_scaled = ProtoField.new("chan5_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan5_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan6_scaled = ProtoField.new("chan6_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan6_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan7_scaled = ProtoField.new("chan7_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan7_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan8_scaled = ProtoField.new("chan8_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan8_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RC_CHANNELS_SCALED_rssi", ftypes.UINT8, nil)

f.RC_CHANNELS_RAW_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.RC_CHANNELS_RAW_time_boot_ms", ftypes.UINT32, nil)
f.RC_CHANNELS_RAW_port = ProtoField.new("port (uint8_t)", "mavlink_proto.RC_CHANNELS_RAW_port", ftypes.UINT8, nil)
f.RC_CHANNELS_RAW_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan1_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan2_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan3_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan4_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan5_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan6_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan7_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan8_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RC_CHANNELS_RAW_rssi", ftypes.UINT8, nil)

f.SERVO_OUTPUT_RAW_time_usec = ProtoField.new("time_usec (uint32_t)", "mavlink_proto.SERVO_OUTPUT_RAW_time_usec", ftypes.UINT32, nil)
f.SERVO_OUTPUT_RAW_port = ProtoField.new("port (uint8_t)", "mavlink_proto.SERVO_OUTPUT_RAW_port", ftypes.UINT8, nil)
f.SERVO_OUTPUT_RAW_servo1_raw = ProtoField.new("servo1_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo1_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo2_raw = ProtoField.new("servo2_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo2_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo3_raw = ProtoField.new("servo3_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo3_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo4_raw = ProtoField.new("servo4_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo4_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo5_raw = ProtoField.new("servo5_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo5_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo6_raw = ProtoField.new("servo6_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo6_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo7_raw = ProtoField.new("servo7_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo7_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo8_raw = ProtoField.new("servo8_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo8_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo9_raw = ProtoField.new("servo9_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo9_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo10_raw = ProtoField.new("servo10_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo10_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo11_raw = ProtoField.new("servo11_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo11_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo12_raw = ProtoField.new("servo12_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo12_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo13_raw = ProtoField.new("servo13_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo13_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo14_raw = ProtoField.new("servo14_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo14_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo15_raw = ProtoField.new("servo15_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo15_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo16_raw = ProtoField.new("servo16_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo16_raw", ftypes.UINT16, nil)

f.MISSION_REQUEST_PARTIAL_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_PARTIAL_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_PARTIAL_LIST_start_index = ProtoField.new("start_index (int16_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_start_index", ftypes.INT16, nil)
f.MISSION_REQUEST_PARTIAL_LIST_end_index = ProtoField.new("end_index (int16_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_end_index", ftypes.INT16, nil)
f.MISSION_REQUEST_PARTIAL_LIST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_WRITE_PARTIAL_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_target_system", ftypes.UINT8, nil)
f.MISSION_WRITE_PARTIAL_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_target_component", ftypes.UINT8, nil)
f.MISSION_WRITE_PARTIAL_LIST_start_index = ProtoField.new("start_index (int16_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_start_index", ftypes.INT16, nil)
f.MISSION_WRITE_PARTIAL_LIST_end_index = ProtoField.new("end_index (int16_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_end_index", ftypes.INT16, nil)
f.MISSION_WRITE_PARTIAL_LIST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_ITEM_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_ITEM_target_system", ftypes.UINT8, nil)
f.MISSION_ITEM_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_ITEM_target_component", ftypes.UINT8, nil)
f.MISSION_ITEM_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_ITEM_seq", ftypes.UINT16, nil)
f.MISSION_ITEM_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.MISSION_ITEM_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.MISSION_ITEM_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.MISSION_ITEM_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.MISSION_ITEM_current = ProtoField.new("current (uint8_t)", "mavlink_proto.MISSION_ITEM_current", ftypes.UINT8, nil)
f.MISSION_ITEM_autocontinue = ProtoField.new("autocontinue (uint8_t)", "mavlink_proto.MISSION_ITEM_autocontinue", ftypes.UINT8, nil)
f.MISSION_ITEM_param1 = ProtoField.new("param1 (float)", "mavlink_proto.MISSION_ITEM_param1", ftypes.FLOAT, nil)
f.MISSION_ITEM_param2 = ProtoField.new("param2 (float)", "mavlink_proto.MISSION_ITEM_param2", ftypes.FLOAT, nil)
f.MISSION_ITEM_param3 = ProtoField.new("param3 (float)", "mavlink_proto.MISSION_ITEM_param3", ftypes.FLOAT, nil)
f.MISSION_ITEM_param4 = ProtoField.new("param4 (float)", "mavlink_proto.MISSION_ITEM_param4", ftypes.FLOAT, nil)
f.MISSION_ITEM_x = ProtoField.new("x (float)", "mavlink_proto.MISSION_ITEM_x", ftypes.FLOAT, nil)
f.MISSION_ITEM_y = ProtoField.new("y (float)", "mavlink_proto.MISSION_ITEM_y", ftypes.FLOAT, nil)
f.MISSION_ITEM_z = ProtoField.new("z (float)", "mavlink_proto.MISSION_ITEM_z", ftypes.FLOAT, nil)
f.MISSION_ITEM_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_ITEM_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_REQUEST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_REQUEST_seq", ftypes.UINT16, nil)
f.MISSION_REQUEST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_SET_CURRENT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_SET_CURRENT_target_system", ftypes.UINT8, nil)
f.MISSION_SET_CURRENT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_SET_CURRENT_target_component", ftypes.UINT8, nil)
f.MISSION_SET_CURRENT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_SET_CURRENT_seq", ftypes.UINT16, nil)

f.MISSION_CURRENT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_CURRENT_seq", ftypes.UINT16, nil)
f.MISSION_CURRENT_total = ProtoField.new("total (uint16_t)", "mavlink_proto.MISSION_CURRENT_total", ftypes.UINT16, nil)
f.MISSION_CURRENT_mission_state = ProtoField.new("mission_state (MISSION_STATE)", "mavlink_proto.MISSION_CURRENT_mission_state", ftypes.UINT8, enumEntryName.MISSION_STATE)
f.MISSION_CURRENT_mission_mode = ProtoField.new("mission_mode (uint8_t)", "mavlink_proto.MISSION_CURRENT_mission_mode", ftypes.UINT8, nil)

f.MISSION_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_LIST_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_LIST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_LIST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_COUNT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_COUNT_target_system", ftypes.UINT8, nil)
f.MISSION_COUNT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_COUNT_target_component", ftypes.UINT8, nil)
f.MISSION_COUNT_count = ProtoField.new("count (uint16_t)", "mavlink_proto.MISSION_COUNT_count", ftypes.UINT16, nil)
f.MISSION_COUNT_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_COUNT_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_CLEAR_ALL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_CLEAR_ALL_target_system", ftypes.UINT8, nil)
f.MISSION_CLEAR_ALL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_CLEAR_ALL_target_component", ftypes.UINT8, nil)
f.MISSION_CLEAR_ALL_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_CLEAR_ALL_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_ITEM_REACHED_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_ITEM_REACHED_seq", ftypes.UINT16, nil)

f.MISSION_ACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_ACK_target_system", ftypes.UINT8, nil)
f.MISSION_ACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_ACK_target_component", ftypes.UINT8, nil)
f.MISSION_ACK_type = ProtoField.new("type (MAV_MISSION_RESULT)", "mavlink_proto.MISSION_ACK_type", ftypes.UINT8, enumEntryName.MAV_MISSION_RESULT)
f.MISSION_ACK_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_ACK_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.SET_GPS_GLOBAL_ORIGIN_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_target_system", ftypes.UINT8, nil)
f.SET_GPS_GLOBAL_ORIGIN_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_latitude", ftypes.INT32, nil)
f.SET_GPS_GLOBAL_ORIGIN_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_longitude", ftypes.INT32, nil)
f.SET_GPS_GLOBAL_ORIGIN_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_altitude", ftypes.INT32, nil)
f.SET_GPS_GLOBAL_ORIGIN_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_time_usec", ftypes.UINT64, nil)

f.GPS_GLOBAL_ORIGIN_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_latitude", ftypes.INT32, nil)
f.GPS_GLOBAL_ORIGIN_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_longitude", ftypes.INT32, nil)
f.GPS_GLOBAL_ORIGIN_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_altitude", ftypes.INT32, nil)
f.GPS_GLOBAL_ORIGIN_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_time_usec", ftypes.UINT64, nil)

f.PARAM_MAP_RC_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_MAP_RC_target_system", ftypes.UINT8, nil)
f.PARAM_MAP_RC_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_MAP_RC_target_component", ftypes.UINT8, nil)
f.PARAM_MAP_RC_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_MAP_RC_param_id", ftypes.STRING, nil)
f.PARAM_MAP_RC_param_index = ProtoField.new("param_index (int16_t)", "mavlink_proto.PARAM_MAP_RC_param_index", ftypes.INT16, nil)
f.PARAM_MAP_RC_parameter_rc_channel_index = ProtoField.new("parameter_rc_channel_index (uint8_t)", "mavlink_proto.PARAM_MAP_RC_parameter_rc_channel_index", ftypes.UINT8, nil)
f.PARAM_MAP_RC_param_value0 = ProtoField.new("param_value0 (float)", "mavlink_proto.PARAM_MAP_RC_param_value0", ftypes.FLOAT, nil)
f.PARAM_MAP_RC_scale = ProtoField.new("scale (float)", "mavlink_proto.PARAM_MAP_RC_scale", ftypes.FLOAT, nil)
f.PARAM_MAP_RC_param_value_min = ProtoField.new("param_value_min (float)", "mavlink_proto.PARAM_MAP_RC_param_value_min", ftypes.FLOAT, nil)
f.PARAM_MAP_RC_param_value_max = ProtoField.new("param_value_max (float)", "mavlink_proto.PARAM_MAP_RC_param_value_max", ftypes.FLOAT, nil)

f.MISSION_REQUEST_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_INT_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_INT_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_INT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_REQUEST_INT_seq", ftypes.UINT16, nil)
f.MISSION_REQUEST_INT_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_INT_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.SAFETY_SET_ALLOWED_AREA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_target_system", ftypes.UINT8, nil)
f.SAFETY_SET_ALLOWED_AREA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_target_component", ftypes.UINT8, nil)
f.SAFETY_SET_ALLOWED_AREA_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SAFETY_SET_ALLOWED_AREA_p1x = ProtoField.new("p1x (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p1x", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p1y = ProtoField.new("p1y (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p1y", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p1z = ProtoField.new("p1z (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p1z", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p2x = ProtoField.new("p2x (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p2x", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p2y = ProtoField.new("p2y (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p2y", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p2z = ProtoField.new("p2z (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p2z", ftypes.FLOAT, nil)

f.SAFETY_ALLOWED_AREA_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.SAFETY_ALLOWED_AREA_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SAFETY_ALLOWED_AREA_p1x = ProtoField.new("p1x (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p1x", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p1y = ProtoField.new("p1y (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p1y", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p1z = ProtoField.new("p1z (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p1z", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p2x = ProtoField.new("p2x (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p2x", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p2y = ProtoField.new("p2y (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p2y", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p2z = ProtoField.new("p2z (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p2z", ftypes.FLOAT, nil)

f.ATTITUDE_QUATERNION_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ATTITUDE_QUATERNION_COV_time_usec", ftypes.UINT64, nil)
f.ATTITUDE_QUATERNION_COV_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_0", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_3", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_rollspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_pitchspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_yawspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_0", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_3", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_4", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_5", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_6", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_7", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_8", ftypes.FLOAT, nil)

f.NAV_CONTROLLER_OUTPUT_nav_roll = ProtoField.new("nav_roll (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_nav_roll", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_nav_pitch = ProtoField.new("nav_pitch (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_nav_pitch", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_nav_bearing = ProtoField.new("nav_bearing (int16_t)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_nav_bearing", ftypes.INT16, nil)
f.NAV_CONTROLLER_OUTPUT_target_bearing = ProtoField.new("target_bearing (int16_t)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_target_bearing", ftypes.INT16, nil)
f.NAV_CONTROLLER_OUTPUT_wp_dist = ProtoField.new("wp_dist (uint16_t)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_wp_dist", ftypes.UINT16, nil)
f.NAV_CONTROLLER_OUTPUT_alt_error = ProtoField.new("alt_error (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_alt_error", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_aspd_error = ProtoField.new("aspd_error (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_aspd_error", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_xtrack_error = ProtoField.new("xtrack_error (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_xtrack_error", ftypes.FLOAT, nil)

f.GLOBAL_POSITION_INT_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_time_usec", ftypes.UINT64, nil)
f.GLOBAL_POSITION_INT_COV_estimator_type = ProtoField.new("estimator_type (MAV_ESTIMATOR_TYPE)", "mavlink_proto.GLOBAL_POSITION_INT_COV_estimator_type", ftypes.UINT8, enumEntryName.MAV_ESTIMATOR_TYPE)
f.GLOBAL_POSITION_INT_COV_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_lat", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_lon", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_relative_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_vx = ProtoField.new("vx (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_vx", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_vy = ProtoField.new("vy (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_vy", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_vz = ProtoField.new("vz (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_vz", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_0", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_1", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_2", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_3", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_4", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_5", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_6", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_7", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_8", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_9", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_10", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_11", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_12", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_13", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_14", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_15", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_16", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_17", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_18", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_19", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_20", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_21 = ProtoField.new("covariance[21] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_21", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_22 = ProtoField.new("covariance[22] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_22", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_23 = ProtoField.new("covariance[23] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_23", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_24 = ProtoField.new("covariance[24] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_24", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_25 = ProtoField.new("covariance[25] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_25", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_26 = ProtoField.new("covariance[26] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_26", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_27 = ProtoField.new("covariance[27] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_27", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_28 = ProtoField.new("covariance[28] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_28", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_29 = ProtoField.new("covariance[29] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_29", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_30 = ProtoField.new("covariance[30] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_30", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_31 = ProtoField.new("covariance[31] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_31", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_32 = ProtoField.new("covariance[32] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_32", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_33 = ProtoField.new("covariance[33] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_33", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_34 = ProtoField.new("covariance[34] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_34", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_35 = ProtoField.new("covariance[35] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_35", ftypes.FLOAT, nil)

f.LOCAL_POSITION_NED_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.LOCAL_POSITION_NED_COV_time_usec", ftypes.UINT64, nil)
f.LOCAL_POSITION_NED_COV_estimator_type = ProtoField.new("estimator_type (MAV_ESTIMATOR_TYPE)", "mavlink_proto.LOCAL_POSITION_NED_COV_estimator_type", ftypes.UINT8, enumEntryName.MAV_ESTIMATOR_TYPE)
f.LOCAL_POSITION_NED_COV_x = ProtoField.new("x (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_x", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_y = ProtoField.new("y (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_y", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_z = ProtoField.new("z (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_z", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_vx = ProtoField.new("vx (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_vx", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_vy = ProtoField.new("vy (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_vy", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_vz = ProtoField.new("vz (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_vz", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_ax = ProtoField.new("ax (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_ax", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_ay = ProtoField.new("ay (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_ay", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_az = ProtoField.new("az (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_az", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_0", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_1", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_2", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_3", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_4", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_5", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_6", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_7", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_8", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_9", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_10", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_11", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_12", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_13", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_14", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_15", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_16", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_17", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_18", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_19", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_20", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_21 = ProtoField.new("covariance[21] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_21", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_22 = ProtoField.new("covariance[22] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_22", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_23 = ProtoField.new("covariance[23] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_23", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_24 = ProtoField.new("covariance[24] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_24", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_25 = ProtoField.new("covariance[25] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_25", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_26 = ProtoField.new("covariance[26] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_26", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_27 = ProtoField.new("covariance[27] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_27", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_28 = ProtoField.new("covariance[28] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_28", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_29 = ProtoField.new("covariance[29] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_29", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_30 = ProtoField.new("covariance[30] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_30", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_31 = ProtoField.new("covariance[31] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_31", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_32 = ProtoField.new("covariance[32] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_32", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_33 = ProtoField.new("covariance[33] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_33", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_34 = ProtoField.new("covariance[34] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_34", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_35 = ProtoField.new("covariance[35] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_35", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_36 = ProtoField.new("covariance[36] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_36", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_37 = ProtoField.new("covariance[37] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_37", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_38 = ProtoField.new("covariance[38] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_38", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_39 = ProtoField.new("covariance[39] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_39", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_40 = ProtoField.new("covariance[40] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_40", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_41 = ProtoField.new("covariance[41] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_41", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_42 = ProtoField.new("covariance[42] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_42", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_43 = ProtoField.new("covariance[43] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_43", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_44 = ProtoField.new("covariance[44] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_44", ftypes.FLOAT, nil)

f.RC_CHANNELS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.RC_CHANNELS_time_boot_ms", ftypes.UINT32, nil)
f.RC_CHANNELS_chancount = ProtoField.new("chancount (uint8_t)", "mavlink_proto.RC_CHANNELS_chancount", ftypes.UINT8, nil)
f.RC_CHANNELS_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan1_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan2_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan3_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan4_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan5_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan6_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan7_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan8_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan9_raw = ProtoField.new("chan9_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan9_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan10_raw = ProtoField.new("chan10_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan10_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan11_raw = ProtoField.new("chan11_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan11_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan12_raw = ProtoField.new("chan12_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan12_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan13_raw = ProtoField.new("chan13_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan13_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan14_raw = ProtoField.new("chan14_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan14_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan15_raw = ProtoField.new("chan15_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan15_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan16_raw = ProtoField.new("chan16_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan16_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan17_raw = ProtoField.new("chan17_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan17_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan18_raw = ProtoField.new("chan18_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan18_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RC_CHANNELS_rssi", ftypes.UINT8, nil)

f.REQUEST_DATA_STREAM_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_target_system", ftypes.UINT8, nil)
f.REQUEST_DATA_STREAM_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_target_component", ftypes.UINT8, nil)
f.REQUEST_DATA_STREAM_req_stream_id = ProtoField.new("req_stream_id (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_req_stream_id", ftypes.UINT8, nil)
f.REQUEST_DATA_STREAM_req_message_rate = ProtoField.new("req_message_rate (uint16_t)", "mavlink_proto.REQUEST_DATA_STREAM_req_message_rate", ftypes.UINT16, nil)
f.REQUEST_DATA_STREAM_start_stop = ProtoField.new("start_stop (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_start_stop", ftypes.UINT8, nil)

f.DATA_STREAM_stream_id = ProtoField.new("stream_id (uint8_t)", "mavlink_proto.DATA_STREAM_stream_id", ftypes.UINT8, nil)
f.DATA_STREAM_message_rate = ProtoField.new("message_rate (uint16_t)", "mavlink_proto.DATA_STREAM_message_rate", ftypes.UINT16, nil)
f.DATA_STREAM_on_off = ProtoField.new("on_off (uint8_t)", "mavlink_proto.DATA_STREAM_on_off", ftypes.UINT8, nil)

f.MANUAL_CONTROL_target = ProtoField.new("target (uint8_t)", "mavlink_proto.MANUAL_CONTROL_target", ftypes.UINT8, nil)
f.MANUAL_CONTROL_x = ProtoField.new("x (int16_t)", "mavlink_proto.MANUAL_CONTROL_x", ftypes.INT16, nil)
f.MANUAL_CONTROL_y = ProtoField.new("y (int16_t)", "mavlink_proto.MANUAL_CONTROL_y", ftypes.INT16, nil)
f.MANUAL_CONTROL_z = ProtoField.new("z (int16_t)", "mavlink_proto.MANUAL_CONTROL_z", ftypes.INT16, nil)
f.MANUAL_CONTROL_r = ProtoField.new("r (int16_t)", "mavlink_proto.MANUAL_CONTROL_r", ftypes.INT16, nil)
f.MANUAL_CONTROL_buttons = ProtoField.new("buttons (uint16_t)", "mavlink_proto.MANUAL_CONTROL_buttons", ftypes.UINT16, nil)
f.MANUAL_CONTROL_buttons2 = ProtoField.new("buttons2 (uint16_t)", "mavlink_proto.MANUAL_CONTROL_buttons2", ftypes.UINT16, nil)
f.MANUAL_CONTROL_enabled_extensions = ProtoField.new("enabled_extensions (uint8_t)", "mavlink_proto.MANUAL_CONTROL_enabled_extensions", ftypes.UINT8, nil)
f.MANUAL_CONTROL_s = ProtoField.new("s (int16_t)", "mavlink_proto.MANUAL_CONTROL_s", ftypes.INT16, nil)
f.MANUAL_CONTROL_t = ProtoField.new("t (int16_t)", "mavlink_proto.MANUAL_CONTROL_t", ftypes.INT16, nil)

f.RC_CHANNELS_OVERRIDE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_target_system", ftypes.UINT8, nil)
f.RC_CHANNELS_OVERRIDE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_target_component", ftypes.UINT8, nil)
f.RC_CHANNELS_OVERRIDE_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan1_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan2_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan3_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan4_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan5_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan6_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan7_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan8_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan9_raw = ProtoField.new("chan9_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan9_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan10_raw = ProtoField.new("chan10_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan10_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan11_raw = ProtoField.new("chan11_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan11_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan12_raw = ProtoField.new("chan12_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan12_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan13_raw = ProtoField.new("chan13_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan13_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan14_raw = ProtoField.new("chan14_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan14_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan15_raw = ProtoField.new("chan15_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan15_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan16_raw = ProtoField.new("chan16_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan16_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan17_raw = ProtoField.new("chan17_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan17_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan18_raw = ProtoField.new("chan18_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan18_raw", ftypes.UINT16, nil)

f.MISSION_ITEM_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_target_system", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_target_component", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_ITEM_INT_seq", ftypes.UINT16, nil)
f.MISSION_ITEM_INT_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.MISSION_ITEM_INT_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.MISSION_ITEM_INT_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.MISSION_ITEM_INT_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.MISSION_ITEM_INT_current = ProtoField.new("current (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_current", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_autocontinue = ProtoField.new("autocontinue (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_autocontinue", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_param1 = ProtoField.new("param1 (float)", "mavlink_proto.MISSION_ITEM_INT_param1", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_param2 = ProtoField.new("param2 (float)", "mavlink_proto.MISSION_ITEM_INT_param2", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_param3 = ProtoField.new("param3 (float)", "mavlink_proto.MISSION_ITEM_INT_param3", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_param4 = ProtoField.new("param4 (float)", "mavlink_proto.MISSION_ITEM_INT_param4", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_x = ProtoField.new("x (int32_t)", "mavlink_proto.MISSION_ITEM_INT_x", ftypes.INT32, nil)
f.MISSION_ITEM_INT_y = ProtoField.new("y (int32_t)", "mavlink_proto.MISSION_ITEM_INT_y", ftypes.INT32, nil)
f.MISSION_ITEM_INT_z = ProtoField.new("z (float)", "mavlink_proto.MISSION_ITEM_INT_z", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_ITEM_INT_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.VFR_HUD_airspeed = ProtoField.new("airspeed (float)", "mavlink_proto.VFR_HUD_airspeed", ftypes.FLOAT, nil)
f.VFR_HUD_groundspeed = ProtoField.new("groundspeed (float)", "mavlink_proto.VFR_HUD_groundspeed", ftypes.FLOAT, nil)
f.VFR_HUD_heading = ProtoField.new("heading (int16_t)", "mavlink_proto.VFR_HUD_heading", ftypes.INT16, nil)
f.VFR_HUD_throttle = ProtoField.new("throttle (uint16_t)", "mavlink_proto.VFR_HUD_throttle", ftypes.UINT16, nil)
f.VFR_HUD_alt = ProtoField.new("alt (float)", "mavlink_proto.VFR_HUD_alt", ftypes.FLOAT, nil)
f.VFR_HUD_climb = ProtoField.new("climb (float)", "mavlink_proto.VFR_HUD_climb", ftypes.FLOAT, nil)

f.COMMAND_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.COMMAND_INT_target_system", ftypes.UINT8, nil)
f.COMMAND_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.COMMAND_INT_target_component", ftypes.UINT8, nil)
f.COMMAND_INT_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.COMMAND_INT_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.COMMAND_INT_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.COMMAND_INT_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.COMMAND_INT_current = ProtoField.new("current (uint8_t)", "mavlink_proto.COMMAND_INT_current", ftypes.UINT8, nil)
f.COMMAND_INT_autocontinue = ProtoField.new("autocontinue (uint8_t)", "mavlink_proto.COMMAND_INT_autocontinue", ftypes.UINT8, nil)
f.COMMAND_INT_param1 = ProtoField.new("param1 (float)", "mavlink_proto.COMMAND_INT_param1", ftypes.FLOAT, nil)
f.COMMAND_INT_param2 = ProtoField.new("param2 (float)", "mavlink_proto.COMMAND_INT_param2", ftypes.FLOAT, nil)
f.COMMAND_INT_param3 = ProtoField.new("param3 (float)", "mavlink_proto.COMMAND_INT_param3", ftypes.FLOAT, nil)
f.COMMAND_INT_param4 = ProtoField.new("param4 (float)", "mavlink_proto.COMMAND_INT_param4", ftypes.FLOAT, nil)
f.COMMAND_INT_x = ProtoField.new("x (int32_t)", "mavlink_proto.COMMAND_INT_x", ftypes.INT32, nil)
f.COMMAND_INT_y = ProtoField.new("y (int32_t)", "mavlink_proto.COMMAND_INT_y", ftypes.INT32, nil)
f.COMMAND_INT_z = ProtoField.new("z (float)", "mavlink_proto.COMMAND_INT_z", ftypes.FLOAT, nil)

f.COMMAND_LONG_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.COMMAND_LONG_target_system", ftypes.UINT8, nil)
f.COMMAND_LONG_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.COMMAND_LONG_target_component", ftypes.UINT8, nil)
f.COMMAND_LONG_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.COMMAND_LONG_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.COMMAND_LONG_confirmation = ProtoField.new("confirmation (uint8_t)", "mavlink_proto.COMMAND_LONG_confirmation", ftypes.UINT8, nil)
f.COMMAND_LONG_param1 = ProtoField.new("param1 (float)", "mavlink_proto.COMMAND_LONG_param1", ftypes.FLOAT, nil)
f.COMMAND_LONG_param2 = ProtoField.new("param2 (float)", "mavlink_proto.COMMAND_LONG_param2", ftypes.FLOAT, nil)
f.COMMAND_LONG_param3 = ProtoField.new("param3 (float)", "mavlink_proto.COMMAND_LONG_param3", ftypes.FLOAT, nil)
f.COMMAND_LONG_param4 = ProtoField.new("param4 (float)", "mavlink_proto.COMMAND_LONG_param4", ftypes.FLOAT, nil)
f.COMMAND_LONG_param5 = ProtoField.new("param5 (float)", "mavlink_proto.COMMAND_LONG_param5", ftypes.FLOAT, nil)
f.COMMAND_LONG_param6 = ProtoField.new("param6 (float)", "mavlink_proto.COMMAND_LONG_param6", ftypes.FLOAT, nil)
f.COMMAND_LONG_param7 = ProtoField.new("param7 (float)", "mavlink_proto.COMMAND_LONG_param7", ftypes.FLOAT, nil)

f.COMMAND_ACK_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.COMMAND_ACK_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.COMMAND_ACK_result = ProtoField.new("result (MAV_RESULT)", "mavlink_proto.COMMAND_ACK_result", ftypes.UINT8, enumEntryName.MAV_RESULT)
f.COMMAND_ACK_progress = ProtoField.new("progress (uint8_t)", "mavlink_proto.COMMAND_ACK_progress", ftypes.UINT8, nil)
f.COMMAND_ACK_result_param2 = ProtoField.new("result_param2 (int32_t)", "mavlink_proto.COMMAND_ACK_result_param2", ftypes.INT32, nil)
f.COMMAND_ACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.COMMAND_ACK_target_system", ftypes.UINT8, nil)
f.COMMAND_ACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.COMMAND_ACK_target_component", ftypes.UINT8, nil)

f.COMMAND_CANCEL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.COMMAND_CANCEL_target_system", ftypes.UINT8, nil)
f.COMMAND_CANCEL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.COMMAND_CANCEL_target_component", ftypes.UINT8, nil)
f.COMMAND_CANCEL_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.COMMAND_CANCEL_command", ftypes.UINT16, enumEntryName.MAV_CMD)

f.MANUAL_SETPOINT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.MANUAL_SETPOINT_time_boot_ms", ftypes.UINT32, nil)
f.MANUAL_SETPOINT_roll = ProtoField.new("roll (float)", "mavlink_proto.MANUAL_SETPOINT_roll", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_pitch = ProtoField.new("pitch (float)", "mavlink_proto.MANUAL_SETPOINT_pitch", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_yaw = ProtoField.new("yaw (float)", "mavlink_proto.MANUAL_SETPOINT_yaw", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_thrust = ProtoField.new("thrust (float)", "mavlink_proto.MANUAL_SETPOINT_thrust", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_mode_switch = ProtoField.new("mode_switch (uint8_t)", "mavlink_proto.MANUAL_SETPOINT_mode_switch", ftypes.UINT8, nil)
f.MANUAL_SETPOINT_manual_override_switch = ProtoField.new("manual_override_switch (uint8_t)", "mavlink_proto.MANUAL_SETPOINT_manual_override_switch", ftypes.UINT8, nil)

f.SET_ATTITUDE_TARGET_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SET_ATTITUDE_TARGET_time_boot_ms", ftypes.UINT32, nil)
f.SET_ATTITUDE_TARGET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_ATTITUDE_TARGET_target_system", ftypes.UINT8, nil)
f.SET_ATTITUDE_TARGET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_ATTITUDE_TARGET_target_component", ftypes.UINT8, nil)
f.SET_ATTITUDE_TARGET_type_mask = ProtoField.new("type_mask (ATTITUDE_TARGET_TYPEMASK)", "mavlink_proto.SET_ATTITUDE_TARGET_type_mask", ftypes.UINT8, nil)
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE")
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE")
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE")
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET", "ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET")
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE")
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE")
f.SET_ATTITUDE_TARGET_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_0", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_1", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_2", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_3", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_body_roll_rate = ProtoField.new("body_roll_rate (float)", "mavlink_proto.SET_ATTITUDE_TARGET_body_roll_rate", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_body_pitch_rate = ProtoField.new("body_pitch_rate (float)", "mavlink_proto.SET_ATTITUDE_TARGET_body_pitch_rate", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_body_yaw_rate = ProtoField.new("body_yaw_rate (float)", "mavlink_proto.SET_ATTITUDE_TARGET_body_yaw_rate", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_thrust = ProtoField.new("thrust (float)", "mavlink_proto.SET_ATTITUDE_TARGET_thrust", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_thrust_body_0 = ProtoField.new("thrust_body[0] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_thrust_body_0", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_thrust_body_1 = ProtoField.new("thrust_body[1] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_thrust_body_1", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_thrust_body_2 = ProtoField.new("thrust_body[2] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_thrust_body_2", ftypes.FLOAT, nil)

f.ATTITUDE_TARGET_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.ATTITUDE_TARGET_time_boot_ms", ftypes.UINT32, nil)
f.ATTITUDE_TARGET_type_mask = ProtoField.new("type_mask (ATTITUDE_TARGET_TYPEMASK)", "mavlink_proto.ATTITUDE_TARGET_type_mask", ftypes.UINT8, nil)
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE")
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE")
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE")
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET", "ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET")
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE")
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE")
f.ATTITUDE_TARGET_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ATTITUDE_TARGET_q_0", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ATTITUDE_TARGET_q_1", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ATTITUDE_TARGET_q_2", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ATTITUDE_TARGET_q_3", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_body_roll_rate = ProtoField.new("body_roll_rate (float)", "mavlink_proto.ATTITUDE_TARGET_body_roll_rate", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_body_pitch_rate = ProtoField.new("body_pitch_rate (float)", "mavlink_proto.ATTITUDE_TARGET_body_pitch_rate", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_body_yaw_rate = ProtoField.new("body_yaw_rate (float)", "mavlink_proto.ATTITUDE_TARGET_body_yaw_rate", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_thrust = ProtoField.new("thrust (float)", "mavlink_proto.ATTITUDE_TARGET_thrust", ftypes.FLOAT, nil)

f.SET_POSITION_TARGET_LOCAL_NED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_time_boot_ms", ftypes.UINT32, nil)
f.SET_POSITION_TARGET_LOCAL_NED_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_target_system", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_LOCAL_NED_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_target_component", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_LOCAL_NED_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask", ftypes.UINT16, nil)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE")
f.SET_POSITION_TARGET_LOCAL_NED_x = ProtoField.new("x (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_x", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_y = ProtoField.new("y (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_y", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_z = ProtoField.new("z (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_z", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_vx = ProtoField.new("vx (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_vx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_vy = ProtoField.new("vy (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_vy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_vz = ProtoField.new("vz (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_vz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_afx = ProtoField.new("afx (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_afx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_afy = ProtoField.new("afy (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_afy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_afz = ProtoField.new("afz (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_afz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_yaw = ProtoField.new("yaw (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_yaw", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_yaw_rate", ftypes.FLOAT, nil)

f.POSITION_TARGET_LOCAL_NED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_time_boot_ms", ftypes.UINT32, nil)
f.POSITION_TARGET_LOCAL_NED_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.POSITION_TARGET_LOCAL_NED_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask", ftypes.UINT16, nil)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE")
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE")
f.POSITION_TARGET_LOCAL_NED_x = ProtoField.new("x (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_x", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_y = ProtoField.new("y (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_y", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_z = ProtoField.new("z (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_z", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_vx = ProtoField.new("vx (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_vx", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_vy = ProtoField.new("vy (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_vy", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_vz = ProtoField.new("vz (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_vz", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_afx = ProtoField.new("afx (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_afx", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_afy = ProtoField.new("afy (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_afy", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_afz = ProtoField.new("afz (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_afz", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_yaw = ProtoField.new("yaw (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_yaw", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_yaw_rate", ftypes.FLOAT, nil)

f.SET_POSITION_TARGET_GLOBAL_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_time_boot_ms", ftypes.UINT32, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_target_system", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_target_component", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask", ftypes.UINT16, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE")
f.SET_POSITION_TARGET_GLOBAL_INT_lat_int = ProtoField.new("lat_int (int32_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_lat_int", ftypes.INT32, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_lon_int = ProtoField.new("lon_int (int32_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_lon_int", ftypes.INT32, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_alt = ProtoField.new("alt (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_alt", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_vx = ProtoField.new("vx (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_vx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_vy = ProtoField.new("vy (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_vy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_vz = ProtoField.new("vz (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_vz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_afx = ProtoField.new("afx (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_afx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_afy = ProtoField.new("afy (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_afy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_afz = ProtoField.new("afz (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_afz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_yaw = ProtoField.new("yaw (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_yaw", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_yaw_rate", ftypes.FLOAT, nil)

f.POSITION_TARGET_GLOBAL_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_time_boot_ms", ftypes.UINT32, nil)
f.POSITION_TARGET_GLOBAL_INT_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.POSITION_TARGET_GLOBAL_INT_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask", ftypes.UINT16, nil)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE")
f.POSITION_TARGET_GLOBAL_INT_lat_int = ProtoField.new("lat_int (int32_t)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_lat_int", ftypes.INT32, nil)
f.POSITION_TARGET_GLOBAL_INT_lon_int = ProtoField.new("lon_int (int32_t)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_lon_int", ftypes.INT32, nil)
f.POSITION_TARGET_GLOBAL_INT_alt = ProtoField.new("alt (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_alt", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_vx = ProtoField.new("vx (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_vx", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_vy = ProtoField.new("vy (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_vy", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_vz = ProtoField.new("vz (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_vz", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_afx = ProtoField.new("afx (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_afx", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_afy = ProtoField.new("afy (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_afy", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_afz = ProtoField.new("afz (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_afz", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_yaw = ProtoField.new("yaw (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_yaw", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_yaw_rate", ftypes.FLOAT, nil)

f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_time_boot_ms", ftypes.UINT32, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_x = ProtoField.new("x (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_x", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_y = ProtoField.new("y (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_y", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_z = ProtoField.new("z (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_z", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_roll = ProtoField.new("roll (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_roll", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_pitch = ProtoField.new("pitch (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_pitch", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_yaw = ProtoField.new("yaw (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_yaw", ftypes.FLOAT, nil)

f.HIL_STATE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_STATE_time_usec", ftypes.UINT64, nil)
f.HIL_STATE_roll = ProtoField.new("roll (float)", "mavlink_proto.HIL_STATE_roll", ftypes.FLOAT, nil)
f.HIL_STATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.HIL_STATE_pitch", ftypes.FLOAT, nil)
f.HIL_STATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.HIL_STATE_yaw", ftypes.FLOAT, nil)
f.HIL_STATE_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.HIL_STATE_rollspeed", ftypes.FLOAT, nil)
f.HIL_STATE_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.HIL_STATE_pitchspeed", ftypes.FLOAT, nil)
f.HIL_STATE_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.HIL_STATE_yawspeed", ftypes.FLOAT, nil)
f.HIL_STATE_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.HIL_STATE_lat", ftypes.INT32, nil)
f.HIL_STATE_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.HIL_STATE_lon", ftypes.INT32, nil)
f.HIL_STATE_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.HIL_STATE_alt", ftypes.INT32, nil)
f.HIL_STATE_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.HIL_STATE_vx", ftypes.INT16, nil)
f.HIL_STATE_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.HIL_STATE_vy", ftypes.INT16, nil)
f.HIL_STATE_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.HIL_STATE_vz", ftypes.INT16, nil)
f.HIL_STATE_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.HIL_STATE_xacc", ftypes.INT16, nil)
f.HIL_STATE_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.HIL_STATE_yacc", ftypes.INT16, nil)
f.HIL_STATE_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.HIL_STATE_zacc", ftypes.INT16, nil)

f.HIL_CONTROLS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_CONTROLS_time_usec", ftypes.UINT64, nil)
f.HIL_CONTROLS_roll_ailerons = ProtoField.new("roll_ailerons (float)", "mavlink_proto.HIL_CONTROLS_roll_ailerons", ftypes.FLOAT, nil)
f.HIL_CONTROLS_pitch_elevator = ProtoField.new("pitch_elevator (float)", "mavlink_proto.HIL_CONTROLS_pitch_elevator", ftypes.FLOAT, nil)
f.HIL_CONTROLS_yaw_rudder = ProtoField.new("yaw_rudder (float)", "mavlink_proto.HIL_CONTROLS_yaw_rudder", ftypes.FLOAT, nil)
f.HIL_CONTROLS_throttle = ProtoField.new("throttle (float)", "mavlink_proto.HIL_CONTROLS_throttle", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux1 = ProtoField.new("aux1 (float)", "mavlink_proto.HIL_CONTROLS_aux1", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux2 = ProtoField.new("aux2 (float)", "mavlink_proto.HIL_CONTROLS_aux2", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux3 = ProtoField.new("aux3 (float)", "mavlink_proto.HIL_CONTROLS_aux3", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux4 = ProtoField.new("aux4 (float)", "mavlink_proto.HIL_CONTROLS_aux4", ftypes.FLOAT, nil)
f.HIL_CONTROLS_mode = ProtoField.new("mode (MAV_MODE)", "mavlink_proto.HIL_CONTROLS_mode", ftypes.UINT8, enumEntryName.MAV_MODE)
f.HIL_CONTROLS_nav_mode = ProtoField.new("nav_mode (uint8_t)", "mavlink_proto.HIL_CONTROLS_nav_mode", ftypes.UINT8, nil)

f.HIL_RC_INPUTS_RAW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_time_usec", ftypes.UINT64, nil)
f.HIL_RC_INPUTS_RAW_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan1_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan2_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan3_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan4_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan5_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan6_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan7_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan8_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan9_raw = ProtoField.new("chan9_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan9_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan10_raw = ProtoField.new("chan10_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan10_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan11_raw = ProtoField.new("chan11_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan11_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan12_raw = ProtoField.new("chan12_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan12_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_rssi", ftypes.UINT8, nil)

f.HIL_ACTUATOR_CONTROLS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_time_usec", ftypes.UINT64, nil)
f.HIL_ACTUATOR_CONTROLS_controls_0 = ProtoField.new("controls[0] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_0", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_1 = ProtoField.new("controls[1] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_1", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_2 = ProtoField.new("controls[2] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_2", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_3 = ProtoField.new("controls[3] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_3", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_4 = ProtoField.new("controls[4] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_4", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_5 = ProtoField.new("controls[5] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_5", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_6 = ProtoField.new("controls[6] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_6", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_7 = ProtoField.new("controls[7] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_7", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_8 = ProtoField.new("controls[8] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_8", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_9 = ProtoField.new("controls[9] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_9", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_10 = ProtoField.new("controls[10] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_10", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_11 = ProtoField.new("controls[11] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_11", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_12 = ProtoField.new("controls[12] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_12", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_13 = ProtoField.new("controls[13] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_13", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_14 = ProtoField.new("controls[14] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_14", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_15 = ProtoField.new("controls[15] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_15", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_mode = ProtoField.new("mode (MAV_MODE_FLAG)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_mode", ftypes.UINT8, nil)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED")
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_TEST_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_TEST_ENABLED", "MAV_MODE_FLAG_TEST_ENABLED")
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_AUTO_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_AUTO_ENABLED", "MAV_MODE_FLAG_AUTO_ENABLED")
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_GUIDED_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_GUIDED_ENABLED", "MAV_MODE_FLAG_GUIDED_ENABLED")
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_STABILIZE_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_STABILIZE_ENABLED", "MAV_MODE_FLAG_STABILIZE_ENABLED")
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_HIL_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_HIL_ENABLED", "MAV_MODE_FLAG_HIL_ENABLED")
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED")
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_SAFETY_ARMED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_SAFETY_ARMED", "MAV_MODE_FLAG_SAFETY_ARMED")
f.HIL_ACTUATOR_CONTROLS_flags = ProtoField.new("flags (uint64_t)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_flags", ftypes.UINT64, nil)

f.OPTICAL_FLOW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.OPTICAL_FLOW_time_usec", ftypes.UINT64, nil)
f.OPTICAL_FLOW_sensor_id = ProtoField.new("sensor_id (uint8_t)", "mavlink_proto.OPTICAL_FLOW_sensor_id", ftypes.UINT8, nil)
f.OPTICAL_FLOW_flow_x = ProtoField.new("flow_x (int16_t)", "mavlink_proto.OPTICAL_FLOW_flow_x", ftypes.INT16, nil)
f.OPTICAL_FLOW_flow_y = ProtoField.new("flow_y (int16_t)", "mavlink_proto.OPTICAL_FLOW_flow_y", ftypes.INT16, nil)
f.OPTICAL_FLOW_flow_comp_m_x = ProtoField.new("flow_comp_m_x (float)", "mavlink_proto.OPTICAL_FLOW_flow_comp_m_x", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_flow_comp_m_y = ProtoField.new("flow_comp_m_y (float)", "mavlink_proto.OPTICAL_FLOW_flow_comp_m_y", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_quality = ProtoField.new("quality (uint8_t)", "mavlink_proto.OPTICAL_FLOW_quality", ftypes.UINT8, nil)
f.OPTICAL_FLOW_ground_distance = ProtoField.new("ground_distance (float)", "mavlink_proto.OPTICAL_FLOW_ground_distance", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_flow_rate_x = ProtoField.new("flow_rate_x (float)", "mavlink_proto.OPTICAL_FLOW_flow_rate_x", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_flow_rate_y = ProtoField.new("flow_rate_y (float)", "mavlink_proto.OPTICAL_FLOW_flow_rate_y", ftypes.FLOAT, nil)

f.GLOBAL_VISION_POSITION_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_usec", ftypes.UINT64, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_x", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_y", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_z", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_roll = ProtoField.new("roll (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_roll", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_pitch", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_yaw", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_9", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_10", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_11", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_12", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_13", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_14", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_15", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_16", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_17", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_18", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_19", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_20", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_reset_counter", ftypes.UINT8, nil)

f.VISION_POSITION_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.VISION_POSITION_ESTIMATE_usec", ftypes.UINT64, nil)
f.VISION_POSITION_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_x", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_y", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_z", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_roll = ProtoField.new("roll (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_roll", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_pitch", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_yaw", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_9", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_10", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_11", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_12", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_13", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_14", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_15", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_16", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_17", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_18", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_19", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_20", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.VISION_POSITION_ESTIMATE_reset_counter", ftypes.UINT8, nil)

f.VISION_SPEED_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.VISION_SPEED_ESTIMATE_usec", ftypes.UINT64, nil)
f.VISION_SPEED_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_x", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_y", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_z", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.VISION_SPEED_ESTIMATE_reset_counter", ftypes.UINT8, nil)

f.VICON_POSITION_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.VICON_POSITION_ESTIMATE_usec", ftypes.UINT64, nil)
f.VICON_POSITION_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_x", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_y", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_z", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_roll = ProtoField.new("roll (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_roll", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_pitch", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_yaw", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_9", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_10", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_11", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_12", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_13", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_14", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_15", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_16", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_17", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_18", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_19", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_20", ftypes.FLOAT, nil)

f.HIGHRES_IMU_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIGHRES_IMU_time_usec", ftypes.UINT64, nil)
f.HIGHRES_IMU_xacc = ProtoField.new("xacc (float)", "mavlink_proto.HIGHRES_IMU_xacc", ftypes.FLOAT, nil)
f.HIGHRES_IMU_yacc = ProtoField.new("yacc (float)", "mavlink_proto.HIGHRES_IMU_yacc", ftypes.FLOAT, nil)
f.HIGHRES_IMU_zacc = ProtoField.new("zacc (float)", "mavlink_proto.HIGHRES_IMU_zacc", ftypes.FLOAT, nil)
f.HIGHRES_IMU_xgyro = ProtoField.new("xgyro (float)", "mavlink_proto.HIGHRES_IMU_xgyro", ftypes.FLOAT, nil)
f.HIGHRES_IMU_ygyro = ProtoField.new("ygyro (float)", "mavlink_proto.HIGHRES_IMU_ygyro", ftypes.FLOAT, nil)
f.HIGHRES_IMU_zgyro = ProtoField.new("zgyro (float)", "mavlink_proto.HIGHRES_IMU_zgyro", ftypes.FLOAT, nil)
f.HIGHRES_IMU_xmag = ProtoField.new("xmag (float)", "mavlink_proto.HIGHRES_IMU_xmag", ftypes.FLOAT, nil)
f.HIGHRES_IMU_ymag = ProtoField.new("ymag (float)", "mavlink_proto.HIGHRES_IMU_ymag", ftypes.FLOAT, nil)
f.HIGHRES_IMU_zmag = ProtoField.new("zmag (float)", "mavlink_proto.HIGHRES_IMU_zmag", ftypes.FLOAT, nil)
f.HIGHRES_IMU_abs_pressure = ProtoField.new("abs_pressure (float)", "mavlink_proto.HIGHRES_IMU_abs_pressure", ftypes.FLOAT, nil)
f.HIGHRES_IMU_diff_pressure = ProtoField.new("diff_pressure (float)", "mavlink_proto.HIGHRES_IMU_diff_pressure", ftypes.FLOAT, nil)
f.HIGHRES_IMU_pressure_alt = ProtoField.new("pressure_alt (float)", "mavlink_proto.HIGHRES_IMU_pressure_alt", ftypes.FLOAT, nil)
f.HIGHRES_IMU_temperature = ProtoField.new("temperature (float)", "mavlink_proto.HIGHRES_IMU_temperature", ftypes.FLOAT, nil)
f.HIGHRES_IMU_fields_updated = ProtoField.new("fields_updated (HIGHRES_IMU_UPDATED_FLAGS)", "mavlink_proto.HIGHRES_IMU_fields_updated", ftypes.UINT16, enumEntryName.HIGHRES_IMU_UPDATED_FLAGS)
f.HIGHRES_IMU_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HIGHRES_IMU_id", ftypes.UINT8, nil)

f.OPTICAL_FLOW_RAD_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.OPTICAL_FLOW_RAD_time_usec", ftypes.UINT64, nil)
f.OPTICAL_FLOW_RAD_sensor_id = ProtoField.new("sensor_id (uint8_t)", "mavlink_proto.OPTICAL_FLOW_RAD_sensor_id", ftypes.UINT8, nil)
f.OPTICAL_FLOW_RAD_integration_time_us = ProtoField.new("integration_time_us (uint32_t)", "mavlink_proto.OPTICAL_FLOW_RAD_integration_time_us", ftypes.UINT32, nil)
f.OPTICAL_FLOW_RAD_integrated_x = ProtoField.new("integrated_x (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_x", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_y = ProtoField.new("integrated_y (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_y", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_xgyro = ProtoField.new("integrated_xgyro (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_xgyro", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_ygyro = ProtoField.new("integrated_ygyro (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_ygyro", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_zgyro = ProtoField.new("integrated_zgyro (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_zgyro", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.OPTICAL_FLOW_RAD_temperature", ftypes.INT16, nil)
f.OPTICAL_FLOW_RAD_quality = ProtoField.new("quality (uint8_t)", "mavlink_proto.OPTICAL_FLOW_RAD_quality", ftypes.UINT8, nil)
f.OPTICAL_FLOW_RAD_time_delta_distance_us = ProtoField.new("time_delta_distance_us (uint32_t)", "mavlink_proto.OPTICAL_FLOW_RAD_time_delta_distance_us", ftypes.UINT32, nil)
f.OPTICAL_FLOW_RAD_distance = ProtoField.new("distance (float)", "mavlink_proto.OPTICAL_FLOW_RAD_distance", ftypes.FLOAT, nil)

f.HIL_SENSOR_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_SENSOR_time_usec", ftypes.UINT64, nil)
f.HIL_SENSOR_xacc = ProtoField.new("xacc (float)", "mavlink_proto.HIL_SENSOR_xacc", ftypes.FLOAT, nil)
f.HIL_SENSOR_yacc = ProtoField.new("yacc (float)", "mavlink_proto.HIL_SENSOR_yacc", ftypes.FLOAT, nil)
f.HIL_SENSOR_zacc = ProtoField.new("zacc (float)", "mavlink_proto.HIL_SENSOR_zacc", ftypes.FLOAT, nil)
f.HIL_SENSOR_xgyro = ProtoField.new("xgyro (float)", "mavlink_proto.HIL_SENSOR_xgyro", ftypes.FLOAT, nil)
f.HIL_SENSOR_ygyro = ProtoField.new("ygyro (float)", "mavlink_proto.HIL_SENSOR_ygyro", ftypes.FLOAT, nil)
f.HIL_SENSOR_zgyro = ProtoField.new("zgyro (float)", "mavlink_proto.HIL_SENSOR_zgyro", ftypes.FLOAT, nil)
f.HIL_SENSOR_xmag = ProtoField.new("xmag (float)", "mavlink_proto.HIL_SENSOR_xmag", ftypes.FLOAT, nil)
f.HIL_SENSOR_ymag = ProtoField.new("ymag (float)", "mavlink_proto.HIL_SENSOR_ymag", ftypes.FLOAT, nil)
f.HIL_SENSOR_zmag = ProtoField.new("zmag (float)", "mavlink_proto.HIL_SENSOR_zmag", ftypes.FLOAT, nil)
f.HIL_SENSOR_abs_pressure = ProtoField.new("abs_pressure (float)", "mavlink_proto.HIL_SENSOR_abs_pressure", ftypes.FLOAT, nil)
f.HIL_SENSOR_diff_pressure = ProtoField.new("diff_pressure (float)", "mavlink_proto.HIL_SENSOR_diff_pressure", ftypes.FLOAT, nil)
f.HIL_SENSOR_pressure_alt = ProtoField.new("pressure_alt (float)", "mavlink_proto.HIL_SENSOR_pressure_alt", ftypes.FLOAT, nil)
f.HIL_SENSOR_temperature = ProtoField.new("temperature (float)", "mavlink_proto.HIL_SENSOR_temperature", ftypes.FLOAT, nil)
f.HIL_SENSOR_fields_updated = ProtoField.new("fields_updated (HIL_SENSOR_UPDATED_FLAGS)", "mavlink_proto.HIL_SENSOR_fields_updated", ftypes.UINT32, enumEntryName.HIL_SENSOR_UPDATED_FLAGS)
f.HIL_SENSOR_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HIL_SENSOR_id", ftypes.UINT8, nil)

f.SIM_STATE_q1 = ProtoField.new("q1 (float)", "mavlink_proto.SIM_STATE_q1", ftypes.FLOAT, nil)
f.SIM_STATE_q2 = ProtoField.new("q2 (float)", "mavlink_proto.SIM_STATE_q2", ftypes.FLOAT, nil)
f.SIM_STATE_q3 = ProtoField.new("q3 (float)", "mavlink_proto.SIM_STATE_q3", ftypes.FLOAT, nil)
f.SIM_STATE_q4 = ProtoField.new("q4 (float)", "mavlink_proto.SIM_STATE_q4", ftypes.FLOAT, nil)
f.SIM_STATE_roll = ProtoField.new("roll (float)", "mavlink_proto.SIM_STATE_roll", ftypes.FLOAT, nil)
f.SIM_STATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.SIM_STATE_pitch", ftypes.FLOAT, nil)
f.SIM_STATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.SIM_STATE_yaw", ftypes.FLOAT, nil)
f.SIM_STATE_xacc = ProtoField.new("xacc (float)", "mavlink_proto.SIM_STATE_xacc", ftypes.FLOAT, nil)
f.SIM_STATE_yacc = ProtoField.new("yacc (float)", "mavlink_proto.SIM_STATE_yacc", ftypes.FLOAT, nil)
f.SIM_STATE_zacc = ProtoField.new("zacc (float)", "mavlink_proto.SIM_STATE_zacc", ftypes.FLOAT, nil)
f.SIM_STATE_xgyro = ProtoField.new("xgyro (float)", "mavlink_proto.SIM_STATE_xgyro", ftypes.FLOAT, nil)
f.SIM_STATE_ygyro = ProtoField.new("ygyro (float)", "mavlink_proto.SIM_STATE_ygyro", ftypes.FLOAT, nil)
f.SIM_STATE_zgyro = ProtoField.new("zgyro (float)", "mavlink_proto.SIM_STATE_zgyro", ftypes.FLOAT, nil)
f.SIM_STATE_lat = ProtoField.new("lat (float)", "mavlink_proto.SIM_STATE_lat", ftypes.FLOAT, nil)
f.SIM_STATE_lon = ProtoField.new("lon (float)", "mavlink_proto.SIM_STATE_lon", ftypes.FLOAT, nil)
f.SIM_STATE_alt = ProtoField.new("alt (float)", "mavlink_proto.SIM_STATE_alt", ftypes.FLOAT, nil)
f.SIM_STATE_std_dev_horz = ProtoField.new("std_dev_horz (float)", "mavlink_proto.SIM_STATE_std_dev_horz", ftypes.FLOAT, nil)
f.SIM_STATE_std_dev_vert = ProtoField.new("std_dev_vert (float)", "mavlink_proto.SIM_STATE_std_dev_vert", ftypes.FLOAT, nil)
f.SIM_STATE_vn = ProtoField.new("vn (float)", "mavlink_proto.SIM_STATE_vn", ftypes.FLOAT, nil)
f.SIM_STATE_ve = ProtoField.new("ve (float)", "mavlink_proto.SIM_STATE_ve", ftypes.FLOAT, nil)
f.SIM_STATE_vd = ProtoField.new("vd (float)", "mavlink_proto.SIM_STATE_vd", ftypes.FLOAT, nil)
f.SIM_STATE_lat_int = ProtoField.new("lat_int (int32_t)", "mavlink_proto.SIM_STATE_lat_int", ftypes.INT32, nil)
f.SIM_STATE_lon_int = ProtoField.new("lon_int (int32_t)", "mavlink_proto.SIM_STATE_lon_int", ftypes.INT32, nil)

f.RADIO_STATUS_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RADIO_STATUS_rssi", ftypes.UINT8, nil)
f.RADIO_STATUS_remrssi = ProtoField.new("remrssi (uint8_t)", "mavlink_proto.RADIO_STATUS_remrssi", ftypes.UINT8, nil)
f.RADIO_STATUS_txbuf = ProtoField.new("txbuf (uint8_t)", "mavlink_proto.RADIO_STATUS_txbuf", ftypes.UINT8, nil)
f.RADIO_STATUS_noise = ProtoField.new("noise (uint8_t)", "mavlink_proto.RADIO_STATUS_noise", ftypes.UINT8, nil)
f.RADIO_STATUS_remnoise = ProtoField.new("remnoise (uint8_t)", "mavlink_proto.RADIO_STATUS_remnoise", ftypes.UINT8, nil)
f.RADIO_STATUS_rxerrors = ProtoField.new("rxerrors (uint16_t)", "mavlink_proto.RADIO_STATUS_rxerrors", ftypes.UINT16, nil)
f.RADIO_STATUS_fixed = ProtoField.new("fixed (uint16_t)", "mavlink_proto.RADIO_STATUS_fixed", ftypes.UINT16, nil)

f.FILE_TRANSFER_PROTOCOL_target_network = ProtoField.new("target_network (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_target_network", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_target_system", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_target_component", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_0 = ProtoField.new("payload[0] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_0", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_1 = ProtoField.new("payload[1] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_1", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_2 = ProtoField.new("payload[2] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_2", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_3 = ProtoField.new("payload[3] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_3", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_4 = ProtoField.new("payload[4] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_4", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_5 = ProtoField.new("payload[5] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_5", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_6 = ProtoField.new("payload[6] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_6", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_7 = ProtoField.new("payload[7] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_7", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_8 = ProtoField.new("payload[8] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_8", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_9 = ProtoField.new("payload[9] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_9", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_10 = ProtoField.new("payload[10] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_10", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_11 = ProtoField.new("payload[11] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_11", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_12 = ProtoField.new("payload[12] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_12", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_13 = ProtoField.new("payload[13] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_13", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_14 = ProtoField.new("payload[14] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_14", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_15 = ProtoField.new("payload[15] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_15", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_16 = ProtoField.new("payload[16] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_16", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_17 = ProtoField.new("payload[17] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_17", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_18 = ProtoField.new("payload[18] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_18", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_19 = ProtoField.new("payload[19] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_19", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_20 = ProtoField.new("payload[20] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_20", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_21 = ProtoField.new("payload[21] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_21", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_22 = ProtoField.new("payload[22] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_22", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_23 = ProtoField.new("payload[23] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_23", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_24 = ProtoField.new("payload[24] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_24", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_25 = ProtoField.new("payload[25] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_25", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_26 = ProtoField.new("payload[26] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_26", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_27 = ProtoField.new("payload[27] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_27", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_28 = ProtoField.new("payload[28] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_28", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_29 = ProtoField.new("payload[29] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_29", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_30 = ProtoField.new("payload[30] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_30", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_31 = ProtoField.new("payload[31] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_31", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_32 = ProtoField.new("payload[32] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_32", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_33 = ProtoField.new("payload[33] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_33", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_34 = ProtoField.new("payload[34] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_34", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_35 = ProtoField.new("payload[35] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_35", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_36 = ProtoField.new("payload[36] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_36", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_37 = ProtoField.new("payload[37] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_37", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_38 = ProtoField.new("payload[38] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_38", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_39 = ProtoField.new("payload[39] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_39", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_40 = ProtoField.new("payload[40] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_40", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_41 = ProtoField.new("payload[41] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_41", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_42 = ProtoField.new("payload[42] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_42", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_43 = ProtoField.new("payload[43] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_43", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_44 = ProtoField.new("payload[44] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_44", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_45 = ProtoField.new("payload[45] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_45", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_46 = ProtoField.new("payload[46] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_46", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_47 = ProtoField.new("payload[47] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_47", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_48 = ProtoField.new("payload[48] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_48", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_49 = ProtoField.new("payload[49] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_49", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_50 = ProtoField.new("payload[50] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_50", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_51 = ProtoField.new("payload[51] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_51", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_52 = ProtoField.new("payload[52] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_52", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_53 = ProtoField.new("payload[53] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_53", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_54 = ProtoField.new("payload[54] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_54", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_55 = ProtoField.new("payload[55] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_55", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_56 = ProtoField.new("payload[56] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_56", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_57 = ProtoField.new("payload[57] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_57", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_58 = ProtoField.new("payload[58] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_58", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_59 = ProtoField.new("payload[59] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_59", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_60 = ProtoField.new("payload[60] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_60", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_61 = ProtoField.new("payload[61] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_61", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_62 = ProtoField.new("payload[62] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_62", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_63 = ProtoField.new("payload[63] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_63", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_64 = ProtoField.new("payload[64] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_64", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_65 = ProtoField.new("payload[65] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_65", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_66 = ProtoField.new("payload[66] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_66", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_67 = ProtoField.new("payload[67] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_67", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_68 = ProtoField.new("payload[68] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_68", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_69 = ProtoField.new("payload[69] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_69", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_70 = ProtoField.new("payload[70] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_70", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_71 = ProtoField.new("payload[71] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_71", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_72 = ProtoField.new("payload[72] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_72", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_73 = ProtoField.new("payload[73] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_73", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_74 = ProtoField.new("payload[74] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_74", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_75 = ProtoField.new("payload[75] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_75", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_76 = ProtoField.new("payload[76] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_76", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_77 = ProtoField.new("payload[77] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_77", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_78 = ProtoField.new("payload[78] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_78", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_79 = ProtoField.new("payload[79] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_79", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_80 = ProtoField.new("payload[80] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_80", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_81 = ProtoField.new("payload[81] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_81", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_82 = ProtoField.new("payload[82] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_82", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_83 = ProtoField.new("payload[83] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_83", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_84 = ProtoField.new("payload[84] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_84", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_85 = ProtoField.new("payload[85] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_85", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_86 = ProtoField.new("payload[86] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_86", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_87 = ProtoField.new("payload[87] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_87", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_88 = ProtoField.new("payload[88] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_88", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_89 = ProtoField.new("payload[89] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_89", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_90 = ProtoField.new("payload[90] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_90", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_91 = ProtoField.new("payload[91] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_91", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_92 = ProtoField.new("payload[92] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_92", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_93 = ProtoField.new("payload[93] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_93", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_94 = ProtoField.new("payload[94] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_94", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_95 = ProtoField.new("payload[95] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_95", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_96 = ProtoField.new("payload[96] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_96", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_97 = ProtoField.new("payload[97] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_97", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_98 = ProtoField.new("payload[98] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_98", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_99 = ProtoField.new("payload[99] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_99", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_100 = ProtoField.new("payload[100] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_100", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_101 = ProtoField.new("payload[101] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_101", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_102 = ProtoField.new("payload[102] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_102", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_103 = ProtoField.new("payload[103] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_103", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_104 = ProtoField.new("payload[104] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_104", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_105 = ProtoField.new("payload[105] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_105", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_106 = ProtoField.new("payload[106] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_106", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_107 = ProtoField.new("payload[107] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_107", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_108 = ProtoField.new("payload[108] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_108", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_109 = ProtoField.new("payload[109] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_109", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_110 = ProtoField.new("payload[110] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_110", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_111 = ProtoField.new("payload[111] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_111", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_112 = ProtoField.new("payload[112] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_112", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_113 = ProtoField.new("payload[113] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_113", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_114 = ProtoField.new("payload[114] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_114", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_115 = ProtoField.new("payload[115] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_115", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_116 = ProtoField.new("payload[116] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_116", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_117 = ProtoField.new("payload[117] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_117", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_118 = ProtoField.new("payload[118] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_118", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_119 = ProtoField.new("payload[119] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_119", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_120 = ProtoField.new("payload[120] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_120", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_121 = ProtoField.new("payload[121] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_121", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_122 = ProtoField.new("payload[122] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_122", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_123 = ProtoField.new("payload[123] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_123", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_124 = ProtoField.new("payload[124] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_124", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_125 = ProtoField.new("payload[125] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_125", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_126 = ProtoField.new("payload[126] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_126", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_127 = ProtoField.new("payload[127] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_127", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_128 = ProtoField.new("payload[128] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_128", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_129 = ProtoField.new("payload[129] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_129", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_130 = ProtoField.new("payload[130] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_130", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_131 = ProtoField.new("payload[131] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_131", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_132 = ProtoField.new("payload[132] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_132", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_133 = ProtoField.new("payload[133] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_133", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_134 = ProtoField.new("payload[134] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_134", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_135 = ProtoField.new("payload[135] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_135", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_136 = ProtoField.new("payload[136] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_136", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_137 = ProtoField.new("payload[137] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_137", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_138 = ProtoField.new("payload[138] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_138", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_139 = ProtoField.new("payload[139] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_139", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_140 = ProtoField.new("payload[140] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_140", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_141 = ProtoField.new("payload[141] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_141", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_142 = ProtoField.new("payload[142] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_142", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_143 = ProtoField.new("payload[143] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_143", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_144 = ProtoField.new("payload[144] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_144", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_145 = ProtoField.new("payload[145] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_145", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_146 = ProtoField.new("payload[146] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_146", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_147 = ProtoField.new("payload[147] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_147", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_148 = ProtoField.new("payload[148] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_148", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_149 = ProtoField.new("payload[149] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_149", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_150 = ProtoField.new("payload[150] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_150", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_151 = ProtoField.new("payload[151] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_151", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_152 = ProtoField.new("payload[152] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_152", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_153 = ProtoField.new("payload[153] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_153", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_154 = ProtoField.new("payload[154] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_154", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_155 = ProtoField.new("payload[155] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_155", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_156 = ProtoField.new("payload[156] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_156", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_157 = ProtoField.new("payload[157] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_157", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_158 = ProtoField.new("payload[158] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_158", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_159 = ProtoField.new("payload[159] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_159", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_160 = ProtoField.new("payload[160] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_160", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_161 = ProtoField.new("payload[161] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_161", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_162 = ProtoField.new("payload[162] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_162", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_163 = ProtoField.new("payload[163] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_163", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_164 = ProtoField.new("payload[164] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_164", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_165 = ProtoField.new("payload[165] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_165", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_166 = ProtoField.new("payload[166] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_166", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_167 = ProtoField.new("payload[167] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_167", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_168 = ProtoField.new("payload[168] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_168", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_169 = ProtoField.new("payload[169] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_169", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_170 = ProtoField.new("payload[170] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_170", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_171 = ProtoField.new("payload[171] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_171", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_172 = ProtoField.new("payload[172] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_172", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_173 = ProtoField.new("payload[173] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_173", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_174 = ProtoField.new("payload[174] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_174", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_175 = ProtoField.new("payload[175] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_175", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_176 = ProtoField.new("payload[176] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_176", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_177 = ProtoField.new("payload[177] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_177", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_178 = ProtoField.new("payload[178] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_178", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_179 = ProtoField.new("payload[179] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_179", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_180 = ProtoField.new("payload[180] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_180", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_181 = ProtoField.new("payload[181] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_181", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_182 = ProtoField.new("payload[182] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_182", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_183 = ProtoField.new("payload[183] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_183", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_184 = ProtoField.new("payload[184] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_184", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_185 = ProtoField.new("payload[185] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_185", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_186 = ProtoField.new("payload[186] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_186", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_187 = ProtoField.new("payload[187] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_187", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_188 = ProtoField.new("payload[188] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_188", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_189 = ProtoField.new("payload[189] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_189", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_190 = ProtoField.new("payload[190] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_190", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_191 = ProtoField.new("payload[191] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_191", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_192 = ProtoField.new("payload[192] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_192", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_193 = ProtoField.new("payload[193] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_193", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_194 = ProtoField.new("payload[194] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_194", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_195 = ProtoField.new("payload[195] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_195", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_196 = ProtoField.new("payload[196] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_196", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_197 = ProtoField.new("payload[197] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_197", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_198 = ProtoField.new("payload[198] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_198", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_199 = ProtoField.new("payload[199] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_199", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_200 = ProtoField.new("payload[200] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_200", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_201 = ProtoField.new("payload[201] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_201", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_202 = ProtoField.new("payload[202] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_202", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_203 = ProtoField.new("payload[203] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_203", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_204 = ProtoField.new("payload[204] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_204", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_205 = ProtoField.new("payload[205] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_205", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_206 = ProtoField.new("payload[206] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_206", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_207 = ProtoField.new("payload[207] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_207", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_208 = ProtoField.new("payload[208] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_208", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_209 = ProtoField.new("payload[209] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_209", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_210 = ProtoField.new("payload[210] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_210", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_211 = ProtoField.new("payload[211] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_211", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_212 = ProtoField.new("payload[212] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_212", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_213 = ProtoField.new("payload[213] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_213", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_214 = ProtoField.new("payload[214] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_214", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_215 = ProtoField.new("payload[215] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_215", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_216 = ProtoField.new("payload[216] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_216", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_217 = ProtoField.new("payload[217] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_217", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_218 = ProtoField.new("payload[218] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_218", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_219 = ProtoField.new("payload[219] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_219", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_220 = ProtoField.new("payload[220] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_220", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_221 = ProtoField.new("payload[221] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_221", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_222 = ProtoField.new("payload[222] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_222", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_223 = ProtoField.new("payload[223] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_223", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_224 = ProtoField.new("payload[224] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_224", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_225 = ProtoField.new("payload[225] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_225", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_226 = ProtoField.new("payload[226] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_226", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_227 = ProtoField.new("payload[227] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_227", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_228 = ProtoField.new("payload[228] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_228", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_229 = ProtoField.new("payload[229] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_229", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_230 = ProtoField.new("payload[230] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_230", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_231 = ProtoField.new("payload[231] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_231", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_232 = ProtoField.new("payload[232] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_232", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_233 = ProtoField.new("payload[233] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_233", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_234 = ProtoField.new("payload[234] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_234", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_235 = ProtoField.new("payload[235] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_235", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_236 = ProtoField.new("payload[236] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_236", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_237 = ProtoField.new("payload[237] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_237", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_238 = ProtoField.new("payload[238] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_238", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_239 = ProtoField.new("payload[239] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_239", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_240 = ProtoField.new("payload[240] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_240", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_241 = ProtoField.new("payload[241] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_241", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_242 = ProtoField.new("payload[242] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_242", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_243 = ProtoField.new("payload[243] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_243", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_244 = ProtoField.new("payload[244] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_244", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_245 = ProtoField.new("payload[245] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_245", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_246 = ProtoField.new("payload[246] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_246", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_247 = ProtoField.new("payload[247] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_247", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_248 = ProtoField.new("payload[248] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_248", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_249 = ProtoField.new("payload[249] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_249", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_250 = ProtoField.new("payload[250] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_250", ftypes.UINT8, nil)

f.TIMESYNC_tc1 = ProtoField.new("tc1 (int64_t)", "mavlink_proto.TIMESYNC_tc1", ftypes.INT64, nil)
f.TIMESYNC_ts1 = ProtoField.new("ts1 (int64_t)", "mavlink_proto.TIMESYNC_ts1", ftypes.INT64, nil)
f.TIMESYNC_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.TIMESYNC_target_system", ftypes.UINT8, nil)
f.TIMESYNC_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.TIMESYNC_target_component", ftypes.UINT8, nil)

f.CAMERA_TRIGGER_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.CAMERA_TRIGGER_time_usec", ftypes.UINT64, nil)
f.CAMERA_TRIGGER_seq = ProtoField.new("seq (uint32_t)", "mavlink_proto.CAMERA_TRIGGER_seq", ftypes.UINT32, nil)

f.HIL_GPS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_GPS_time_usec", ftypes.UINT64, nil)
f.HIL_GPS_fix_type = ProtoField.new("fix_type (uint8_t)", "mavlink_proto.HIL_GPS_fix_type", ftypes.UINT8, nil)
f.HIL_GPS_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.HIL_GPS_lat", ftypes.INT32, nil)
f.HIL_GPS_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.HIL_GPS_lon", ftypes.INT32, nil)
f.HIL_GPS_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.HIL_GPS_alt", ftypes.INT32, nil)
f.HIL_GPS_eph = ProtoField.new("eph (uint16_t)", "mavlink_proto.HIL_GPS_eph", ftypes.UINT16, nil)
f.HIL_GPS_epv = ProtoField.new("epv (uint16_t)", "mavlink_proto.HIL_GPS_epv", ftypes.UINT16, nil)
f.HIL_GPS_vel = ProtoField.new("vel (uint16_t)", "mavlink_proto.HIL_GPS_vel", ftypes.UINT16, nil)
f.HIL_GPS_vn = ProtoField.new("vn (int16_t)", "mavlink_proto.HIL_GPS_vn", ftypes.INT16, nil)
f.HIL_GPS_ve = ProtoField.new("ve (int16_t)", "mavlink_proto.HIL_GPS_ve", ftypes.INT16, nil)
f.HIL_GPS_vd = ProtoField.new("vd (int16_t)", "mavlink_proto.HIL_GPS_vd", ftypes.INT16, nil)
f.HIL_GPS_cog = ProtoField.new("cog (uint16_t)", "mavlink_proto.HIL_GPS_cog", ftypes.UINT16, nil)
f.HIL_GPS_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.HIL_GPS_satellites_visible", ftypes.UINT8, nil)
f.HIL_GPS_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HIL_GPS_id", ftypes.UINT8, nil)
f.HIL_GPS_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.HIL_GPS_yaw", ftypes.UINT16, nil)

f.HIL_OPTICAL_FLOW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_OPTICAL_FLOW_time_usec", ftypes.UINT64, nil)
f.HIL_OPTICAL_FLOW_sensor_id = ProtoField.new("sensor_id (uint8_t)", "mavlink_proto.HIL_OPTICAL_FLOW_sensor_id", ftypes.UINT8, nil)
f.HIL_OPTICAL_FLOW_integration_time_us = ProtoField.new("integration_time_us (uint32_t)", "mavlink_proto.HIL_OPTICAL_FLOW_integration_time_us", ftypes.UINT32, nil)
f.HIL_OPTICAL_FLOW_integrated_x = ProtoField.new("integrated_x (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_x", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_y = ProtoField.new("integrated_y (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_y", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_xgyro = ProtoField.new("integrated_xgyro (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_xgyro", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_ygyro = ProtoField.new("integrated_ygyro (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_ygyro", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_zgyro = ProtoField.new("integrated_zgyro (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_zgyro", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.HIL_OPTICAL_FLOW_temperature", ftypes.INT16, nil)
f.HIL_OPTICAL_FLOW_quality = ProtoField.new("quality (uint8_t)", "mavlink_proto.HIL_OPTICAL_FLOW_quality", ftypes.UINT8, nil)
f.HIL_OPTICAL_FLOW_time_delta_distance_us = ProtoField.new("time_delta_distance_us (uint32_t)", "mavlink_proto.HIL_OPTICAL_FLOW_time_delta_distance_us", ftypes.UINT32, nil)
f.HIL_OPTICAL_FLOW_distance = ProtoField.new("distance (float)", "mavlink_proto.HIL_OPTICAL_FLOW_distance", ftypes.FLOAT, nil)

f.HIL_STATE_QUATERNION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_STATE_QUATERNION_time_usec", ftypes.UINT64, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_0 = ProtoField.new("attitude_quaternion[0] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_0", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_1 = ProtoField.new("attitude_quaternion[1] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_1", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_2 = ProtoField.new("attitude_quaternion[2] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_2", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_3 = ProtoField.new("attitude_quaternion[3] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_3", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.HIL_STATE_QUATERNION_rollspeed", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.HIL_STATE_QUATERNION_pitchspeed", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.HIL_STATE_QUATERNION_yawspeed", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.HIL_STATE_QUATERNION_lat", ftypes.INT32, nil)
f.HIL_STATE_QUATERNION_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.HIL_STATE_QUATERNION_lon", ftypes.INT32, nil)
f.HIL_STATE_QUATERNION_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.HIL_STATE_QUATERNION_alt", ftypes.INT32, nil)
f.HIL_STATE_QUATERNION_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_vx", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_vy", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_vz", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_ind_airspeed = ProtoField.new("ind_airspeed (uint16_t)", "mavlink_proto.HIL_STATE_QUATERNION_ind_airspeed", ftypes.UINT16, nil)
f.HIL_STATE_QUATERNION_true_airspeed = ProtoField.new("true_airspeed (uint16_t)", "mavlink_proto.HIL_STATE_QUATERNION_true_airspeed", ftypes.UINT16, nil)
f.HIL_STATE_QUATERNION_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_xacc", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_yacc", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_zacc", ftypes.INT16, nil)

f.SCALED_IMU2_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_IMU2_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_IMU2_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.SCALED_IMU2_xacc", ftypes.INT16, nil)
f.SCALED_IMU2_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.SCALED_IMU2_yacc", ftypes.INT16, nil)
f.SCALED_IMU2_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.SCALED_IMU2_zacc", ftypes.INT16, nil)
f.SCALED_IMU2_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.SCALED_IMU2_xgyro", ftypes.INT16, nil)
f.SCALED_IMU2_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.SCALED_IMU2_ygyro", ftypes.INT16, nil)
f.SCALED_IMU2_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.SCALED_IMU2_zgyro", ftypes.INT16, nil)
f.SCALED_IMU2_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.SCALED_IMU2_xmag", ftypes.INT16, nil)
f.SCALED_IMU2_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.SCALED_IMU2_ymag", ftypes.INT16, nil)
f.SCALED_IMU2_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.SCALED_IMU2_zmag", ftypes.INT16, nil)
f.SCALED_IMU2_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_IMU2_temperature", ftypes.INT16, nil)

f.LOG_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.LOG_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_REQUEST_LIST_target_component", ftypes.UINT8, nil)
f.LOG_REQUEST_LIST_start = ProtoField.new("start (uint16_t)", "mavlink_proto.LOG_REQUEST_LIST_start", ftypes.UINT16, nil)
f.LOG_REQUEST_LIST_end = ProtoField.new("end (uint16_t)", "mavlink_proto.LOG_REQUEST_LIST_end", ftypes.UINT16, nil)

f.LOG_ENTRY_id = ProtoField.new("id (uint16_t)", "mavlink_proto.LOG_ENTRY_id", ftypes.UINT16, nil)
f.LOG_ENTRY_num_logs = ProtoField.new("num_logs (uint16_t)", "mavlink_proto.LOG_ENTRY_num_logs", ftypes.UINT16, nil)
f.LOG_ENTRY_last_log_num = ProtoField.new("last_log_num (uint16_t)", "mavlink_proto.LOG_ENTRY_last_log_num", ftypes.UINT16, nil)
f.LOG_ENTRY_time_utc = ProtoField.new("time_utc (uint32_t)", "mavlink_proto.LOG_ENTRY_time_utc", ftypes.UINT32, nil)
f.LOG_ENTRY_size = ProtoField.new("size (uint32_t)", "mavlink_proto.LOG_ENTRY_size", ftypes.UINT32, nil)

f.LOG_REQUEST_DATA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_REQUEST_DATA_target_system", ftypes.UINT8, nil)
f.LOG_REQUEST_DATA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_REQUEST_DATA_target_component", ftypes.UINT8, nil)
f.LOG_REQUEST_DATA_id = ProtoField.new("id (uint16_t)", "mavlink_proto.LOG_REQUEST_DATA_id", ftypes.UINT16, nil)
f.LOG_REQUEST_DATA_ofs = ProtoField.new("ofs (uint32_t)", "mavlink_proto.LOG_REQUEST_DATA_ofs", ftypes.UINT32, nil)
f.LOG_REQUEST_DATA_count = ProtoField.new("count (uint32_t)", "mavlink_proto.LOG_REQUEST_DATA_count", ftypes.UINT32, nil)

f.LOG_DATA_id = ProtoField.new("id (uint16_t)", "mavlink_proto.LOG_DATA_id", ftypes.UINT16, nil)
f.LOG_DATA_ofs = ProtoField.new("ofs (uint32_t)", "mavlink_proto.LOG_DATA_ofs", ftypes.UINT32, nil)
f.LOG_DATA_count = ProtoField.new("count (uint8_t)", "mavlink_proto.LOG_DATA_count", ftypes.UINT8, nil)
f.LOG_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.LOG_DATA_data_0", ftypes.UINT8, nil)
f.LOG_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.LOG_DATA_data_1", ftypes.UINT8, nil)
f.LOG_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.LOG_DATA_data_2", ftypes.UINT8, nil)
f.LOG_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.LOG_DATA_data_3", ftypes.UINT8, nil)
f.LOG_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.LOG_DATA_data_4", ftypes.UINT8, nil)
f.LOG_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.LOG_DATA_data_5", ftypes.UINT8, nil)
f.LOG_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.LOG_DATA_data_6", ftypes.UINT8, nil)
f.LOG_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.LOG_DATA_data_7", ftypes.UINT8, nil)
f.LOG_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.LOG_DATA_data_8", ftypes.UINT8, nil)
f.LOG_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.LOG_DATA_data_9", ftypes.UINT8, nil)
f.LOG_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.LOG_DATA_data_10", ftypes.UINT8, nil)
f.LOG_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.LOG_DATA_data_11", ftypes.UINT8, nil)
f.LOG_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.LOG_DATA_data_12", ftypes.UINT8, nil)
f.LOG_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.LOG_DATA_data_13", ftypes.UINT8, nil)
f.LOG_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.LOG_DATA_data_14", ftypes.UINT8, nil)
f.LOG_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.LOG_DATA_data_15", ftypes.UINT8, nil)
f.LOG_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.LOG_DATA_data_16", ftypes.UINT8, nil)
f.LOG_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.LOG_DATA_data_17", ftypes.UINT8, nil)
f.LOG_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.LOG_DATA_data_18", ftypes.UINT8, nil)
f.LOG_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.LOG_DATA_data_19", ftypes.UINT8, nil)
f.LOG_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.LOG_DATA_data_20", ftypes.UINT8, nil)
f.LOG_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.LOG_DATA_data_21", ftypes.UINT8, nil)
f.LOG_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.LOG_DATA_data_22", ftypes.UINT8, nil)
f.LOG_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.LOG_DATA_data_23", ftypes.UINT8, nil)
f.LOG_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.LOG_DATA_data_24", ftypes.UINT8, nil)
f.LOG_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.LOG_DATA_data_25", ftypes.UINT8, nil)
f.LOG_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.LOG_DATA_data_26", ftypes.UINT8, nil)
f.LOG_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.LOG_DATA_data_27", ftypes.UINT8, nil)
f.LOG_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.LOG_DATA_data_28", ftypes.UINT8, nil)
f.LOG_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.LOG_DATA_data_29", ftypes.UINT8, nil)
f.LOG_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.LOG_DATA_data_30", ftypes.UINT8, nil)
f.LOG_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.LOG_DATA_data_31", ftypes.UINT8, nil)
f.LOG_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.LOG_DATA_data_32", ftypes.UINT8, nil)
f.LOG_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.LOG_DATA_data_33", ftypes.UINT8, nil)
f.LOG_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.LOG_DATA_data_34", ftypes.UINT8, nil)
f.LOG_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.LOG_DATA_data_35", ftypes.UINT8, nil)
f.LOG_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.LOG_DATA_data_36", ftypes.UINT8, nil)
f.LOG_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.LOG_DATA_data_37", ftypes.UINT8, nil)
f.LOG_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.LOG_DATA_data_38", ftypes.UINT8, nil)
f.LOG_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.LOG_DATA_data_39", ftypes.UINT8, nil)
f.LOG_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.LOG_DATA_data_40", ftypes.UINT8, nil)
f.LOG_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.LOG_DATA_data_41", ftypes.UINT8, nil)
f.LOG_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.LOG_DATA_data_42", ftypes.UINT8, nil)
f.LOG_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.LOG_DATA_data_43", ftypes.UINT8, nil)
f.LOG_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.LOG_DATA_data_44", ftypes.UINT8, nil)
f.LOG_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.LOG_DATA_data_45", ftypes.UINT8, nil)
f.LOG_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.LOG_DATA_data_46", ftypes.UINT8, nil)
f.LOG_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.LOG_DATA_data_47", ftypes.UINT8, nil)
f.LOG_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.LOG_DATA_data_48", ftypes.UINT8, nil)
f.LOG_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.LOG_DATA_data_49", ftypes.UINT8, nil)
f.LOG_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.LOG_DATA_data_50", ftypes.UINT8, nil)
f.LOG_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.LOG_DATA_data_51", ftypes.UINT8, nil)
f.LOG_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.LOG_DATA_data_52", ftypes.UINT8, nil)
f.LOG_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.LOG_DATA_data_53", ftypes.UINT8, nil)
f.LOG_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.LOG_DATA_data_54", ftypes.UINT8, nil)
f.LOG_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.LOG_DATA_data_55", ftypes.UINT8, nil)
f.LOG_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.LOG_DATA_data_56", ftypes.UINT8, nil)
f.LOG_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.LOG_DATA_data_57", ftypes.UINT8, nil)
f.LOG_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.LOG_DATA_data_58", ftypes.UINT8, nil)
f.LOG_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.LOG_DATA_data_59", ftypes.UINT8, nil)
f.LOG_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.LOG_DATA_data_60", ftypes.UINT8, nil)
f.LOG_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.LOG_DATA_data_61", ftypes.UINT8, nil)
f.LOG_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.LOG_DATA_data_62", ftypes.UINT8, nil)
f.LOG_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.LOG_DATA_data_63", ftypes.UINT8, nil)
f.LOG_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.LOG_DATA_data_64", ftypes.UINT8, nil)
f.LOG_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.LOG_DATA_data_65", ftypes.UINT8, nil)
f.LOG_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.LOG_DATA_data_66", ftypes.UINT8, nil)
f.LOG_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.LOG_DATA_data_67", ftypes.UINT8, nil)
f.LOG_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.LOG_DATA_data_68", ftypes.UINT8, nil)
f.LOG_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.LOG_DATA_data_69", ftypes.UINT8, nil)
f.LOG_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.LOG_DATA_data_70", ftypes.UINT8, nil)
f.LOG_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.LOG_DATA_data_71", ftypes.UINT8, nil)
f.LOG_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.LOG_DATA_data_72", ftypes.UINT8, nil)
f.LOG_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.LOG_DATA_data_73", ftypes.UINT8, nil)
f.LOG_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.LOG_DATA_data_74", ftypes.UINT8, nil)
f.LOG_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.LOG_DATA_data_75", ftypes.UINT8, nil)
f.LOG_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.LOG_DATA_data_76", ftypes.UINT8, nil)
f.LOG_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.LOG_DATA_data_77", ftypes.UINT8, nil)
f.LOG_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.LOG_DATA_data_78", ftypes.UINT8, nil)
f.LOG_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.LOG_DATA_data_79", ftypes.UINT8, nil)
f.LOG_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.LOG_DATA_data_80", ftypes.UINT8, nil)
f.LOG_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.LOG_DATA_data_81", ftypes.UINT8, nil)
f.LOG_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.LOG_DATA_data_82", ftypes.UINT8, nil)
f.LOG_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.LOG_DATA_data_83", ftypes.UINT8, nil)
f.LOG_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.LOG_DATA_data_84", ftypes.UINT8, nil)
f.LOG_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.LOG_DATA_data_85", ftypes.UINT8, nil)
f.LOG_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.LOG_DATA_data_86", ftypes.UINT8, nil)
f.LOG_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.LOG_DATA_data_87", ftypes.UINT8, nil)
f.LOG_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.LOG_DATA_data_88", ftypes.UINT8, nil)
f.LOG_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.LOG_DATA_data_89", ftypes.UINT8, nil)

f.LOG_ERASE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_ERASE_target_system", ftypes.UINT8, nil)
f.LOG_ERASE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_ERASE_target_component", ftypes.UINT8, nil)

f.LOG_REQUEST_END_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_REQUEST_END_target_system", ftypes.UINT8, nil)
f.LOG_REQUEST_END_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_REQUEST_END_target_component", ftypes.UINT8, nil)

f.GPS_INJECT_DATA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_target_system", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_target_component", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_len = ProtoField.new("len (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_len", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_0", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_1", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_2", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_3", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_4", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_5", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_6", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_7", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_8", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_9", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_10", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_11", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_12", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_13", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_14", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_15", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_16", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_17", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_18", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_19", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_20", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_21", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_22", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_23", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_24", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_25", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_26", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_27", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_28", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_29", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_30", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_31", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_32", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_33", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_34", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_35", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_36", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_37", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_38", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_39", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_40", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_41", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_42", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_43", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_44", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_45", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_46", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_47", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_48", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_49", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_50", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_51", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_52", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_53", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_54", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_55", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_56", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_57", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_58", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_59", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_60", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_61", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_62", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_63", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_64", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_65", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_66", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_67", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_68", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_69", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_70", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_71", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_72", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_73", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_74", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_75", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_76", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_77", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_78", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_79", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_80", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_81", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_82", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_83", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_84", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_85", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_86", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_87", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_88", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_89", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_90", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_91", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_92", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_93", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_94", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_95", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_96", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_97", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_98", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_99", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_100", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_101", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_102", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_103", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_104", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_105", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_106", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_107", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_108", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_109", ftypes.UINT8, nil)

f.GPS2_RAW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS2_RAW_time_usec", ftypes.UINT64, nil)
f.GPS2_RAW_fix_type = ProtoField.new("fix_type (GPS_FIX_TYPE)", "mavlink_proto.GPS2_RAW_fix_type", ftypes.UINT8, enumEntryName.GPS_FIX_TYPE)
f.GPS2_RAW_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GPS2_RAW_lat", ftypes.INT32, nil)
f.GPS2_RAW_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GPS2_RAW_lon", ftypes.INT32, nil)
f.GPS2_RAW_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GPS2_RAW_alt", ftypes.INT32, nil)
f.GPS2_RAW_eph = ProtoField.new("eph (uint16_t)", "mavlink_proto.GPS2_RAW_eph", ftypes.UINT16, nil)
f.GPS2_RAW_epv = ProtoField.new("epv (uint16_t)", "mavlink_proto.GPS2_RAW_epv", ftypes.UINT16, nil)
f.GPS2_RAW_vel = ProtoField.new("vel (uint16_t)", "mavlink_proto.GPS2_RAW_vel", ftypes.UINT16, nil)
f.GPS2_RAW_cog = ProtoField.new("cog (uint16_t)", "mavlink_proto.GPS2_RAW_cog", ftypes.UINT16, nil)
f.GPS2_RAW_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS2_RAW_satellites_visible", ftypes.UINT8, nil)
f.GPS2_RAW_dgps_numch = ProtoField.new("dgps_numch (uint8_t)", "mavlink_proto.GPS2_RAW_dgps_numch", ftypes.UINT8, nil)
f.GPS2_RAW_dgps_age = ProtoField.new("dgps_age (uint32_t)", "mavlink_proto.GPS2_RAW_dgps_age", ftypes.UINT32, nil)
f.GPS2_RAW_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.GPS2_RAW_yaw", ftypes.UINT16, nil)
f.GPS2_RAW_alt_ellipsoid = ProtoField.new("alt_ellipsoid (int32_t)", "mavlink_proto.GPS2_RAW_alt_ellipsoid", ftypes.INT32, nil)
f.GPS2_RAW_h_acc = ProtoField.new("h_acc (uint32_t)", "mavlink_proto.GPS2_RAW_h_acc", ftypes.UINT32, nil)
f.GPS2_RAW_v_acc = ProtoField.new("v_acc (uint32_t)", "mavlink_proto.GPS2_RAW_v_acc", ftypes.UINT32, nil)
f.GPS2_RAW_vel_acc = ProtoField.new("vel_acc (uint32_t)", "mavlink_proto.GPS2_RAW_vel_acc", ftypes.UINT32, nil)
f.GPS2_RAW_hdg_acc = ProtoField.new("hdg_acc (uint32_t)", "mavlink_proto.GPS2_RAW_hdg_acc", ftypes.UINT32, nil)

f.POWER_STATUS_Vcc = ProtoField.new("Vcc (uint16_t)", "mavlink_proto.POWER_STATUS_Vcc", ftypes.UINT16, nil)
f.POWER_STATUS_Vservo = ProtoField.new("Vservo (uint16_t)", "mavlink_proto.POWER_STATUS_Vservo", ftypes.UINT16, nil)
f.POWER_STATUS_flags = ProtoField.new("flags (MAV_POWER_STATUS)", "mavlink_proto.POWER_STATUS_flags", ftypes.UINT16, nil)
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_BRICK_VALID = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_BRICK_VALID", "MAV_POWER_STATUS_BRICK_VALID")
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_SERVO_VALID = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_SERVO_VALID", "MAV_POWER_STATUS_SERVO_VALID")
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_USB_CONNECTED = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_USB_CONNECTED", "MAV_POWER_STATUS_USB_CONNECTED")
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_PERIPH_OVERCURRENT = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_PERIPH_OVERCURRENT", "MAV_POWER_STATUS_PERIPH_OVERCURRENT")
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT", "MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT")
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_CHANGED = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_CHANGED", "MAV_POWER_STATUS_CHANGED")

f.SERIAL_CONTROL_device = ProtoField.new("device (SERIAL_CONTROL_DEV)", "mavlink_proto.SERIAL_CONTROL_device", ftypes.UINT8, enumEntryName.SERIAL_CONTROL_DEV)
f.SERIAL_CONTROL_flags = ProtoField.new("flags (SERIAL_CONTROL_FLAG)", "mavlink_proto.SERIAL_CONTROL_flags", ftypes.UINT8, nil)
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_REPLY = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_REPLY", "SERIAL_CONTROL_FLAG_REPLY")
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_RESPOND = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_RESPOND", "SERIAL_CONTROL_FLAG_RESPOND")
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_EXCLUSIVE = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_EXCLUSIVE", "SERIAL_CONTROL_FLAG_EXCLUSIVE")
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_BLOCKING = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_BLOCKING", "SERIAL_CONTROL_FLAG_BLOCKING")
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_MULTI = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_MULTI", "SERIAL_CONTROL_FLAG_MULTI")
f.SERIAL_CONTROL_timeout = ProtoField.new("timeout (uint16_t)", "mavlink_proto.SERIAL_CONTROL_timeout", ftypes.UINT16, nil)
f.SERIAL_CONTROL_baudrate = ProtoField.new("baudrate (uint32_t)", "mavlink_proto.SERIAL_CONTROL_baudrate", ftypes.UINT32, nil)
f.SERIAL_CONTROL_count = ProtoField.new("count (uint8_t)", "mavlink_proto.SERIAL_CONTROL_count", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_0", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_1", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_2", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_3", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_4", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_5", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_6", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_7", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_8", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_9", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_10", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_11", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_12", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_13", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_14", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_15", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_16", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_17", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_18", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_19", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_20", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_21", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_22", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_23", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_24", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_25", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_26", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_27", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_28", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_29", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_30", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_31", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_32", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_33", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_34", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_35", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_36", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_37", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_38", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_39", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_40", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_41", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_42", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_43", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_44", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_45", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_46", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_47", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_48", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_49", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_50", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_51", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_52", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_53", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_54", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_55", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_56", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_57", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_58", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_59", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_60", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_61", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_62", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_63", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_64", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_65", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_66", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_67", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_68", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_69", ftypes.UINT8, nil)
f.SERIAL_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SERIAL_CONTROL_target_system", ftypes.UINT8, nil)
f.SERIAL_CONTROL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SERIAL_CONTROL_target_component", ftypes.UINT8, nil)

f.GPS_RTK_time_last_baseline_ms = ProtoField.new("time_last_baseline_ms (uint32_t)", "mavlink_proto.GPS_RTK_time_last_baseline_ms", ftypes.UINT32, nil)
f.GPS_RTK_rtk_receiver_id = ProtoField.new("rtk_receiver_id (uint8_t)", "mavlink_proto.GPS_RTK_rtk_receiver_id", ftypes.UINT8, nil)
f.GPS_RTK_wn = ProtoField.new("wn (uint16_t)", "mavlink_proto.GPS_RTK_wn", ftypes.UINT16, nil)
f.GPS_RTK_tow = ProtoField.new("tow (uint32_t)", "mavlink_proto.GPS_RTK_tow", ftypes.UINT32, nil)
f.GPS_RTK_rtk_health = ProtoField.new("rtk_health (uint8_t)", "mavlink_proto.GPS_RTK_rtk_health", ftypes.UINT8, nil)
f.GPS_RTK_rtk_rate = ProtoField.new("rtk_rate (uint8_t)", "mavlink_proto.GPS_RTK_rtk_rate", ftypes.UINT8, nil)
f.GPS_RTK_nsats = ProtoField.new("nsats (uint8_t)", "mavlink_proto.GPS_RTK_nsats", ftypes.UINT8, nil)
f.GPS_RTK_baseline_coords_type = ProtoField.new("baseline_coords_type (RTK_BASELINE_COORDINATE_SYSTEM)", "mavlink_proto.GPS_RTK_baseline_coords_type", ftypes.UINT8, enumEntryName.RTK_BASELINE_COORDINATE_SYSTEM)
f.GPS_RTK_baseline_a_mm = ProtoField.new("baseline_a_mm (int32_t)", "mavlink_proto.GPS_RTK_baseline_a_mm", ftypes.INT32, nil)
f.GPS_RTK_baseline_b_mm = ProtoField.new("baseline_b_mm (int32_t)", "mavlink_proto.GPS_RTK_baseline_b_mm", ftypes.INT32, nil)
f.GPS_RTK_baseline_c_mm = ProtoField.new("baseline_c_mm (int32_t)", "mavlink_proto.GPS_RTK_baseline_c_mm", ftypes.INT32, nil)
f.GPS_RTK_accuracy = ProtoField.new("accuracy (uint32_t)", "mavlink_proto.GPS_RTK_accuracy", ftypes.UINT32, nil)
f.GPS_RTK_iar_num_hypotheses = ProtoField.new("iar_num_hypotheses (int32_t)", "mavlink_proto.GPS_RTK_iar_num_hypotheses", ftypes.INT32, nil)

f.GPS2_RTK_time_last_baseline_ms = ProtoField.new("time_last_baseline_ms (uint32_t)", "mavlink_proto.GPS2_RTK_time_last_baseline_ms", ftypes.UINT32, nil)
f.GPS2_RTK_rtk_receiver_id = ProtoField.new("rtk_receiver_id (uint8_t)", "mavlink_proto.GPS2_RTK_rtk_receiver_id", ftypes.UINT8, nil)
f.GPS2_RTK_wn = ProtoField.new("wn (uint16_t)", "mavlink_proto.GPS2_RTK_wn", ftypes.UINT16, nil)
f.GPS2_RTK_tow = ProtoField.new("tow (uint32_t)", "mavlink_proto.GPS2_RTK_tow", ftypes.UINT32, nil)
f.GPS2_RTK_rtk_health = ProtoField.new("rtk_health (uint8_t)", "mavlink_proto.GPS2_RTK_rtk_health", ftypes.UINT8, nil)
f.GPS2_RTK_rtk_rate = ProtoField.new("rtk_rate (uint8_t)", "mavlink_proto.GPS2_RTK_rtk_rate", ftypes.UINT8, nil)
f.GPS2_RTK_nsats = ProtoField.new("nsats (uint8_t)", "mavlink_proto.GPS2_RTK_nsats", ftypes.UINT8, nil)
f.GPS2_RTK_baseline_coords_type = ProtoField.new("baseline_coords_type (RTK_BASELINE_COORDINATE_SYSTEM)", "mavlink_proto.GPS2_RTK_baseline_coords_type", ftypes.UINT8, enumEntryName.RTK_BASELINE_COORDINATE_SYSTEM)
f.GPS2_RTK_baseline_a_mm = ProtoField.new("baseline_a_mm (int32_t)", "mavlink_proto.GPS2_RTK_baseline_a_mm", ftypes.INT32, nil)
f.GPS2_RTK_baseline_b_mm = ProtoField.new("baseline_b_mm (int32_t)", "mavlink_proto.GPS2_RTK_baseline_b_mm", ftypes.INT32, nil)
f.GPS2_RTK_baseline_c_mm = ProtoField.new("baseline_c_mm (int32_t)", "mavlink_proto.GPS2_RTK_baseline_c_mm", ftypes.INT32, nil)
f.GPS2_RTK_accuracy = ProtoField.new("accuracy (uint32_t)", "mavlink_proto.GPS2_RTK_accuracy", ftypes.UINT32, nil)
f.GPS2_RTK_iar_num_hypotheses = ProtoField.new("iar_num_hypotheses (int32_t)", "mavlink_proto.GPS2_RTK_iar_num_hypotheses", ftypes.INT32, nil)

f.SCALED_IMU3_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_IMU3_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_IMU3_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.SCALED_IMU3_xacc", ftypes.INT16, nil)
f.SCALED_IMU3_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.SCALED_IMU3_yacc", ftypes.INT16, nil)
f.SCALED_IMU3_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.SCALED_IMU3_zacc", ftypes.INT16, nil)
f.SCALED_IMU3_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.SCALED_IMU3_xgyro", ftypes.INT16, nil)
f.SCALED_IMU3_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.SCALED_IMU3_ygyro", ftypes.INT16, nil)
f.SCALED_IMU3_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.SCALED_IMU3_zgyro", ftypes.INT16, nil)
f.SCALED_IMU3_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.SCALED_IMU3_xmag", ftypes.INT16, nil)
f.SCALED_IMU3_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.SCALED_IMU3_ymag", ftypes.INT16, nil)
f.SCALED_IMU3_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.SCALED_IMU3_zmag", ftypes.INT16, nil)
f.SCALED_IMU3_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_IMU3_temperature", ftypes.INT16, nil)

f.DATA_TRANSMISSION_HANDSHAKE_type = ProtoField.new("type (MAVLINK_DATA_STREAM_TYPE)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_type", ftypes.UINT8, enumEntryName.MAVLINK_DATA_STREAM_TYPE)
f.DATA_TRANSMISSION_HANDSHAKE_size = ProtoField.new("size (uint32_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_size", ftypes.UINT32, nil)
f.DATA_TRANSMISSION_HANDSHAKE_width = ProtoField.new("width (uint16_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_width", ftypes.UINT16, nil)
f.DATA_TRANSMISSION_HANDSHAKE_height = ProtoField.new("height (uint16_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_height", ftypes.UINT16, nil)
f.DATA_TRANSMISSION_HANDSHAKE_packets = ProtoField.new("packets (uint16_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_packets", ftypes.UINT16, nil)
f.DATA_TRANSMISSION_HANDSHAKE_payload = ProtoField.new("payload (uint8_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_payload", ftypes.UINT8, nil)
f.DATA_TRANSMISSION_HANDSHAKE_jpg_quality = ProtoField.new("jpg_quality (uint8_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_jpg_quality", ftypes.UINT8, nil)

f.ENCAPSULATED_DATA_seqnr = ProtoField.new("seqnr (uint16_t)", "mavlink_proto.ENCAPSULATED_DATA_seqnr", ftypes.UINT16, nil)
f.ENCAPSULATED_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_0", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_1", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_2", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_3", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_4", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_5", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_6", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_7", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_8", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_9", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_10", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_11", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_12", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_13", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_14", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_15", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_16", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_17", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_18", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_19", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_20", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_21", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_22", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_23", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_24", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_25", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_26", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_27", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_28", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_29", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_30", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_31", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_32", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_33", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_34", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_35", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_36", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_37", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_38", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_39", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_40", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_41", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_42", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_43", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_44", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_45", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_46", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_47", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_48", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_49", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_50", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_51", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_52", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_53", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_54", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_55", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_56", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_57", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_58", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_59", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_60", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_61", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_62", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_63", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_64", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_65", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_66", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_67", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_68", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_69", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_70", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_71", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_72", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_73", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_74", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_75", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_76", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_77", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_78", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_79", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_80", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_81", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_82", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_83", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_84", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_85", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_86", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_87", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_88", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_89", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_90", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_91", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_92", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_93", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_94", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_95", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_96", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_97", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_98", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_99", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_100", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_101", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_102", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_103", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_104", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_105", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_106", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_107", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_108", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_109", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_110", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_111", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_112", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_113", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_114", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_115", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_116", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_117", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_118", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_119", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_120", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_121", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_122", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_123", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_124", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_125", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_126", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_127", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_128", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_129", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_130", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_131", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_132", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_133", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_134", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_135", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_136", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_137", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_138", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_139", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_140", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_141", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_142", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_143", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_144", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_145", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_146", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_147", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_148", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_149", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_150", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_151", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_152", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_153", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_154", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_155", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_156", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_157", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_158", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_159", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_160", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_161", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_162", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_163", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_164", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_165", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_166", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_167", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_168", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_169", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_170", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_171", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_172", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_173", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_174", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_175", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_176", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_177", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_178", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_179", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_180", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_181", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_182", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_183", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_184", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_185", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_186", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_187", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_188", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_189", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_190", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_191", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_192", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_193", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_194", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_195", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_196", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_197", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_198", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_199", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_200", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_201", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_202", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_203", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_204", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_205", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_206", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_207", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_208", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_209", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_210", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_211", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_212", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_213", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_214", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_215", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_216", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_217", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_218", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_219", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_220 = ProtoField.new("data[220] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_220", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_221 = ProtoField.new("data[221] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_221", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_222 = ProtoField.new("data[222] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_222", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_223 = ProtoField.new("data[223] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_223", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_224 = ProtoField.new("data[224] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_224", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_225 = ProtoField.new("data[225] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_225", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_226 = ProtoField.new("data[226] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_226", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_227 = ProtoField.new("data[227] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_227", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_228 = ProtoField.new("data[228] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_228", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_229 = ProtoField.new("data[229] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_229", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_230 = ProtoField.new("data[230] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_230", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_231 = ProtoField.new("data[231] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_231", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_232 = ProtoField.new("data[232] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_232", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_233 = ProtoField.new("data[233] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_233", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_234 = ProtoField.new("data[234] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_234", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_235 = ProtoField.new("data[235] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_235", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_236 = ProtoField.new("data[236] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_236", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_237 = ProtoField.new("data[237] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_237", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_238 = ProtoField.new("data[238] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_238", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_239 = ProtoField.new("data[239] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_239", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_240 = ProtoField.new("data[240] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_240", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_241 = ProtoField.new("data[241] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_241", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_242 = ProtoField.new("data[242] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_242", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_243 = ProtoField.new("data[243] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_243", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_244 = ProtoField.new("data[244] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_244", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_245 = ProtoField.new("data[245] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_245", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_246 = ProtoField.new("data[246] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_246", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_247 = ProtoField.new("data[247] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_247", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_248 = ProtoField.new("data[248] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_248", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_249 = ProtoField.new("data[249] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_249", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_250 = ProtoField.new("data[250] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_250", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_251 = ProtoField.new("data[251] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_251", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_252 = ProtoField.new("data[252] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_252", ftypes.UINT8, nil)

f.DISTANCE_SENSOR_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.DISTANCE_SENSOR_time_boot_ms", ftypes.UINT32, nil)
f.DISTANCE_SENSOR_min_distance = ProtoField.new("min_distance (uint16_t)", "mavlink_proto.DISTANCE_SENSOR_min_distance", ftypes.UINT16, nil)
f.DISTANCE_SENSOR_max_distance = ProtoField.new("max_distance (uint16_t)", "mavlink_proto.DISTANCE_SENSOR_max_distance", ftypes.UINT16, nil)
f.DISTANCE_SENSOR_current_distance = ProtoField.new("current_distance (uint16_t)", "mavlink_proto.DISTANCE_SENSOR_current_distance", ftypes.UINT16, nil)
f.DISTANCE_SENSOR_type = ProtoField.new("type (MAV_DISTANCE_SENSOR)", "mavlink_proto.DISTANCE_SENSOR_type", ftypes.UINT8, enumEntryName.MAV_DISTANCE_SENSOR)
f.DISTANCE_SENSOR_id = ProtoField.new("id (uint8_t)", "mavlink_proto.DISTANCE_SENSOR_id", ftypes.UINT8, nil)
f.DISTANCE_SENSOR_orientation = ProtoField.new("orientation (MAV_SENSOR_ORIENTATION)", "mavlink_proto.DISTANCE_SENSOR_orientation", ftypes.UINT8, enumEntryName.MAV_SENSOR_ORIENTATION)
f.DISTANCE_SENSOR_covariance = ProtoField.new("covariance (uint8_t)", "mavlink_proto.DISTANCE_SENSOR_covariance", ftypes.UINT8, nil)
f.DISTANCE_SENSOR_horizontal_fov = ProtoField.new("horizontal_fov (float)", "mavlink_proto.DISTANCE_SENSOR_horizontal_fov", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_vertical_fov = ProtoField.new("vertical_fov (float)", "mavlink_proto.DISTANCE_SENSOR_vertical_fov", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_0 = ProtoField.new("quaternion[0] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_0", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_1 = ProtoField.new("quaternion[1] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_1", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_2 = ProtoField.new("quaternion[2] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_2", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_3 = ProtoField.new("quaternion[3] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_3", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_signal_quality = ProtoField.new("signal_quality (uint8_t)", "mavlink_proto.DISTANCE_SENSOR_signal_quality", ftypes.UINT8, nil)

f.TERRAIN_REQUEST_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_REQUEST_lat", ftypes.INT32, nil)
f.TERRAIN_REQUEST_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_REQUEST_lon", ftypes.INT32, nil)
f.TERRAIN_REQUEST_grid_spacing = ProtoField.new("grid_spacing (uint16_t)", "mavlink_proto.TERRAIN_REQUEST_grid_spacing", ftypes.UINT16, nil)
f.TERRAIN_REQUEST_mask = ProtoField.new("mask (uint64_t)", "mavlink_proto.TERRAIN_REQUEST_mask", ftypes.UINT64, nil)

f.TERRAIN_DATA_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_DATA_lat", ftypes.INT32, nil)
f.TERRAIN_DATA_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_DATA_lon", ftypes.INT32, nil)
f.TERRAIN_DATA_grid_spacing = ProtoField.new("grid_spacing (uint16_t)", "mavlink_proto.TERRAIN_DATA_grid_spacing", ftypes.UINT16, nil)
f.TERRAIN_DATA_gridbit = ProtoField.new("gridbit (uint8_t)", "mavlink_proto.TERRAIN_DATA_gridbit", ftypes.UINT8, nil)
f.TERRAIN_DATA_data_0 = ProtoField.new("data[0] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_0", ftypes.INT16, nil)
f.TERRAIN_DATA_data_1 = ProtoField.new("data[1] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_1", ftypes.INT16, nil)
f.TERRAIN_DATA_data_2 = ProtoField.new("data[2] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_2", ftypes.INT16, nil)
f.TERRAIN_DATA_data_3 = ProtoField.new("data[3] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_3", ftypes.INT16, nil)
f.TERRAIN_DATA_data_4 = ProtoField.new("data[4] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_4", ftypes.INT16, nil)
f.TERRAIN_DATA_data_5 = ProtoField.new("data[5] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_5", ftypes.INT16, nil)
f.TERRAIN_DATA_data_6 = ProtoField.new("data[6] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_6", ftypes.INT16, nil)
f.TERRAIN_DATA_data_7 = ProtoField.new("data[7] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_7", ftypes.INT16, nil)
f.TERRAIN_DATA_data_8 = ProtoField.new("data[8] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_8", ftypes.INT16, nil)
f.TERRAIN_DATA_data_9 = ProtoField.new("data[9] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_9", ftypes.INT16, nil)
f.TERRAIN_DATA_data_10 = ProtoField.new("data[10] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_10", ftypes.INT16, nil)
f.TERRAIN_DATA_data_11 = ProtoField.new("data[11] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_11", ftypes.INT16, nil)
f.TERRAIN_DATA_data_12 = ProtoField.new("data[12] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_12", ftypes.INT16, nil)
f.TERRAIN_DATA_data_13 = ProtoField.new("data[13] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_13", ftypes.INT16, nil)
f.TERRAIN_DATA_data_14 = ProtoField.new("data[14] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_14", ftypes.INT16, nil)
f.TERRAIN_DATA_data_15 = ProtoField.new("data[15] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_15", ftypes.INT16, nil)

f.TERRAIN_CHECK_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_CHECK_lat", ftypes.INT32, nil)
f.TERRAIN_CHECK_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_CHECK_lon", ftypes.INT32, nil)

f.TERRAIN_REPORT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_REPORT_lat", ftypes.INT32, nil)
f.TERRAIN_REPORT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_REPORT_lon", ftypes.INT32, nil)
f.TERRAIN_REPORT_spacing = ProtoField.new("spacing (uint16_t)", "mavlink_proto.TERRAIN_REPORT_spacing", ftypes.UINT16, nil)
f.TERRAIN_REPORT_terrain_height = ProtoField.new("terrain_height (float)", "mavlink_proto.TERRAIN_REPORT_terrain_height", ftypes.FLOAT, nil)
f.TERRAIN_REPORT_current_height = ProtoField.new("current_height (float)", "mavlink_proto.TERRAIN_REPORT_current_height", ftypes.FLOAT, nil)
f.TERRAIN_REPORT_pending = ProtoField.new("pending (uint16_t)", "mavlink_proto.TERRAIN_REPORT_pending", ftypes.UINT16, nil)
f.TERRAIN_REPORT_loaded = ProtoField.new("loaded (uint16_t)", "mavlink_proto.TERRAIN_REPORT_loaded", ftypes.UINT16, nil)

f.SCALED_PRESSURE2_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_PRESSURE2_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_PRESSURE2_press_abs = ProtoField.new("press_abs (float)", "mavlink_proto.SCALED_PRESSURE2_press_abs", ftypes.FLOAT, nil)
f.SCALED_PRESSURE2_press_diff = ProtoField.new("press_diff (float)", "mavlink_proto.SCALED_PRESSURE2_press_diff", ftypes.FLOAT, nil)
f.SCALED_PRESSURE2_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_PRESSURE2_temperature", ftypes.INT16, nil)
f.SCALED_PRESSURE2_temperature_press_diff = ProtoField.new("temperature_press_diff (int16_t)", "mavlink_proto.SCALED_PRESSURE2_temperature_press_diff", ftypes.INT16, nil)

f.ATT_POS_MOCAP_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ATT_POS_MOCAP_time_usec", ftypes.UINT64, nil)
f.ATT_POS_MOCAP_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ATT_POS_MOCAP_q_0", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ATT_POS_MOCAP_q_1", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ATT_POS_MOCAP_q_2", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ATT_POS_MOCAP_q_3", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_x = ProtoField.new("x (float)", "mavlink_proto.ATT_POS_MOCAP_x", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_y = ProtoField.new("y (float)", "mavlink_proto.ATT_POS_MOCAP_y", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_z = ProtoField.new("z (float)", "mavlink_proto.ATT_POS_MOCAP_z", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_0", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_1", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_2", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_3", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_4", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_5", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_6", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_7", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_8", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_9", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_10", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_11", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_12", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_13", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_14", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_15", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_16", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_17", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_18", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_19", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_20", ftypes.FLOAT, nil)

f.SET_ACTUATOR_CONTROL_TARGET_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_time_usec", ftypes.UINT64, nil)
f.SET_ACTUATOR_CONTROL_TARGET_group_mlx = ProtoField.new("group_mlx (uint8_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_group_mlx", ftypes.UINT8, nil)
f.SET_ACTUATOR_CONTROL_TARGET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_target_system", ftypes.UINT8, nil)
f.SET_ACTUATOR_CONTROL_TARGET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_target_component", ftypes.UINT8, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_0 = ProtoField.new("controls[0] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_0", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_1 = ProtoField.new("controls[1] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_1", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_2 = ProtoField.new("controls[2] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_2", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_3 = ProtoField.new("controls[3] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_3", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_4 = ProtoField.new("controls[4] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_4", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_5 = ProtoField.new("controls[5] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_5", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_6 = ProtoField.new("controls[6] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_6", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_7 = ProtoField.new("controls[7] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_7", ftypes.FLOAT, nil)

f.ACTUATOR_CONTROL_TARGET_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_time_usec", ftypes.UINT64, nil)
f.ACTUATOR_CONTROL_TARGET_group_mlx = ProtoField.new("group_mlx (uint8_t)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_group_mlx", ftypes.UINT8, nil)
f.ACTUATOR_CONTROL_TARGET_controls_0 = ProtoField.new("controls[0] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_0", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_1 = ProtoField.new("controls[1] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_1", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_2 = ProtoField.new("controls[2] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_2", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_3 = ProtoField.new("controls[3] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_3", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_4 = ProtoField.new("controls[4] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_4", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_5 = ProtoField.new("controls[5] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_5", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_6 = ProtoField.new("controls[6] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_6", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_7 = ProtoField.new("controls[7] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_7", ftypes.FLOAT, nil)

f.ALTITUDE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ALTITUDE_time_usec", ftypes.UINT64, nil)
f.ALTITUDE_altitude_monotonic = ProtoField.new("altitude_monotonic (float)", "mavlink_proto.ALTITUDE_altitude_monotonic", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_amsl = ProtoField.new("altitude_amsl (float)", "mavlink_proto.ALTITUDE_altitude_amsl", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_local = ProtoField.new("altitude_local (float)", "mavlink_proto.ALTITUDE_altitude_local", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_relative = ProtoField.new("altitude_relative (float)", "mavlink_proto.ALTITUDE_altitude_relative", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_terrain = ProtoField.new("altitude_terrain (float)", "mavlink_proto.ALTITUDE_altitude_terrain", ftypes.FLOAT, nil)
f.ALTITUDE_bottom_clearance = ProtoField.new("bottom_clearance (float)", "mavlink_proto.ALTITUDE_bottom_clearance", ftypes.FLOAT, nil)

f.RESOURCE_REQUEST_request_id = ProtoField.new("request_id (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_request_id", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_type = ProtoField.new("uri_type (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_type", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_0 = ProtoField.new("uri[0] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_0", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_1 = ProtoField.new("uri[1] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_1", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_2 = ProtoField.new("uri[2] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_2", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_3 = ProtoField.new("uri[3] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_3", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_4 = ProtoField.new("uri[4] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_4", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_5 = ProtoField.new("uri[5] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_5", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_6 = ProtoField.new("uri[6] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_6", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_7 = ProtoField.new("uri[7] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_7", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_8 = ProtoField.new("uri[8] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_8", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_9 = ProtoField.new("uri[9] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_9", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_10 = ProtoField.new("uri[10] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_10", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_11 = ProtoField.new("uri[11] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_11", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_12 = ProtoField.new("uri[12] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_12", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_13 = ProtoField.new("uri[13] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_13", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_14 = ProtoField.new("uri[14] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_14", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_15 = ProtoField.new("uri[15] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_15", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_16 = ProtoField.new("uri[16] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_16", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_17 = ProtoField.new("uri[17] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_17", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_18 = ProtoField.new("uri[18] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_18", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_19 = ProtoField.new("uri[19] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_19", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_20 = ProtoField.new("uri[20] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_20", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_21 = ProtoField.new("uri[21] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_21", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_22 = ProtoField.new("uri[22] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_22", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_23 = ProtoField.new("uri[23] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_23", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_24 = ProtoField.new("uri[24] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_24", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_25 = ProtoField.new("uri[25] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_25", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_26 = ProtoField.new("uri[26] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_26", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_27 = ProtoField.new("uri[27] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_27", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_28 = ProtoField.new("uri[28] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_28", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_29 = ProtoField.new("uri[29] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_29", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_30 = ProtoField.new("uri[30] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_30", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_31 = ProtoField.new("uri[31] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_31", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_32 = ProtoField.new("uri[32] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_32", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_33 = ProtoField.new("uri[33] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_33", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_34 = ProtoField.new("uri[34] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_34", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_35 = ProtoField.new("uri[35] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_35", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_36 = ProtoField.new("uri[36] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_36", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_37 = ProtoField.new("uri[37] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_37", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_38 = ProtoField.new("uri[38] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_38", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_39 = ProtoField.new("uri[39] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_39", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_40 = ProtoField.new("uri[40] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_40", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_41 = ProtoField.new("uri[41] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_41", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_42 = ProtoField.new("uri[42] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_42", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_43 = ProtoField.new("uri[43] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_43", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_44 = ProtoField.new("uri[44] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_44", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_45 = ProtoField.new("uri[45] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_45", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_46 = ProtoField.new("uri[46] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_46", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_47 = ProtoField.new("uri[47] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_47", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_48 = ProtoField.new("uri[48] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_48", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_49 = ProtoField.new("uri[49] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_49", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_50 = ProtoField.new("uri[50] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_50", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_51 = ProtoField.new("uri[51] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_51", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_52 = ProtoField.new("uri[52] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_52", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_53 = ProtoField.new("uri[53] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_53", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_54 = ProtoField.new("uri[54] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_54", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_55 = ProtoField.new("uri[55] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_55", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_56 = ProtoField.new("uri[56] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_56", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_57 = ProtoField.new("uri[57] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_57", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_58 = ProtoField.new("uri[58] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_58", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_59 = ProtoField.new("uri[59] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_59", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_60 = ProtoField.new("uri[60] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_60", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_61 = ProtoField.new("uri[61] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_61", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_62 = ProtoField.new("uri[62] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_62", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_63 = ProtoField.new("uri[63] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_63", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_64 = ProtoField.new("uri[64] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_64", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_65 = ProtoField.new("uri[65] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_65", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_66 = ProtoField.new("uri[66] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_66", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_67 = ProtoField.new("uri[67] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_67", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_68 = ProtoField.new("uri[68] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_68", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_69 = ProtoField.new("uri[69] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_69", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_70 = ProtoField.new("uri[70] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_70", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_71 = ProtoField.new("uri[71] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_71", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_72 = ProtoField.new("uri[72] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_72", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_73 = ProtoField.new("uri[73] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_73", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_74 = ProtoField.new("uri[74] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_74", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_75 = ProtoField.new("uri[75] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_75", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_76 = ProtoField.new("uri[76] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_76", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_77 = ProtoField.new("uri[77] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_77", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_78 = ProtoField.new("uri[78] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_78", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_79 = ProtoField.new("uri[79] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_79", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_80 = ProtoField.new("uri[80] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_80", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_81 = ProtoField.new("uri[81] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_81", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_82 = ProtoField.new("uri[82] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_82", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_83 = ProtoField.new("uri[83] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_83", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_84 = ProtoField.new("uri[84] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_84", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_85 = ProtoField.new("uri[85] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_85", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_86 = ProtoField.new("uri[86] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_86", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_87 = ProtoField.new("uri[87] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_87", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_88 = ProtoField.new("uri[88] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_88", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_89 = ProtoField.new("uri[89] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_89", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_90 = ProtoField.new("uri[90] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_90", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_91 = ProtoField.new("uri[91] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_91", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_92 = ProtoField.new("uri[92] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_92", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_93 = ProtoField.new("uri[93] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_93", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_94 = ProtoField.new("uri[94] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_94", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_95 = ProtoField.new("uri[95] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_95", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_96 = ProtoField.new("uri[96] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_96", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_97 = ProtoField.new("uri[97] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_97", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_98 = ProtoField.new("uri[98] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_98", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_99 = ProtoField.new("uri[99] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_99", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_100 = ProtoField.new("uri[100] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_100", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_101 = ProtoField.new("uri[101] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_101", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_102 = ProtoField.new("uri[102] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_102", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_103 = ProtoField.new("uri[103] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_103", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_104 = ProtoField.new("uri[104] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_104", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_105 = ProtoField.new("uri[105] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_105", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_106 = ProtoField.new("uri[106] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_106", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_107 = ProtoField.new("uri[107] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_107", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_108 = ProtoField.new("uri[108] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_108", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_109 = ProtoField.new("uri[109] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_109", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_110 = ProtoField.new("uri[110] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_110", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_111 = ProtoField.new("uri[111] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_111", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_112 = ProtoField.new("uri[112] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_112", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_113 = ProtoField.new("uri[113] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_113", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_114 = ProtoField.new("uri[114] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_114", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_115 = ProtoField.new("uri[115] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_115", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_116 = ProtoField.new("uri[116] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_116", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_117 = ProtoField.new("uri[117] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_117", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_118 = ProtoField.new("uri[118] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_118", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_119 = ProtoField.new("uri[119] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_119", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_transfer_type = ProtoField.new("transfer_type (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_transfer_type", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_0 = ProtoField.new("storage[0] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_0", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_1 = ProtoField.new("storage[1] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_1", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_2 = ProtoField.new("storage[2] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_2", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_3 = ProtoField.new("storage[3] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_3", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_4 = ProtoField.new("storage[4] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_4", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_5 = ProtoField.new("storage[5] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_5", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_6 = ProtoField.new("storage[6] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_6", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_7 = ProtoField.new("storage[7] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_7", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_8 = ProtoField.new("storage[8] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_8", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_9 = ProtoField.new("storage[9] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_9", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_10 = ProtoField.new("storage[10] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_10", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_11 = ProtoField.new("storage[11] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_11", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_12 = ProtoField.new("storage[12] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_12", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_13 = ProtoField.new("storage[13] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_13", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_14 = ProtoField.new("storage[14] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_14", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_15 = ProtoField.new("storage[15] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_15", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_16 = ProtoField.new("storage[16] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_16", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_17 = ProtoField.new("storage[17] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_17", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_18 = ProtoField.new("storage[18] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_18", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_19 = ProtoField.new("storage[19] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_19", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_20 = ProtoField.new("storage[20] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_20", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_21 = ProtoField.new("storage[21] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_21", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_22 = ProtoField.new("storage[22] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_22", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_23 = ProtoField.new("storage[23] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_23", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_24 = ProtoField.new("storage[24] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_24", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_25 = ProtoField.new("storage[25] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_25", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_26 = ProtoField.new("storage[26] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_26", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_27 = ProtoField.new("storage[27] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_27", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_28 = ProtoField.new("storage[28] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_28", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_29 = ProtoField.new("storage[29] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_29", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_30 = ProtoField.new("storage[30] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_30", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_31 = ProtoField.new("storage[31] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_31", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_32 = ProtoField.new("storage[32] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_32", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_33 = ProtoField.new("storage[33] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_33", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_34 = ProtoField.new("storage[34] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_34", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_35 = ProtoField.new("storage[35] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_35", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_36 = ProtoField.new("storage[36] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_36", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_37 = ProtoField.new("storage[37] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_37", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_38 = ProtoField.new("storage[38] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_38", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_39 = ProtoField.new("storage[39] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_39", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_40 = ProtoField.new("storage[40] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_40", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_41 = ProtoField.new("storage[41] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_41", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_42 = ProtoField.new("storage[42] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_42", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_43 = ProtoField.new("storage[43] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_43", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_44 = ProtoField.new("storage[44] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_44", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_45 = ProtoField.new("storage[45] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_45", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_46 = ProtoField.new("storage[46] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_46", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_47 = ProtoField.new("storage[47] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_47", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_48 = ProtoField.new("storage[48] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_48", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_49 = ProtoField.new("storage[49] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_49", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_50 = ProtoField.new("storage[50] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_50", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_51 = ProtoField.new("storage[51] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_51", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_52 = ProtoField.new("storage[52] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_52", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_53 = ProtoField.new("storage[53] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_53", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_54 = ProtoField.new("storage[54] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_54", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_55 = ProtoField.new("storage[55] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_55", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_56 = ProtoField.new("storage[56] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_56", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_57 = ProtoField.new("storage[57] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_57", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_58 = ProtoField.new("storage[58] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_58", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_59 = ProtoField.new("storage[59] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_59", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_60 = ProtoField.new("storage[60] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_60", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_61 = ProtoField.new("storage[61] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_61", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_62 = ProtoField.new("storage[62] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_62", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_63 = ProtoField.new("storage[63] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_63", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_64 = ProtoField.new("storage[64] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_64", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_65 = ProtoField.new("storage[65] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_65", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_66 = ProtoField.new("storage[66] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_66", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_67 = ProtoField.new("storage[67] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_67", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_68 = ProtoField.new("storage[68] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_68", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_69 = ProtoField.new("storage[69] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_69", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_70 = ProtoField.new("storage[70] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_70", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_71 = ProtoField.new("storage[71] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_71", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_72 = ProtoField.new("storage[72] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_72", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_73 = ProtoField.new("storage[73] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_73", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_74 = ProtoField.new("storage[74] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_74", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_75 = ProtoField.new("storage[75] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_75", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_76 = ProtoField.new("storage[76] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_76", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_77 = ProtoField.new("storage[77] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_77", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_78 = ProtoField.new("storage[78] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_78", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_79 = ProtoField.new("storage[79] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_79", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_80 = ProtoField.new("storage[80] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_80", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_81 = ProtoField.new("storage[81] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_81", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_82 = ProtoField.new("storage[82] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_82", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_83 = ProtoField.new("storage[83] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_83", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_84 = ProtoField.new("storage[84] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_84", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_85 = ProtoField.new("storage[85] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_85", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_86 = ProtoField.new("storage[86] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_86", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_87 = ProtoField.new("storage[87] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_87", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_88 = ProtoField.new("storage[88] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_88", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_89 = ProtoField.new("storage[89] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_89", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_90 = ProtoField.new("storage[90] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_90", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_91 = ProtoField.new("storage[91] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_91", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_92 = ProtoField.new("storage[92] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_92", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_93 = ProtoField.new("storage[93] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_93", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_94 = ProtoField.new("storage[94] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_94", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_95 = ProtoField.new("storage[95] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_95", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_96 = ProtoField.new("storage[96] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_96", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_97 = ProtoField.new("storage[97] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_97", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_98 = ProtoField.new("storage[98] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_98", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_99 = ProtoField.new("storage[99] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_99", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_100 = ProtoField.new("storage[100] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_100", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_101 = ProtoField.new("storage[101] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_101", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_102 = ProtoField.new("storage[102] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_102", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_103 = ProtoField.new("storage[103] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_103", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_104 = ProtoField.new("storage[104] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_104", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_105 = ProtoField.new("storage[105] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_105", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_106 = ProtoField.new("storage[106] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_106", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_107 = ProtoField.new("storage[107] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_107", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_108 = ProtoField.new("storage[108] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_108", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_109 = ProtoField.new("storage[109] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_109", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_110 = ProtoField.new("storage[110] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_110", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_111 = ProtoField.new("storage[111] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_111", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_112 = ProtoField.new("storage[112] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_112", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_113 = ProtoField.new("storage[113] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_113", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_114 = ProtoField.new("storage[114] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_114", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_115 = ProtoField.new("storage[115] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_115", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_116 = ProtoField.new("storage[116] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_116", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_117 = ProtoField.new("storage[117] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_117", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_118 = ProtoField.new("storage[118] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_118", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_119 = ProtoField.new("storage[119] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_119", ftypes.UINT8, nil)

f.SCALED_PRESSURE3_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_PRESSURE3_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_PRESSURE3_press_abs = ProtoField.new("press_abs (float)", "mavlink_proto.SCALED_PRESSURE3_press_abs", ftypes.FLOAT, nil)
f.SCALED_PRESSURE3_press_diff = ProtoField.new("press_diff (float)", "mavlink_proto.SCALED_PRESSURE3_press_diff", ftypes.FLOAT, nil)
f.SCALED_PRESSURE3_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_PRESSURE3_temperature", ftypes.INT16, nil)
f.SCALED_PRESSURE3_temperature_press_diff = ProtoField.new("temperature_press_diff (int16_t)", "mavlink_proto.SCALED_PRESSURE3_temperature_press_diff", ftypes.INT16, nil)

f.FOLLOW_TARGET_timestamp = ProtoField.new("timestamp (uint64_t)", "mavlink_proto.FOLLOW_TARGET_timestamp", ftypes.UINT64, nil)
f.FOLLOW_TARGET_est_capabilities = ProtoField.new("est_capabilities (uint8_t)", "mavlink_proto.FOLLOW_TARGET_est_capabilities", ftypes.UINT8, nil)
f.FOLLOW_TARGET_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.FOLLOW_TARGET_lat", ftypes.INT32, nil)
f.FOLLOW_TARGET_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.FOLLOW_TARGET_lon", ftypes.INT32, nil)
f.FOLLOW_TARGET_alt = ProtoField.new("alt (float)", "mavlink_proto.FOLLOW_TARGET_alt", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_vel_0 = ProtoField.new("vel[0] (float)", "mavlink_proto.FOLLOW_TARGET_vel_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_vel_1 = ProtoField.new("vel[1] (float)", "mavlink_proto.FOLLOW_TARGET_vel_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_vel_2 = ProtoField.new("vel[2] (float)", "mavlink_proto.FOLLOW_TARGET_vel_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_acc_0 = ProtoField.new("acc[0] (float)", "mavlink_proto.FOLLOW_TARGET_acc_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_acc_1 = ProtoField.new("acc[1] (float)", "mavlink_proto.FOLLOW_TARGET_acc_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_acc_2 = ProtoField.new("acc[2] (float)", "mavlink_proto.FOLLOW_TARGET_acc_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_0 = ProtoField.new("attitude_q[0] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_1 = ProtoField.new("attitude_q[1] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_2 = ProtoField.new("attitude_q[2] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_3 = ProtoField.new("attitude_q[3] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_3", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_rates_0 = ProtoField.new("rates[0] (float)", "mavlink_proto.FOLLOW_TARGET_rates_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_rates_1 = ProtoField.new("rates[1] (float)", "mavlink_proto.FOLLOW_TARGET_rates_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_rates_2 = ProtoField.new("rates[2] (float)", "mavlink_proto.FOLLOW_TARGET_rates_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_position_cov_0 = ProtoField.new("position_cov[0] (float)", "mavlink_proto.FOLLOW_TARGET_position_cov_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_position_cov_1 = ProtoField.new("position_cov[1] (float)", "mavlink_proto.FOLLOW_TARGET_position_cov_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_position_cov_2 = ProtoField.new("position_cov[2] (float)", "mavlink_proto.FOLLOW_TARGET_position_cov_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_custom_state = ProtoField.new("custom_state (uint64_t)", "mavlink_proto.FOLLOW_TARGET_custom_state", ftypes.UINT64, nil)

f.CONTROL_SYSTEM_STATE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.CONTROL_SYSTEM_STATE_time_usec", ftypes.UINT64, nil)
f.CONTROL_SYSTEM_STATE_x_acc = ProtoField.new("x_acc (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_x_acc", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_y_acc = ProtoField.new("y_acc (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_y_acc", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_z_acc = ProtoField.new("z_acc (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_z_acc", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_x_vel = ProtoField.new("x_vel (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_x_vel", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_y_vel = ProtoField.new("y_vel (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_y_vel", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_z_vel = ProtoField.new("z_vel (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_z_vel", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_x_pos = ProtoField.new("x_pos (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_x_pos", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_y_pos = ProtoField.new("y_pos (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_y_pos", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_z_pos = ProtoField.new("z_pos (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_z_pos", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_airspeed = ProtoField.new("airspeed (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_airspeed", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_vel_variance_0 = ProtoField.new("vel_variance[0] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_vel_variance_0", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_vel_variance_1 = ProtoField.new("vel_variance[1] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_vel_variance_1", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_vel_variance_2 = ProtoField.new("vel_variance[2] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_vel_variance_2", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pos_variance_0 = ProtoField.new("pos_variance[0] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pos_variance_0", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pos_variance_1 = ProtoField.new("pos_variance[1] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pos_variance_1", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pos_variance_2 = ProtoField.new("pos_variance[2] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pos_variance_2", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_0", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_1", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_2", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_3", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_roll_rate = ProtoField.new("roll_rate (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_roll_rate", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pitch_rate = ProtoField.new("pitch_rate (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pitch_rate", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_yaw_rate", ftypes.FLOAT, nil)

f.BATTERY_STATUS_id = ProtoField.new("id (uint8_t)", "mavlink_proto.BATTERY_STATUS_id", ftypes.UINT8, nil)
f.BATTERY_STATUS_battery_function = ProtoField.new("battery_function (MAV_BATTERY_FUNCTION)", "mavlink_proto.BATTERY_STATUS_battery_function", ftypes.UINT8, enumEntryName.MAV_BATTERY_FUNCTION)
f.BATTERY_STATUS_type = ProtoField.new("type (MAV_BATTERY_TYPE)", "mavlink_proto.BATTERY_STATUS_type", ftypes.UINT8, enumEntryName.MAV_BATTERY_TYPE)
f.BATTERY_STATUS_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.BATTERY_STATUS_temperature", ftypes.INT16, nil)
f.BATTERY_STATUS_voltages_0 = ProtoField.new("voltages[0] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_0", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_1 = ProtoField.new("voltages[1] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_1", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_2 = ProtoField.new("voltages[2] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_2", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_3 = ProtoField.new("voltages[3] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_3", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_4 = ProtoField.new("voltages[4] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_4", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_5 = ProtoField.new("voltages[5] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_5", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_6 = ProtoField.new("voltages[6] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_6", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_7 = ProtoField.new("voltages[7] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_7", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_8 = ProtoField.new("voltages[8] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_8", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_9 = ProtoField.new("voltages[9] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_9", ftypes.UINT16, nil)
f.BATTERY_STATUS_current_battery = ProtoField.new("current_battery (int16_t)", "mavlink_proto.BATTERY_STATUS_current_battery", ftypes.INT16, nil)
f.BATTERY_STATUS_current_consumed = ProtoField.new("current_consumed (int32_t)", "mavlink_proto.BATTERY_STATUS_current_consumed", ftypes.INT32, nil)
f.BATTERY_STATUS_energy_consumed = ProtoField.new("energy_consumed (int32_t)", "mavlink_proto.BATTERY_STATUS_energy_consumed", ftypes.INT32, nil)
f.BATTERY_STATUS_battery_remaining = ProtoField.new("battery_remaining (int8_t)", "mavlink_proto.BATTERY_STATUS_battery_remaining", ftypes.INT8, nil)
f.BATTERY_STATUS_time_remaining = ProtoField.new("time_remaining (int32_t)", "mavlink_proto.BATTERY_STATUS_time_remaining", ftypes.INT32, nil)
f.BATTERY_STATUS_charge_state = ProtoField.new("charge_state (MAV_BATTERY_CHARGE_STATE)", "mavlink_proto.BATTERY_STATUS_charge_state", ftypes.UINT8, enumEntryName.MAV_BATTERY_CHARGE_STATE)
f.BATTERY_STATUS_voltages_ext_0 = ProtoField.new("voltages_ext[0] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_0", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_ext_1 = ProtoField.new("voltages_ext[1] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_1", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_ext_2 = ProtoField.new("voltages_ext[2] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_2", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_ext_3 = ProtoField.new("voltages_ext[3] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_3", ftypes.UINT16, nil)
f.BATTERY_STATUS_mode = ProtoField.new("mode (MAV_BATTERY_MODE)", "mavlink_proto.BATTERY_STATUS_mode", ftypes.UINT8, enumEntryName.MAV_BATTERY_MODE)
f.BATTERY_STATUS_fault_bitmask = ProtoField.new("fault_bitmask (MAV_BATTERY_FAULT)", "mavlink_proto.BATTERY_STATUS_fault_bitmask", ftypes.UINT32, nil)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_DEEP_DISCHARGE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_DEEP_DISCHARGE", "MAV_BATTERY_FAULT_DEEP_DISCHARGE")
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_SPIKES = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_SPIKES", "MAV_BATTERY_FAULT_SPIKES")
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_CELL_FAIL = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_CELL_FAIL", "MAV_BATTERY_FAULT_CELL_FAIL")
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_OVER_CURRENT = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_OVER_CURRENT", "MAV_BATTERY_FAULT_OVER_CURRENT")
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_OVER_TEMPERATURE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_OVER_TEMPERATURE", "MAV_BATTERY_FAULT_OVER_TEMPERATURE")
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_UNDER_TEMPERATURE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_UNDER_TEMPERATURE", "MAV_BATTERY_FAULT_UNDER_TEMPERATURE")
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE", "MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE")
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE", "MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE")
f.BATTERY_STATUS_fault_bitmask_flagBATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION", "BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION")

f.AUTOPILOT_VERSION_capabilities = ProtoField.new("capabilities (MAV_PROTOCOL_CAPABILITY)", "mavlink_proto.AUTOPILOT_VERSION_capabilities", ftypes.UINT64, nil)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT", "MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT", "MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_INT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_INT", "MAV_PROTOCOL_CAPABILITY_MISSION_INT")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_COMMAND_INT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_COMMAND_INT", "MAV_PROTOCOL_CAPABILITY_COMMAND_INT")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE", "MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_FTP = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_FTP", "MAV_PROTOCOL_CAPABILITY_FTP")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET", "MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED", "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT", "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_TERRAIN = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_TERRAIN", "MAV_PROTOCOL_CAPABILITY_TERRAIN")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET", "MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION", "MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION", "MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MAVLINK2 = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MAVLINK2", "MAV_PROTOCOL_CAPABILITY_MAVLINK2")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_FENCE = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_FENCE", "MAV_PROTOCOL_CAPABILITY_MISSION_FENCE")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_RALLY = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_RALLY", "MAV_PROTOCOL_CAPABILITY_MISSION_RALLY")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_RESERVED2 = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_RESERVED2", "MAV_PROTOCOL_CAPABILITY_RESERVED2")
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST", "MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST")
f.AUTOPILOT_VERSION_flight_sw_version = ProtoField.new("flight_sw_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_sw_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_middleware_sw_version = ProtoField.new("middleware_sw_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_sw_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_os_sw_version = ProtoField.new("os_sw_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_os_sw_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_board_version = ProtoField.new("board_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_board_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_flight_custom_version_0 = ProtoField.new("flight_custom_version[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_1 = ProtoField.new("flight_custom_version[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_2 = ProtoField.new("flight_custom_version[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_3 = ProtoField.new("flight_custom_version[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_4 = ProtoField.new("flight_custom_version[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_5 = ProtoField.new("flight_custom_version[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_6 = ProtoField.new("flight_custom_version[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_7 = ProtoField.new("flight_custom_version[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_0 = ProtoField.new("middleware_custom_version[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_1 = ProtoField.new("middleware_custom_version[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_2 = ProtoField.new("middleware_custom_version[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_3 = ProtoField.new("middleware_custom_version[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_4 = ProtoField.new("middleware_custom_version[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_5 = ProtoField.new("middleware_custom_version[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_6 = ProtoField.new("middleware_custom_version[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_7 = ProtoField.new("middleware_custom_version[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_0 = ProtoField.new("os_custom_version[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_1 = ProtoField.new("os_custom_version[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_2 = ProtoField.new("os_custom_version[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_3 = ProtoField.new("os_custom_version[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_4 = ProtoField.new("os_custom_version[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_5 = ProtoField.new("os_custom_version[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_6 = ProtoField.new("os_custom_version[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_7 = ProtoField.new("os_custom_version[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_vendor_id = ProtoField.new("vendor_id (uint16_t)", "mavlink_proto.AUTOPILOT_VERSION_vendor_id", ftypes.UINT16, nil)
f.AUTOPILOT_VERSION_product_id = ProtoField.new("product_id (uint16_t)", "mavlink_proto.AUTOPILOT_VERSION_product_id", ftypes.UINT16, nil)
f.AUTOPILOT_VERSION_uid = ProtoField.new("uid (uint64_t)", "mavlink_proto.AUTOPILOT_VERSION_uid", ftypes.UINT64, nil)
f.AUTOPILOT_VERSION_uid2_0 = ProtoField.new("uid2[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_1 = ProtoField.new("uid2[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_2 = ProtoField.new("uid2[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_3 = ProtoField.new("uid2[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_4 = ProtoField.new("uid2[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_5 = ProtoField.new("uid2[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_6 = ProtoField.new("uid2[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_7 = ProtoField.new("uid2[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_8 = ProtoField.new("uid2[8] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_8", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_9 = ProtoField.new("uid2[9] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_9", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_10 = ProtoField.new("uid2[10] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_10", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_11 = ProtoField.new("uid2[11] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_11", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_12 = ProtoField.new("uid2[12] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_12", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_13 = ProtoField.new("uid2[13] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_13", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_14 = ProtoField.new("uid2[14] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_14", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_15 = ProtoField.new("uid2[15] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_15", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_16 = ProtoField.new("uid2[16] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_16", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_17 = ProtoField.new("uid2[17] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_17", ftypes.UINT8, nil)

f.LANDING_TARGET_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.LANDING_TARGET_time_usec", ftypes.UINT64, nil)
f.LANDING_TARGET_target_num = ProtoField.new("target_num (uint8_t)", "mavlink_proto.LANDING_TARGET_target_num", ftypes.UINT8, nil)
f.LANDING_TARGET_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.LANDING_TARGET_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.LANDING_TARGET_angle_x = ProtoField.new("angle_x (float)", "mavlink_proto.LANDING_TARGET_angle_x", ftypes.FLOAT, nil)
f.LANDING_TARGET_angle_y = ProtoField.new("angle_y (float)", "mavlink_proto.LANDING_TARGET_angle_y", ftypes.FLOAT, nil)
f.LANDING_TARGET_distance = ProtoField.new("distance (float)", "mavlink_proto.LANDING_TARGET_distance", ftypes.FLOAT, nil)
f.LANDING_TARGET_size_x = ProtoField.new("size_x (float)", "mavlink_proto.LANDING_TARGET_size_x", ftypes.FLOAT, nil)
f.LANDING_TARGET_size_y = ProtoField.new("size_y (float)", "mavlink_proto.LANDING_TARGET_size_y", ftypes.FLOAT, nil)
f.LANDING_TARGET_x = ProtoField.new("x (float)", "mavlink_proto.LANDING_TARGET_x", ftypes.FLOAT, nil)
f.LANDING_TARGET_y = ProtoField.new("y (float)", "mavlink_proto.LANDING_TARGET_y", ftypes.FLOAT, nil)
f.LANDING_TARGET_z = ProtoField.new("z (float)", "mavlink_proto.LANDING_TARGET_z", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.LANDING_TARGET_q_0", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.LANDING_TARGET_q_1", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.LANDING_TARGET_q_2", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.LANDING_TARGET_q_3", ftypes.FLOAT, nil)
f.LANDING_TARGET_type = ProtoField.new("type (LANDING_TARGET_TYPE)", "mavlink_proto.LANDING_TARGET_type", ftypes.UINT8, enumEntryName.LANDING_TARGET_TYPE)
f.LANDING_TARGET_position_valid = ProtoField.new("position_valid (uint8_t)", "mavlink_proto.LANDING_TARGET_position_valid", ftypes.UINT8, nil)

f.FENCE_STATUS_breach_status = ProtoField.new("breach_status (uint8_t)", "mavlink_proto.FENCE_STATUS_breach_status", ftypes.UINT8, nil)
f.FENCE_STATUS_breach_count = ProtoField.new("breach_count (uint16_t)", "mavlink_proto.FENCE_STATUS_breach_count", ftypes.UINT16, nil)
f.FENCE_STATUS_breach_type = ProtoField.new("breach_type (FENCE_BREACH)", "mavlink_proto.FENCE_STATUS_breach_type", ftypes.UINT8, enumEntryName.FENCE_BREACH)
f.FENCE_STATUS_breach_time = ProtoField.new("breach_time (uint32_t)", "mavlink_proto.FENCE_STATUS_breach_time", ftypes.UINT32, nil)
f.FENCE_STATUS_breach_mitigation = ProtoField.new("breach_mitigation (FENCE_MITIGATE)", "mavlink_proto.FENCE_STATUS_breach_mitigation", ftypes.UINT8, enumEntryName.FENCE_MITIGATE)

f.MAG_CAL_REPORT_compass_id = ProtoField.new("compass_id (uint8_t)", "mavlink_proto.MAG_CAL_REPORT_compass_id", ftypes.UINT8, nil)
f.MAG_CAL_REPORT_cal_mask = ProtoField.new("cal_mask (uint8_t)", "mavlink_proto.MAG_CAL_REPORT_cal_mask", ftypes.UINT8, nil)
f.MAG_CAL_REPORT_cal_status = ProtoField.new("cal_status (MAG_CAL_STATUS)", "mavlink_proto.MAG_CAL_REPORT_cal_status", ftypes.UINT8, enumEntryName.MAG_CAL_STATUS)
f.MAG_CAL_REPORT_autosaved = ProtoField.new("autosaved (uint8_t)", "mavlink_proto.MAG_CAL_REPORT_autosaved", ftypes.UINT8, nil)
f.MAG_CAL_REPORT_fitness = ProtoField.new("fitness (float)", "mavlink_proto.MAG_CAL_REPORT_fitness", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_ofs_x = ProtoField.new("ofs_x (float)", "mavlink_proto.MAG_CAL_REPORT_ofs_x", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_ofs_y = ProtoField.new("ofs_y (float)", "mavlink_proto.MAG_CAL_REPORT_ofs_y", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_ofs_z = ProtoField.new("ofs_z (float)", "mavlink_proto.MAG_CAL_REPORT_ofs_z", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_diag_x = ProtoField.new("diag_x (float)", "mavlink_proto.MAG_CAL_REPORT_diag_x", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_diag_y = ProtoField.new("diag_y (float)", "mavlink_proto.MAG_CAL_REPORT_diag_y", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_diag_z = ProtoField.new("diag_z (float)", "mavlink_proto.MAG_CAL_REPORT_diag_z", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_offdiag_x = ProtoField.new("offdiag_x (float)", "mavlink_proto.MAG_CAL_REPORT_offdiag_x", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_offdiag_y = ProtoField.new("offdiag_y (float)", "mavlink_proto.MAG_CAL_REPORT_offdiag_y", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_offdiag_z = ProtoField.new("offdiag_z (float)", "mavlink_proto.MAG_CAL_REPORT_offdiag_z", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_orientation_confidence = ProtoField.new("orientation_confidence (float)", "mavlink_proto.MAG_CAL_REPORT_orientation_confidence", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_old_orientation = ProtoField.new("old_orientation (MAV_SENSOR_ORIENTATION)", "mavlink_proto.MAG_CAL_REPORT_old_orientation", ftypes.UINT8, enumEntryName.MAV_SENSOR_ORIENTATION)
f.MAG_CAL_REPORT_new_orientation = ProtoField.new("new_orientation (MAV_SENSOR_ORIENTATION)", "mavlink_proto.MAG_CAL_REPORT_new_orientation", ftypes.UINT8, enumEntryName.MAV_SENSOR_ORIENTATION)
f.MAG_CAL_REPORT_scale_factor = ProtoField.new("scale_factor (float)", "mavlink_proto.MAG_CAL_REPORT_scale_factor", ftypes.FLOAT, nil)

f.EFI_STATUS_health = ProtoField.new("health (uint8_t)", "mavlink_proto.EFI_STATUS_health", ftypes.UINT8, nil)
f.EFI_STATUS_ecu_index = ProtoField.new("ecu_index (float)", "mavlink_proto.EFI_STATUS_ecu_index", ftypes.FLOAT, nil)
f.EFI_STATUS_rpm = ProtoField.new("rpm (float)", "mavlink_proto.EFI_STATUS_rpm", ftypes.FLOAT, nil)
f.EFI_STATUS_fuel_consumed = ProtoField.new("fuel_consumed (float)", "mavlink_proto.EFI_STATUS_fuel_consumed", ftypes.FLOAT, nil)
f.EFI_STATUS_fuel_flow = ProtoField.new("fuel_flow (float)", "mavlink_proto.EFI_STATUS_fuel_flow", ftypes.FLOAT, nil)
f.EFI_STATUS_engine_load = ProtoField.new("engine_load (float)", "mavlink_proto.EFI_STATUS_engine_load", ftypes.FLOAT, nil)
f.EFI_STATUS_throttle_position = ProtoField.new("throttle_position (float)", "mavlink_proto.EFI_STATUS_throttle_position", ftypes.FLOAT, nil)
f.EFI_STATUS_spark_dwell_time = ProtoField.new("spark_dwell_time (float)", "mavlink_proto.EFI_STATUS_spark_dwell_time", ftypes.FLOAT, nil)
f.EFI_STATUS_barometric_pressure = ProtoField.new("barometric_pressure (float)", "mavlink_proto.EFI_STATUS_barometric_pressure", ftypes.FLOAT, nil)
f.EFI_STATUS_intake_manifold_pressure = ProtoField.new("intake_manifold_pressure (float)", "mavlink_proto.EFI_STATUS_intake_manifold_pressure", ftypes.FLOAT, nil)
f.EFI_STATUS_intake_manifold_temperature = ProtoField.new("intake_manifold_temperature (float)", "mavlink_proto.EFI_STATUS_intake_manifold_temperature", ftypes.FLOAT, nil)
f.EFI_STATUS_cylinder_head_temperature = ProtoField.new("cylinder_head_temperature (float)", "mavlink_proto.EFI_STATUS_cylinder_head_temperature", ftypes.FLOAT, nil)
f.EFI_STATUS_ignition_timing = ProtoField.new("ignition_timing (float)", "mavlink_proto.EFI_STATUS_ignition_timing", ftypes.FLOAT, nil)
f.EFI_STATUS_injection_time = ProtoField.new("injection_time (float)", "mavlink_proto.EFI_STATUS_injection_time", ftypes.FLOAT, nil)
f.EFI_STATUS_exhaust_gas_temperature = ProtoField.new("exhaust_gas_temperature (float)", "mavlink_proto.EFI_STATUS_exhaust_gas_temperature", ftypes.FLOAT, nil)
f.EFI_STATUS_throttle_out = ProtoField.new("throttle_out (float)", "mavlink_proto.EFI_STATUS_throttle_out", ftypes.FLOAT, nil)
f.EFI_STATUS_pt_compensation = ProtoField.new("pt_compensation (float)", "mavlink_proto.EFI_STATUS_pt_compensation", ftypes.FLOAT, nil)
f.EFI_STATUS_ignition_voltage = ProtoField.new("ignition_voltage (float)", "mavlink_proto.EFI_STATUS_ignition_voltage", ftypes.FLOAT, nil)
f.EFI_STATUS_fuel_pressure = ProtoField.new("fuel_pressure (float)", "mavlink_proto.EFI_STATUS_fuel_pressure", ftypes.FLOAT, nil)

f.ESTIMATOR_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ESTIMATOR_STATUS_time_usec", ftypes.UINT64, nil)
f.ESTIMATOR_STATUS_flags = ProtoField.new("flags (ESTIMATOR_STATUS_FLAGS)", "mavlink_proto.ESTIMATOR_STATUS_flags", ftypes.UINT16, nil)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_ATTITUDE = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_ATTITUDE", "ESTIMATOR_ATTITUDE")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_VELOCITY_HORIZ = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_VELOCITY_HORIZ", "ESTIMATOR_VELOCITY_HORIZ")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_VELOCITY_VERT = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_VELOCITY_VERT", "ESTIMATOR_VELOCITY_VERT")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_HORIZ_REL", "ESTIMATOR_POS_HORIZ_REL")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_HORIZ_ABS", "ESTIMATOR_POS_HORIZ_ABS")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_VERT_ABS = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_VERT_ABS", "ESTIMATOR_POS_VERT_ABS")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_VERT_AGL = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_VERT_AGL", "ESTIMATOR_POS_VERT_AGL")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_CONST_POS_MODE = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_CONST_POS_MODE", "ESTIMATOR_CONST_POS_MODE")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_PRED_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_PRED_POS_HORIZ_REL", "ESTIMATOR_PRED_POS_HORIZ_REL")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_PRED_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_PRED_POS_HORIZ_ABS", "ESTIMATOR_PRED_POS_HORIZ_ABS")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_GPS_GLITCH = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_GPS_GLITCH", "ESTIMATOR_GPS_GLITCH")
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_ACCEL_ERROR = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_ACCEL_ERROR", "ESTIMATOR_ACCEL_ERROR")
f.ESTIMATOR_STATUS_vel_ratio = ProtoField.new("vel_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_vel_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_horiz_ratio = ProtoField.new("pos_horiz_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_horiz_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_vert_ratio = ProtoField.new("pos_vert_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_vert_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_mag_ratio = ProtoField.new("mag_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_mag_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_hagl_ratio = ProtoField.new("hagl_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_hagl_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_tas_ratio = ProtoField.new("tas_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_tas_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_horiz_accuracy = ProtoField.new("pos_horiz_accuracy (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_horiz_accuracy", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_vert_accuracy = ProtoField.new("pos_vert_accuracy (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_vert_accuracy", ftypes.FLOAT, nil)

f.WIND_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.WIND_COV_time_usec", ftypes.UINT64, nil)
f.WIND_COV_wind_x = ProtoField.new("wind_x (float)", "mavlink_proto.WIND_COV_wind_x", ftypes.FLOAT, nil)
f.WIND_COV_wind_y = ProtoField.new("wind_y (float)", "mavlink_proto.WIND_COV_wind_y", ftypes.FLOAT, nil)
f.WIND_COV_wind_z = ProtoField.new("wind_z (float)", "mavlink_proto.WIND_COV_wind_z", ftypes.FLOAT, nil)
f.WIND_COV_var_horiz = ProtoField.new("var_horiz (float)", "mavlink_proto.WIND_COV_var_horiz", ftypes.FLOAT, nil)
f.WIND_COV_var_vert = ProtoField.new("var_vert (float)", "mavlink_proto.WIND_COV_var_vert", ftypes.FLOAT, nil)
f.WIND_COV_wind_alt = ProtoField.new("wind_alt (float)", "mavlink_proto.WIND_COV_wind_alt", ftypes.FLOAT, nil)
f.WIND_COV_horiz_accuracy = ProtoField.new("horiz_accuracy (float)", "mavlink_proto.WIND_COV_horiz_accuracy", ftypes.FLOAT, nil)
f.WIND_COV_vert_accuracy = ProtoField.new("vert_accuracy (float)", "mavlink_proto.WIND_COV_vert_accuracy", ftypes.FLOAT, nil)

f.GPS_INPUT_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS_INPUT_time_usec", ftypes.UINT64, nil)
f.GPS_INPUT_gps_id = ProtoField.new("gps_id (uint8_t)", "mavlink_proto.GPS_INPUT_gps_id", ftypes.UINT8, nil)
f.GPS_INPUT_ignore_flags = ProtoField.new("ignore_flags (GPS_INPUT_IGNORE_FLAGS)", "mavlink_proto.GPS_INPUT_ignore_flags", ftypes.UINT16, nil)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_ALT = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_ALT", "GPS_INPUT_IGNORE_FLAG_ALT")
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_HDOP = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_HDOP", "GPS_INPUT_IGNORE_FLAG_HDOP")
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VDOP = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VDOP", "GPS_INPUT_IGNORE_FLAG_VDOP")
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VEL_HORIZ = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VEL_HORIZ", "GPS_INPUT_IGNORE_FLAG_VEL_HORIZ")
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VEL_VERT = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VEL_VERT", "GPS_INPUT_IGNORE_FLAG_VEL_VERT")
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY", "GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY")
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY", "GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY")
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY", "GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY")
f.GPS_INPUT_time_week_ms = ProtoField.new("time_week_ms (uint32_t)", "mavlink_proto.GPS_INPUT_time_week_ms", ftypes.UINT32, nil)
f.GPS_INPUT_time_week = ProtoField.new("time_week (uint16_t)", "mavlink_proto.GPS_INPUT_time_week", ftypes.UINT16, nil)
f.GPS_INPUT_fix_type = ProtoField.new("fix_type (uint8_t)", "mavlink_proto.GPS_INPUT_fix_type", ftypes.UINT8, nil)
f.GPS_INPUT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GPS_INPUT_lat", ftypes.INT32, nil)
f.GPS_INPUT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GPS_INPUT_lon", ftypes.INT32, nil)
f.GPS_INPUT_alt = ProtoField.new("alt (float)", "mavlink_proto.GPS_INPUT_alt", ftypes.FLOAT, nil)
f.GPS_INPUT_hdop = ProtoField.new("hdop (float)", "mavlink_proto.GPS_INPUT_hdop", ftypes.FLOAT, nil)
f.GPS_INPUT_vdop = ProtoField.new("vdop (float)", "mavlink_proto.GPS_INPUT_vdop", ftypes.FLOAT, nil)
f.GPS_INPUT_vn = ProtoField.new("vn (float)", "mavlink_proto.GPS_INPUT_vn", ftypes.FLOAT, nil)
f.GPS_INPUT_ve = ProtoField.new("ve (float)", "mavlink_proto.GPS_INPUT_ve", ftypes.FLOAT, nil)
f.GPS_INPUT_vd = ProtoField.new("vd (float)", "mavlink_proto.GPS_INPUT_vd", ftypes.FLOAT, nil)
f.GPS_INPUT_speed_accuracy = ProtoField.new("speed_accuracy (float)", "mavlink_proto.GPS_INPUT_speed_accuracy", ftypes.FLOAT, nil)
f.GPS_INPUT_horiz_accuracy = ProtoField.new("horiz_accuracy (float)", "mavlink_proto.GPS_INPUT_horiz_accuracy", ftypes.FLOAT, nil)
f.GPS_INPUT_vert_accuracy = ProtoField.new("vert_accuracy (float)", "mavlink_proto.GPS_INPUT_vert_accuracy", ftypes.FLOAT, nil)
f.GPS_INPUT_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS_INPUT_satellites_visible", ftypes.UINT8, nil)
f.GPS_INPUT_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.GPS_INPUT_yaw", ftypes.UINT16, nil)

f.GPS_RTCM_DATA_flags = ProtoField.new("flags (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_flags", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_len = ProtoField.new("len (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_len", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_0", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_1", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_2", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_3", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_4", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_5", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_6", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_7", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_8", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_9", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_10", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_11", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_12", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_13", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_14", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_15", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_16", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_17", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_18", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_19", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_20", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_21", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_22", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_23", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_24", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_25", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_26", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_27", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_28", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_29", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_30", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_31", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_32", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_33", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_34", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_35", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_36", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_37", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_38", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_39", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_40", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_41", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_42", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_43", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_44", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_45", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_46", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_47", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_48", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_49", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_50", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_51", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_52", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_53", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_54", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_55", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_56", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_57", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_58", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_59", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_60", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_61", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_62", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_63", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_64", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_65", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_66", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_67", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_68", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_69", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_70", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_71", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_72", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_73", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_74", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_75", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_76", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_77", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_78", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_79", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_80", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_81", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_82", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_83", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_84", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_85", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_86", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_87", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_88", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_89", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_90", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_91", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_92", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_93", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_94", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_95", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_96", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_97", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_98", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_99", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_100", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_101", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_102", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_103", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_104", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_105", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_106", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_107", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_108", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_109", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_110", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_111", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_112", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_113", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_114", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_115", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_116", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_117", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_118", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_119", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_120", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_121", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_122", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_123", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_124", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_125", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_126", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_127", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_128", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_129", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_130", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_131", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_132", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_133", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_134", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_135", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_136", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_137", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_138", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_139", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_140", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_141", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_142", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_143", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_144", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_145", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_146", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_147", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_148", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_149", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_150", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_151", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_152", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_153", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_154", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_155", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_156", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_157", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_158", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_159", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_160", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_161", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_162", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_163", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_164", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_165", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_166", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_167", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_168", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_169", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_170", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_171", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_172", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_173", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_174", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_175", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_176", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_177", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_178", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_179", ftypes.UINT8, nil)

f.HIGH_LATENCY_base_mode = ProtoField.new("base_mode (MAV_MODE_FLAG)", "mavlink_proto.HIGH_LATENCY_base_mode", ftypes.UINT8, nil)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED")
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_TEST_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_TEST_ENABLED", "MAV_MODE_FLAG_TEST_ENABLED")
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_AUTO_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_AUTO_ENABLED", "MAV_MODE_FLAG_AUTO_ENABLED")
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_GUIDED_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_GUIDED_ENABLED", "MAV_MODE_FLAG_GUIDED_ENABLED")
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_STABILIZE_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_STABILIZE_ENABLED", "MAV_MODE_FLAG_STABILIZE_ENABLED")
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_HIL_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_HIL_ENABLED", "MAV_MODE_FLAG_HIL_ENABLED")
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED")
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_SAFETY_ARMED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_SAFETY_ARMED", "MAV_MODE_FLAG_SAFETY_ARMED")
f.HIGH_LATENCY_custom_mode = ProtoField.new("custom_mode (uint32_t)", "mavlink_proto.HIGH_LATENCY_custom_mode", ftypes.UINT32, nil)
f.HIGH_LATENCY_landed_state = ProtoField.new("landed_state (MAV_LANDED_STATE)", "mavlink_proto.HIGH_LATENCY_landed_state", ftypes.UINT8, enumEntryName.MAV_LANDED_STATE)
f.HIGH_LATENCY_roll = ProtoField.new("roll (int16_t)", "mavlink_proto.HIGH_LATENCY_roll", ftypes.INT16, nil)
f.HIGH_LATENCY_pitch = ProtoField.new("pitch (int16_t)", "mavlink_proto.HIGH_LATENCY_pitch", ftypes.INT16, nil)
f.HIGH_LATENCY_heading = ProtoField.new("heading (uint16_t)", "mavlink_proto.HIGH_LATENCY_heading", ftypes.UINT16, nil)
f.HIGH_LATENCY_throttle = ProtoField.new("throttle (int8_t)", "mavlink_proto.HIGH_LATENCY_throttle", ftypes.INT8, nil)
f.HIGH_LATENCY_heading_sp = ProtoField.new("heading_sp (int16_t)", "mavlink_proto.HIGH_LATENCY_heading_sp", ftypes.INT16, nil)
f.HIGH_LATENCY_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.HIGH_LATENCY_latitude", ftypes.INT32, nil)
f.HIGH_LATENCY_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.HIGH_LATENCY_longitude", ftypes.INT32, nil)
f.HIGH_LATENCY_altitude_amsl = ProtoField.new("altitude_amsl (int16_t)", "mavlink_proto.HIGH_LATENCY_altitude_amsl", ftypes.INT16, nil)
f.HIGH_LATENCY_altitude_sp = ProtoField.new("altitude_sp (int16_t)", "mavlink_proto.HIGH_LATENCY_altitude_sp", ftypes.INT16, nil)
f.HIGH_LATENCY_airspeed = ProtoField.new("airspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY_airspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY_airspeed_sp = ProtoField.new("airspeed_sp (uint8_t)", "mavlink_proto.HIGH_LATENCY_airspeed_sp", ftypes.UINT8, nil)
f.HIGH_LATENCY_groundspeed = ProtoField.new("groundspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY_groundspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY_climb_rate = ProtoField.new("climb_rate (int8_t)", "mavlink_proto.HIGH_LATENCY_climb_rate", ftypes.INT8, nil)
f.HIGH_LATENCY_gps_nsat = ProtoField.new("gps_nsat (uint8_t)", "mavlink_proto.HIGH_LATENCY_gps_nsat", ftypes.UINT8, nil)
f.HIGH_LATENCY_gps_fix_type = ProtoField.new("gps_fix_type (GPS_FIX_TYPE)", "mavlink_proto.HIGH_LATENCY_gps_fix_type", ftypes.UINT8, enumEntryName.GPS_FIX_TYPE)
f.HIGH_LATENCY_battery_remaining = ProtoField.new("battery_remaining (uint8_t)", "mavlink_proto.HIGH_LATENCY_battery_remaining", ftypes.UINT8, nil)
f.HIGH_LATENCY_temperature = ProtoField.new("temperature (int8_t)", "mavlink_proto.HIGH_LATENCY_temperature", ftypes.INT8, nil)
f.HIGH_LATENCY_temperature_air = ProtoField.new("temperature_air (int8_t)", "mavlink_proto.HIGH_LATENCY_temperature_air", ftypes.INT8, nil)
f.HIGH_LATENCY_failsafe = ProtoField.new("failsafe (uint8_t)", "mavlink_proto.HIGH_LATENCY_failsafe", ftypes.UINT8, nil)
f.HIGH_LATENCY_wp_num = ProtoField.new("wp_num (uint8_t)", "mavlink_proto.HIGH_LATENCY_wp_num", ftypes.UINT8, nil)
f.HIGH_LATENCY_wp_distance = ProtoField.new("wp_distance (uint16_t)", "mavlink_proto.HIGH_LATENCY_wp_distance", ftypes.UINT16, nil)

f.HIGH_LATENCY2_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.HIGH_LATENCY2_timestamp", ftypes.UINT32, nil)
f.HIGH_LATENCY2_type = ProtoField.new("type (MAV_TYPE)", "mavlink_proto.HIGH_LATENCY2_type", ftypes.UINT8, enumEntryName.MAV_TYPE)
f.HIGH_LATENCY2_autopilot = ProtoField.new("autopilot (MAV_AUTOPILOT)", "mavlink_proto.HIGH_LATENCY2_autopilot", ftypes.UINT8, enumEntryName.MAV_AUTOPILOT)
f.HIGH_LATENCY2_custom_mode = ProtoField.new("custom_mode (uint16_t)", "mavlink_proto.HIGH_LATENCY2_custom_mode", ftypes.UINT16, nil)
f.HIGH_LATENCY2_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.HIGH_LATENCY2_latitude", ftypes.INT32, nil)
f.HIGH_LATENCY2_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.HIGH_LATENCY2_longitude", ftypes.INT32, nil)
f.HIGH_LATENCY2_altitude = ProtoField.new("altitude (int16_t)", "mavlink_proto.HIGH_LATENCY2_altitude", ftypes.INT16, nil)
f.HIGH_LATENCY2_target_altitude = ProtoField.new("target_altitude (int16_t)", "mavlink_proto.HIGH_LATENCY2_target_altitude", ftypes.INT16, nil)
f.HIGH_LATENCY2_heading = ProtoField.new("heading (uint8_t)", "mavlink_proto.HIGH_LATENCY2_heading", ftypes.UINT8, nil)
f.HIGH_LATENCY2_target_heading = ProtoField.new("target_heading (uint8_t)", "mavlink_proto.HIGH_LATENCY2_target_heading", ftypes.UINT8, nil)
f.HIGH_LATENCY2_target_distance = ProtoField.new("target_distance (uint16_t)", "mavlink_proto.HIGH_LATENCY2_target_distance", ftypes.UINT16, nil)
f.HIGH_LATENCY2_throttle = ProtoField.new("throttle (uint8_t)", "mavlink_proto.HIGH_LATENCY2_throttle", ftypes.UINT8, nil)
f.HIGH_LATENCY2_airspeed = ProtoField.new("airspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY2_airspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY2_airspeed_sp = ProtoField.new("airspeed_sp (uint8_t)", "mavlink_proto.HIGH_LATENCY2_airspeed_sp", ftypes.UINT8, nil)
f.HIGH_LATENCY2_groundspeed = ProtoField.new("groundspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY2_groundspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY2_windspeed = ProtoField.new("windspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY2_windspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY2_wind_heading = ProtoField.new("wind_heading (uint8_t)", "mavlink_proto.HIGH_LATENCY2_wind_heading", ftypes.UINT8, nil)
f.HIGH_LATENCY2_eph = ProtoField.new("eph (uint8_t)", "mavlink_proto.HIGH_LATENCY2_eph", ftypes.UINT8, nil)
f.HIGH_LATENCY2_epv = ProtoField.new("epv (uint8_t)", "mavlink_proto.HIGH_LATENCY2_epv", ftypes.UINT8, nil)
f.HIGH_LATENCY2_temperature_air = ProtoField.new("temperature_air (int8_t)", "mavlink_proto.HIGH_LATENCY2_temperature_air", ftypes.INT8, nil)
f.HIGH_LATENCY2_climb_rate = ProtoField.new("climb_rate (int8_t)", "mavlink_proto.HIGH_LATENCY2_climb_rate", ftypes.INT8, nil)
f.HIGH_LATENCY2_battery = ProtoField.new("battery (int8_t)", "mavlink_proto.HIGH_LATENCY2_battery", ftypes.INT8, nil)
f.HIGH_LATENCY2_wp_num = ProtoField.new("wp_num (uint16_t)", "mavlink_proto.HIGH_LATENCY2_wp_num", ftypes.UINT16, nil)
f.HIGH_LATENCY2_failure_flags = ProtoField.new("failure_flags (HL_FAILURE_FLAG)", "mavlink_proto.HIGH_LATENCY2_failure_flags", ftypes.UINT16, nil)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_GPS = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_GPS", "HL_FAILURE_FLAG_GPS")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE", "HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_ABSOLUTE_PRESSURE", "HL_FAILURE_FLAG_ABSOLUTE_PRESSURE")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_3D_ACCEL = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_3D_ACCEL", "HL_FAILURE_FLAG_3D_ACCEL")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_3D_GYRO = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_3D_GYRO", "HL_FAILURE_FLAG_3D_GYRO")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_3D_MAG = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_3D_MAG", "HL_FAILURE_FLAG_3D_MAG")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_TERRAIN = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_TERRAIN", "HL_FAILURE_FLAG_TERRAIN")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_BATTERY = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_BATTERY", "HL_FAILURE_FLAG_BATTERY")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_RC_RECEIVER = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_RC_RECEIVER", "HL_FAILURE_FLAG_RC_RECEIVER")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_OFFBOARD_LINK = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_OFFBOARD_LINK", "HL_FAILURE_FLAG_OFFBOARD_LINK")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_ENGINE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_ENGINE", "HL_FAILURE_FLAG_ENGINE")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_GEOFENCE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_GEOFENCE", "HL_FAILURE_FLAG_GEOFENCE")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_ESTIMATOR = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_ESTIMATOR", "HL_FAILURE_FLAG_ESTIMATOR")
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_MISSION = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_MISSION", "HL_FAILURE_FLAG_MISSION")
f.HIGH_LATENCY2_custom0 = ProtoField.new("custom0 (int8_t)", "mavlink_proto.HIGH_LATENCY2_custom0", ftypes.INT8, nil)
f.HIGH_LATENCY2_custom1 = ProtoField.new("custom1 (int8_t)", "mavlink_proto.HIGH_LATENCY2_custom1", ftypes.INT8, nil)
f.HIGH_LATENCY2_custom2 = ProtoField.new("custom2 (int8_t)", "mavlink_proto.HIGH_LATENCY2_custom2", ftypes.INT8, nil)

f.VIBRATION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.VIBRATION_time_usec", ftypes.UINT64, nil)
f.VIBRATION_vibration_x = ProtoField.new("vibration_x (float)", "mavlink_proto.VIBRATION_vibration_x", ftypes.FLOAT, nil)
f.VIBRATION_vibration_y = ProtoField.new("vibration_y (float)", "mavlink_proto.VIBRATION_vibration_y", ftypes.FLOAT, nil)
f.VIBRATION_vibration_z = ProtoField.new("vibration_z (float)", "mavlink_proto.VIBRATION_vibration_z", ftypes.FLOAT, nil)
f.VIBRATION_clipping_0 = ProtoField.new("clipping_0 (uint32_t)", "mavlink_proto.VIBRATION_clipping_0", ftypes.UINT32, nil)
f.VIBRATION_clipping_1 = ProtoField.new("clipping_1 (uint32_t)", "mavlink_proto.VIBRATION_clipping_1", ftypes.UINT32, nil)
f.VIBRATION_clipping_2 = ProtoField.new("clipping_2 (uint32_t)", "mavlink_proto.VIBRATION_clipping_2", ftypes.UINT32, nil)

f.HOME_POSITION_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.HOME_POSITION_latitude", ftypes.INT32, nil)
f.HOME_POSITION_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.HOME_POSITION_longitude", ftypes.INT32, nil)
f.HOME_POSITION_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.HOME_POSITION_altitude", ftypes.INT32, nil)
f.HOME_POSITION_x = ProtoField.new("x (float)", "mavlink_proto.HOME_POSITION_x", ftypes.FLOAT, nil)
f.HOME_POSITION_y = ProtoField.new("y (float)", "mavlink_proto.HOME_POSITION_y", ftypes.FLOAT, nil)
f.HOME_POSITION_z = ProtoField.new("z (float)", "mavlink_proto.HOME_POSITION_z", ftypes.FLOAT, nil)
f.HOME_POSITION_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.HOME_POSITION_q_0", ftypes.FLOAT, nil)
f.HOME_POSITION_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.HOME_POSITION_q_1", ftypes.FLOAT, nil)
f.HOME_POSITION_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.HOME_POSITION_q_2", ftypes.FLOAT, nil)
f.HOME_POSITION_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.HOME_POSITION_q_3", ftypes.FLOAT, nil)
f.HOME_POSITION_approach_x = ProtoField.new("approach_x (float)", "mavlink_proto.HOME_POSITION_approach_x", ftypes.FLOAT, nil)
f.HOME_POSITION_approach_y = ProtoField.new("approach_y (float)", "mavlink_proto.HOME_POSITION_approach_y", ftypes.FLOAT, nil)
f.HOME_POSITION_approach_z = ProtoField.new("approach_z (float)", "mavlink_proto.HOME_POSITION_approach_z", ftypes.FLOAT, nil)
f.HOME_POSITION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HOME_POSITION_time_usec", ftypes.UINT64, nil)

f.SET_HOME_POSITION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_HOME_POSITION_target_system", ftypes.UINT8, nil)
f.SET_HOME_POSITION_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.SET_HOME_POSITION_latitude", ftypes.INT32, nil)
f.SET_HOME_POSITION_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.SET_HOME_POSITION_longitude", ftypes.INT32, nil)
f.SET_HOME_POSITION_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.SET_HOME_POSITION_altitude", ftypes.INT32, nil)
f.SET_HOME_POSITION_x = ProtoField.new("x (float)", "mavlink_proto.SET_HOME_POSITION_x", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_y = ProtoField.new("y (float)", "mavlink_proto.SET_HOME_POSITION_y", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_z = ProtoField.new("z (float)", "mavlink_proto.SET_HOME_POSITION_z", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.SET_HOME_POSITION_q_0", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.SET_HOME_POSITION_q_1", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.SET_HOME_POSITION_q_2", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.SET_HOME_POSITION_q_3", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_approach_x = ProtoField.new("approach_x (float)", "mavlink_proto.SET_HOME_POSITION_approach_x", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_approach_y = ProtoField.new("approach_y (float)", "mavlink_proto.SET_HOME_POSITION_approach_y", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_approach_z = ProtoField.new("approach_z (float)", "mavlink_proto.SET_HOME_POSITION_approach_z", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.SET_HOME_POSITION_time_usec", ftypes.UINT64, nil)

f.MESSAGE_INTERVAL_message_id = ProtoField.new("message_id (uint16_t)", "mavlink_proto.MESSAGE_INTERVAL_message_id", ftypes.UINT16, nil)
f.MESSAGE_INTERVAL_interval_us = ProtoField.new("interval_us (int32_t)", "mavlink_proto.MESSAGE_INTERVAL_interval_us", ftypes.INT32, nil)

f.EXTENDED_SYS_STATE_vtol_state = ProtoField.new("vtol_state (MAV_VTOL_STATE)", "mavlink_proto.EXTENDED_SYS_STATE_vtol_state", ftypes.UINT8, enumEntryName.MAV_VTOL_STATE)
f.EXTENDED_SYS_STATE_landed_state = ProtoField.new("landed_state (MAV_LANDED_STATE)", "mavlink_proto.EXTENDED_SYS_STATE_landed_state", ftypes.UINT8, enumEntryName.MAV_LANDED_STATE)

f.ADSB_VEHICLE_ICAO_address = ProtoField.new("ICAO_address (uint32_t)", "mavlink_proto.ADSB_VEHICLE_ICAO_address", ftypes.UINT32, nil)
f.ADSB_VEHICLE_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.ADSB_VEHICLE_lat", ftypes.INT32, nil)
f.ADSB_VEHICLE_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.ADSB_VEHICLE_lon", ftypes.INT32, nil)
f.ADSB_VEHICLE_altitude_type = ProtoField.new("altitude_type (ADSB_ALTITUDE_TYPE)", "mavlink_proto.ADSB_VEHICLE_altitude_type", ftypes.UINT8, enumEntryName.ADSB_ALTITUDE_TYPE)
f.ADSB_VEHICLE_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.ADSB_VEHICLE_altitude", ftypes.INT32, nil)
f.ADSB_VEHICLE_heading = ProtoField.new("heading (uint16_t)", "mavlink_proto.ADSB_VEHICLE_heading", ftypes.UINT16, nil)
f.ADSB_VEHICLE_hor_velocity = ProtoField.new("hor_velocity (uint16_t)", "mavlink_proto.ADSB_VEHICLE_hor_velocity", ftypes.UINT16, nil)
f.ADSB_VEHICLE_ver_velocity = ProtoField.new("ver_velocity (int16_t)", "mavlink_proto.ADSB_VEHICLE_ver_velocity", ftypes.INT16, nil)
f.ADSB_VEHICLE_callsign = ProtoField.new("callsign (char)", "mavlink_proto.ADSB_VEHICLE_callsign", ftypes.STRING, nil)
f.ADSB_VEHICLE_emitter_type = ProtoField.new("emitter_type (ADSB_EMITTER_TYPE)", "mavlink_proto.ADSB_VEHICLE_emitter_type", ftypes.UINT8, enumEntryName.ADSB_EMITTER_TYPE)
f.ADSB_VEHICLE_tslc = ProtoField.new("tslc (uint8_t)", "mavlink_proto.ADSB_VEHICLE_tslc", ftypes.UINT8, nil)
f.ADSB_VEHICLE_flags = ProtoField.new("flags (ADSB_FLAGS)", "mavlink_proto.ADSB_VEHICLE_flags", ftypes.UINT16, nil)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_COORDS = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_COORDS", "ADSB_FLAGS_VALID_COORDS")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_ALTITUDE = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_ALTITUDE", "ADSB_FLAGS_VALID_ALTITUDE")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_HEADING = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_HEADING", "ADSB_FLAGS_VALID_HEADING")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_VELOCITY = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_VELOCITY", "ADSB_FLAGS_VALID_VELOCITY")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_CALLSIGN = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_CALLSIGN", "ADSB_FLAGS_VALID_CALLSIGN")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_SQUAWK = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_SQUAWK", "ADSB_FLAGS_VALID_SQUAWK")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_SIMULATED = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_SIMULATED", "ADSB_FLAGS_SIMULATED")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VERTICAL_VELOCITY_VALID = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VERTICAL_VELOCITY_VALID", "ADSB_FLAGS_VERTICAL_VELOCITY_VALID")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_BARO_VALID = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_BARO_VALID", "ADSB_FLAGS_BARO_VALID")
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_SOURCE_UAT = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_SOURCE_UAT", "ADSB_FLAGS_SOURCE_UAT")
f.ADSB_VEHICLE_squawk = ProtoField.new("squawk (uint16_t)", "mavlink_proto.ADSB_VEHICLE_squawk", ftypes.UINT16, nil)

f.COLLISION_src = ProtoField.new("src (MAV_COLLISION_SRC)", "mavlink_proto.COLLISION_src", ftypes.UINT8, enumEntryName.MAV_COLLISION_SRC)
f.COLLISION_id = ProtoField.new("id (uint32_t)", "mavlink_proto.COLLISION_id", ftypes.UINT32, nil)
f.COLLISION_action = ProtoField.new("action (MAV_COLLISION_ACTION)", "mavlink_proto.COLLISION_action", ftypes.UINT8, enumEntryName.MAV_COLLISION_ACTION)
f.COLLISION_threat_level = ProtoField.new("threat_level (MAV_COLLISION_THREAT_LEVEL)", "mavlink_proto.COLLISION_threat_level", ftypes.UINT8, enumEntryName.MAV_COLLISION_THREAT_LEVEL)
f.COLLISION_time_to_minimum_delta = ProtoField.new("time_to_minimum_delta (float)", "mavlink_proto.COLLISION_time_to_minimum_delta", ftypes.FLOAT, nil)
f.COLLISION_altitude_minimum_delta = ProtoField.new("altitude_minimum_delta (float)", "mavlink_proto.COLLISION_altitude_minimum_delta", ftypes.FLOAT, nil)
f.COLLISION_horizontal_minimum_delta = ProtoField.new("horizontal_minimum_delta (float)", "mavlink_proto.COLLISION_horizontal_minimum_delta", ftypes.FLOAT, nil)

f.V2_EXTENSION_target_network = ProtoField.new("target_network (uint8_t)", "mavlink_proto.V2_EXTENSION_target_network", ftypes.UINT8, nil)
f.V2_EXTENSION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.V2_EXTENSION_target_system", ftypes.UINT8, nil)
f.V2_EXTENSION_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.V2_EXTENSION_target_component", ftypes.UINT8, nil)
f.V2_EXTENSION_message_type = ProtoField.new("message_type (uint16_t)", "mavlink_proto.V2_EXTENSION_message_type", ftypes.UINT16, nil)
f.V2_EXTENSION_payload_0 = ProtoField.new("payload[0] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_0", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_1 = ProtoField.new("payload[1] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_1", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_2 = ProtoField.new("payload[2] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_2", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_3 = ProtoField.new("payload[3] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_3", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_4 = ProtoField.new("payload[4] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_4", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_5 = ProtoField.new("payload[5] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_5", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_6 = ProtoField.new("payload[6] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_6", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_7 = ProtoField.new("payload[7] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_7", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_8 = ProtoField.new("payload[8] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_8", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_9 = ProtoField.new("payload[9] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_9", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_10 = ProtoField.new("payload[10] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_10", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_11 = ProtoField.new("payload[11] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_11", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_12 = ProtoField.new("payload[12] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_12", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_13 = ProtoField.new("payload[13] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_13", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_14 = ProtoField.new("payload[14] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_14", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_15 = ProtoField.new("payload[15] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_15", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_16 = ProtoField.new("payload[16] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_16", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_17 = ProtoField.new("payload[17] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_17", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_18 = ProtoField.new("payload[18] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_18", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_19 = ProtoField.new("payload[19] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_19", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_20 = ProtoField.new("payload[20] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_20", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_21 = ProtoField.new("payload[21] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_21", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_22 = ProtoField.new("payload[22] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_22", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_23 = ProtoField.new("payload[23] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_23", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_24 = ProtoField.new("payload[24] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_24", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_25 = ProtoField.new("payload[25] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_25", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_26 = ProtoField.new("payload[26] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_26", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_27 = ProtoField.new("payload[27] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_27", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_28 = ProtoField.new("payload[28] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_28", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_29 = ProtoField.new("payload[29] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_29", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_30 = ProtoField.new("payload[30] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_30", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_31 = ProtoField.new("payload[31] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_31", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_32 = ProtoField.new("payload[32] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_32", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_33 = ProtoField.new("payload[33] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_33", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_34 = ProtoField.new("payload[34] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_34", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_35 = ProtoField.new("payload[35] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_35", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_36 = ProtoField.new("payload[36] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_36", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_37 = ProtoField.new("payload[37] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_37", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_38 = ProtoField.new("payload[38] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_38", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_39 = ProtoField.new("payload[39] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_39", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_40 = ProtoField.new("payload[40] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_40", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_41 = ProtoField.new("payload[41] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_41", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_42 = ProtoField.new("payload[42] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_42", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_43 = ProtoField.new("payload[43] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_43", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_44 = ProtoField.new("payload[44] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_44", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_45 = ProtoField.new("payload[45] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_45", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_46 = ProtoField.new("payload[46] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_46", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_47 = ProtoField.new("payload[47] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_47", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_48 = ProtoField.new("payload[48] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_48", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_49 = ProtoField.new("payload[49] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_49", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_50 = ProtoField.new("payload[50] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_50", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_51 = ProtoField.new("payload[51] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_51", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_52 = ProtoField.new("payload[52] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_52", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_53 = ProtoField.new("payload[53] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_53", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_54 = ProtoField.new("payload[54] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_54", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_55 = ProtoField.new("payload[55] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_55", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_56 = ProtoField.new("payload[56] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_56", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_57 = ProtoField.new("payload[57] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_57", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_58 = ProtoField.new("payload[58] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_58", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_59 = ProtoField.new("payload[59] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_59", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_60 = ProtoField.new("payload[60] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_60", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_61 = ProtoField.new("payload[61] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_61", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_62 = ProtoField.new("payload[62] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_62", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_63 = ProtoField.new("payload[63] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_63", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_64 = ProtoField.new("payload[64] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_64", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_65 = ProtoField.new("payload[65] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_65", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_66 = ProtoField.new("payload[66] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_66", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_67 = ProtoField.new("payload[67] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_67", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_68 = ProtoField.new("payload[68] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_68", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_69 = ProtoField.new("payload[69] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_69", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_70 = ProtoField.new("payload[70] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_70", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_71 = ProtoField.new("payload[71] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_71", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_72 = ProtoField.new("payload[72] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_72", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_73 = ProtoField.new("payload[73] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_73", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_74 = ProtoField.new("payload[74] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_74", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_75 = ProtoField.new("payload[75] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_75", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_76 = ProtoField.new("payload[76] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_76", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_77 = ProtoField.new("payload[77] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_77", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_78 = ProtoField.new("payload[78] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_78", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_79 = ProtoField.new("payload[79] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_79", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_80 = ProtoField.new("payload[80] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_80", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_81 = ProtoField.new("payload[81] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_81", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_82 = ProtoField.new("payload[82] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_82", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_83 = ProtoField.new("payload[83] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_83", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_84 = ProtoField.new("payload[84] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_84", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_85 = ProtoField.new("payload[85] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_85", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_86 = ProtoField.new("payload[86] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_86", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_87 = ProtoField.new("payload[87] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_87", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_88 = ProtoField.new("payload[88] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_88", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_89 = ProtoField.new("payload[89] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_89", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_90 = ProtoField.new("payload[90] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_90", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_91 = ProtoField.new("payload[91] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_91", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_92 = ProtoField.new("payload[92] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_92", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_93 = ProtoField.new("payload[93] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_93", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_94 = ProtoField.new("payload[94] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_94", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_95 = ProtoField.new("payload[95] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_95", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_96 = ProtoField.new("payload[96] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_96", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_97 = ProtoField.new("payload[97] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_97", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_98 = ProtoField.new("payload[98] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_98", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_99 = ProtoField.new("payload[99] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_99", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_100 = ProtoField.new("payload[100] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_100", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_101 = ProtoField.new("payload[101] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_101", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_102 = ProtoField.new("payload[102] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_102", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_103 = ProtoField.new("payload[103] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_103", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_104 = ProtoField.new("payload[104] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_104", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_105 = ProtoField.new("payload[105] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_105", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_106 = ProtoField.new("payload[106] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_106", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_107 = ProtoField.new("payload[107] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_107", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_108 = ProtoField.new("payload[108] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_108", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_109 = ProtoField.new("payload[109] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_109", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_110 = ProtoField.new("payload[110] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_110", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_111 = ProtoField.new("payload[111] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_111", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_112 = ProtoField.new("payload[112] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_112", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_113 = ProtoField.new("payload[113] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_113", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_114 = ProtoField.new("payload[114] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_114", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_115 = ProtoField.new("payload[115] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_115", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_116 = ProtoField.new("payload[116] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_116", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_117 = ProtoField.new("payload[117] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_117", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_118 = ProtoField.new("payload[118] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_118", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_119 = ProtoField.new("payload[119] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_119", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_120 = ProtoField.new("payload[120] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_120", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_121 = ProtoField.new("payload[121] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_121", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_122 = ProtoField.new("payload[122] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_122", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_123 = ProtoField.new("payload[123] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_123", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_124 = ProtoField.new("payload[124] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_124", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_125 = ProtoField.new("payload[125] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_125", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_126 = ProtoField.new("payload[126] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_126", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_127 = ProtoField.new("payload[127] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_127", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_128 = ProtoField.new("payload[128] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_128", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_129 = ProtoField.new("payload[129] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_129", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_130 = ProtoField.new("payload[130] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_130", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_131 = ProtoField.new("payload[131] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_131", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_132 = ProtoField.new("payload[132] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_132", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_133 = ProtoField.new("payload[133] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_133", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_134 = ProtoField.new("payload[134] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_134", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_135 = ProtoField.new("payload[135] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_135", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_136 = ProtoField.new("payload[136] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_136", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_137 = ProtoField.new("payload[137] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_137", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_138 = ProtoField.new("payload[138] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_138", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_139 = ProtoField.new("payload[139] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_139", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_140 = ProtoField.new("payload[140] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_140", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_141 = ProtoField.new("payload[141] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_141", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_142 = ProtoField.new("payload[142] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_142", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_143 = ProtoField.new("payload[143] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_143", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_144 = ProtoField.new("payload[144] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_144", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_145 = ProtoField.new("payload[145] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_145", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_146 = ProtoField.new("payload[146] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_146", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_147 = ProtoField.new("payload[147] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_147", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_148 = ProtoField.new("payload[148] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_148", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_149 = ProtoField.new("payload[149] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_149", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_150 = ProtoField.new("payload[150] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_150", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_151 = ProtoField.new("payload[151] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_151", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_152 = ProtoField.new("payload[152] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_152", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_153 = ProtoField.new("payload[153] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_153", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_154 = ProtoField.new("payload[154] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_154", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_155 = ProtoField.new("payload[155] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_155", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_156 = ProtoField.new("payload[156] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_156", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_157 = ProtoField.new("payload[157] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_157", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_158 = ProtoField.new("payload[158] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_158", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_159 = ProtoField.new("payload[159] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_159", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_160 = ProtoField.new("payload[160] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_160", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_161 = ProtoField.new("payload[161] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_161", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_162 = ProtoField.new("payload[162] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_162", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_163 = ProtoField.new("payload[163] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_163", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_164 = ProtoField.new("payload[164] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_164", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_165 = ProtoField.new("payload[165] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_165", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_166 = ProtoField.new("payload[166] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_166", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_167 = ProtoField.new("payload[167] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_167", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_168 = ProtoField.new("payload[168] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_168", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_169 = ProtoField.new("payload[169] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_169", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_170 = ProtoField.new("payload[170] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_170", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_171 = ProtoField.new("payload[171] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_171", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_172 = ProtoField.new("payload[172] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_172", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_173 = ProtoField.new("payload[173] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_173", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_174 = ProtoField.new("payload[174] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_174", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_175 = ProtoField.new("payload[175] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_175", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_176 = ProtoField.new("payload[176] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_176", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_177 = ProtoField.new("payload[177] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_177", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_178 = ProtoField.new("payload[178] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_178", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_179 = ProtoField.new("payload[179] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_179", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_180 = ProtoField.new("payload[180] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_180", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_181 = ProtoField.new("payload[181] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_181", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_182 = ProtoField.new("payload[182] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_182", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_183 = ProtoField.new("payload[183] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_183", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_184 = ProtoField.new("payload[184] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_184", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_185 = ProtoField.new("payload[185] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_185", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_186 = ProtoField.new("payload[186] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_186", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_187 = ProtoField.new("payload[187] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_187", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_188 = ProtoField.new("payload[188] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_188", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_189 = ProtoField.new("payload[189] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_189", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_190 = ProtoField.new("payload[190] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_190", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_191 = ProtoField.new("payload[191] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_191", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_192 = ProtoField.new("payload[192] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_192", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_193 = ProtoField.new("payload[193] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_193", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_194 = ProtoField.new("payload[194] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_194", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_195 = ProtoField.new("payload[195] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_195", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_196 = ProtoField.new("payload[196] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_196", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_197 = ProtoField.new("payload[197] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_197", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_198 = ProtoField.new("payload[198] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_198", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_199 = ProtoField.new("payload[199] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_199", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_200 = ProtoField.new("payload[200] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_200", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_201 = ProtoField.new("payload[201] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_201", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_202 = ProtoField.new("payload[202] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_202", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_203 = ProtoField.new("payload[203] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_203", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_204 = ProtoField.new("payload[204] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_204", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_205 = ProtoField.new("payload[205] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_205", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_206 = ProtoField.new("payload[206] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_206", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_207 = ProtoField.new("payload[207] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_207", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_208 = ProtoField.new("payload[208] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_208", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_209 = ProtoField.new("payload[209] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_209", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_210 = ProtoField.new("payload[210] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_210", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_211 = ProtoField.new("payload[211] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_211", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_212 = ProtoField.new("payload[212] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_212", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_213 = ProtoField.new("payload[213] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_213", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_214 = ProtoField.new("payload[214] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_214", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_215 = ProtoField.new("payload[215] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_215", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_216 = ProtoField.new("payload[216] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_216", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_217 = ProtoField.new("payload[217] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_217", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_218 = ProtoField.new("payload[218] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_218", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_219 = ProtoField.new("payload[219] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_219", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_220 = ProtoField.new("payload[220] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_220", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_221 = ProtoField.new("payload[221] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_221", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_222 = ProtoField.new("payload[222] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_222", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_223 = ProtoField.new("payload[223] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_223", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_224 = ProtoField.new("payload[224] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_224", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_225 = ProtoField.new("payload[225] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_225", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_226 = ProtoField.new("payload[226] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_226", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_227 = ProtoField.new("payload[227] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_227", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_228 = ProtoField.new("payload[228] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_228", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_229 = ProtoField.new("payload[229] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_229", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_230 = ProtoField.new("payload[230] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_230", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_231 = ProtoField.new("payload[231] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_231", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_232 = ProtoField.new("payload[232] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_232", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_233 = ProtoField.new("payload[233] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_233", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_234 = ProtoField.new("payload[234] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_234", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_235 = ProtoField.new("payload[235] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_235", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_236 = ProtoField.new("payload[236] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_236", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_237 = ProtoField.new("payload[237] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_237", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_238 = ProtoField.new("payload[238] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_238", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_239 = ProtoField.new("payload[239] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_239", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_240 = ProtoField.new("payload[240] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_240", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_241 = ProtoField.new("payload[241] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_241", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_242 = ProtoField.new("payload[242] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_242", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_243 = ProtoField.new("payload[243] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_243", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_244 = ProtoField.new("payload[244] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_244", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_245 = ProtoField.new("payload[245] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_245", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_246 = ProtoField.new("payload[246] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_246", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_247 = ProtoField.new("payload[247] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_247", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_248 = ProtoField.new("payload[248] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_248", ftypes.UINT8, nil)

f.MEMORY_VECT_address = ProtoField.new("address (uint16_t)", "mavlink_proto.MEMORY_VECT_address", ftypes.UINT16, nil)
f.MEMORY_VECT_ver = ProtoField.new("ver (uint8_t)", "mavlink_proto.MEMORY_VECT_ver", ftypes.UINT8, nil)
f.MEMORY_VECT_type = ProtoField.new("type (uint8_t)", "mavlink_proto.MEMORY_VECT_type", ftypes.UINT8, nil)
f.MEMORY_VECT_value_0 = ProtoField.new("value[0] (int8_t)", "mavlink_proto.MEMORY_VECT_value_0", ftypes.INT8, nil)
f.MEMORY_VECT_value_1 = ProtoField.new("value[1] (int8_t)", "mavlink_proto.MEMORY_VECT_value_1", ftypes.INT8, nil)
f.MEMORY_VECT_value_2 = ProtoField.new("value[2] (int8_t)", "mavlink_proto.MEMORY_VECT_value_2", ftypes.INT8, nil)
f.MEMORY_VECT_value_3 = ProtoField.new("value[3] (int8_t)", "mavlink_proto.MEMORY_VECT_value_3", ftypes.INT8, nil)
f.MEMORY_VECT_value_4 = ProtoField.new("value[4] (int8_t)", "mavlink_proto.MEMORY_VECT_value_4", ftypes.INT8, nil)
f.MEMORY_VECT_value_5 = ProtoField.new("value[5] (int8_t)", "mavlink_proto.MEMORY_VECT_value_5", ftypes.INT8, nil)
f.MEMORY_VECT_value_6 = ProtoField.new("value[6] (int8_t)", "mavlink_proto.MEMORY_VECT_value_6", ftypes.INT8, nil)
f.MEMORY_VECT_value_7 = ProtoField.new("value[7] (int8_t)", "mavlink_proto.MEMORY_VECT_value_7", ftypes.INT8, nil)
f.MEMORY_VECT_value_8 = ProtoField.new("value[8] (int8_t)", "mavlink_proto.MEMORY_VECT_value_8", ftypes.INT8, nil)
f.MEMORY_VECT_value_9 = ProtoField.new("value[9] (int8_t)", "mavlink_proto.MEMORY_VECT_value_9", ftypes.INT8, nil)
f.MEMORY_VECT_value_10 = ProtoField.new("value[10] (int8_t)", "mavlink_proto.MEMORY_VECT_value_10", ftypes.INT8, nil)
f.MEMORY_VECT_value_11 = ProtoField.new("value[11] (int8_t)", "mavlink_proto.MEMORY_VECT_value_11", ftypes.INT8, nil)
f.MEMORY_VECT_value_12 = ProtoField.new("value[12] (int8_t)", "mavlink_proto.MEMORY_VECT_value_12", ftypes.INT8, nil)
f.MEMORY_VECT_value_13 = ProtoField.new("value[13] (int8_t)", "mavlink_proto.MEMORY_VECT_value_13", ftypes.INT8, nil)
f.MEMORY_VECT_value_14 = ProtoField.new("value[14] (int8_t)", "mavlink_proto.MEMORY_VECT_value_14", ftypes.INT8, nil)
f.MEMORY_VECT_value_15 = ProtoField.new("value[15] (int8_t)", "mavlink_proto.MEMORY_VECT_value_15", ftypes.INT8, nil)
f.MEMORY_VECT_value_16 = ProtoField.new("value[16] (int8_t)", "mavlink_proto.MEMORY_VECT_value_16", ftypes.INT8, nil)
f.MEMORY_VECT_value_17 = ProtoField.new("value[17] (int8_t)", "mavlink_proto.MEMORY_VECT_value_17", ftypes.INT8, nil)
f.MEMORY_VECT_value_18 = ProtoField.new("value[18] (int8_t)", "mavlink_proto.MEMORY_VECT_value_18", ftypes.INT8, nil)
f.MEMORY_VECT_value_19 = ProtoField.new("value[19] (int8_t)", "mavlink_proto.MEMORY_VECT_value_19", ftypes.INT8, nil)
f.MEMORY_VECT_value_20 = ProtoField.new("value[20] (int8_t)", "mavlink_proto.MEMORY_VECT_value_20", ftypes.INT8, nil)
f.MEMORY_VECT_value_21 = ProtoField.new("value[21] (int8_t)", "mavlink_proto.MEMORY_VECT_value_21", ftypes.INT8, nil)
f.MEMORY_VECT_value_22 = ProtoField.new("value[22] (int8_t)", "mavlink_proto.MEMORY_VECT_value_22", ftypes.INT8, nil)
f.MEMORY_VECT_value_23 = ProtoField.new("value[23] (int8_t)", "mavlink_proto.MEMORY_VECT_value_23", ftypes.INT8, nil)
f.MEMORY_VECT_value_24 = ProtoField.new("value[24] (int8_t)", "mavlink_proto.MEMORY_VECT_value_24", ftypes.INT8, nil)
f.MEMORY_VECT_value_25 = ProtoField.new("value[25] (int8_t)", "mavlink_proto.MEMORY_VECT_value_25", ftypes.INT8, nil)
f.MEMORY_VECT_value_26 = ProtoField.new("value[26] (int8_t)", "mavlink_proto.MEMORY_VECT_value_26", ftypes.INT8, nil)
f.MEMORY_VECT_value_27 = ProtoField.new("value[27] (int8_t)", "mavlink_proto.MEMORY_VECT_value_27", ftypes.INT8, nil)
f.MEMORY_VECT_value_28 = ProtoField.new("value[28] (int8_t)", "mavlink_proto.MEMORY_VECT_value_28", ftypes.INT8, nil)
f.MEMORY_VECT_value_29 = ProtoField.new("value[29] (int8_t)", "mavlink_proto.MEMORY_VECT_value_29", ftypes.INT8, nil)
f.MEMORY_VECT_value_30 = ProtoField.new("value[30] (int8_t)", "mavlink_proto.MEMORY_VECT_value_30", ftypes.INT8, nil)
f.MEMORY_VECT_value_31 = ProtoField.new("value[31] (int8_t)", "mavlink_proto.MEMORY_VECT_value_31", ftypes.INT8, nil)

f.DEBUG_VECT_name = ProtoField.new("name (char)", "mavlink_proto.DEBUG_VECT_name", ftypes.STRING, nil)
f.DEBUG_VECT_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.DEBUG_VECT_time_usec", ftypes.UINT64, nil)
f.DEBUG_VECT_x = ProtoField.new("x (float)", "mavlink_proto.DEBUG_VECT_x", ftypes.FLOAT, nil)
f.DEBUG_VECT_y = ProtoField.new("y (float)", "mavlink_proto.DEBUG_VECT_y", ftypes.FLOAT, nil)
f.DEBUG_VECT_z = ProtoField.new("z (float)", "mavlink_proto.DEBUG_VECT_z", ftypes.FLOAT, nil)

f.NAMED_VALUE_FLOAT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.NAMED_VALUE_FLOAT_time_boot_ms", ftypes.UINT32, nil)
f.NAMED_VALUE_FLOAT_name = ProtoField.new("name (char)", "mavlink_proto.NAMED_VALUE_FLOAT_name", ftypes.STRING, nil)
f.NAMED_VALUE_FLOAT_value = ProtoField.new("value (float)", "mavlink_proto.NAMED_VALUE_FLOAT_value", ftypes.FLOAT, nil)

f.NAMED_VALUE_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.NAMED_VALUE_INT_time_boot_ms", ftypes.UINT32, nil)
f.NAMED_VALUE_INT_name = ProtoField.new("name (char)", "mavlink_proto.NAMED_VALUE_INT_name", ftypes.STRING, nil)
f.NAMED_VALUE_INT_value = ProtoField.new("value (int32_t)", "mavlink_proto.NAMED_VALUE_INT_value", ftypes.INT32, nil)

f.STATUSTEXT_severity = ProtoField.new("severity (MAV_SEVERITY)", "mavlink_proto.STATUSTEXT_severity", ftypes.UINT8, enumEntryName.MAV_SEVERITY)
f.STATUSTEXT_text = ProtoField.new("text (char)", "mavlink_proto.STATUSTEXT_text", ftypes.STRING, nil)
f.STATUSTEXT_id = ProtoField.new("id (uint16_t)", "mavlink_proto.STATUSTEXT_id", ftypes.UINT16, nil)
f.STATUSTEXT_chunk_seq = ProtoField.new("chunk_seq (uint8_t)", "mavlink_proto.STATUSTEXT_chunk_seq", ftypes.UINT8, nil)

f.DEBUG_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.DEBUG_time_boot_ms", ftypes.UINT32, nil)
f.DEBUG_ind = ProtoField.new("ind (uint8_t)", "mavlink_proto.DEBUG_ind", ftypes.UINT8, nil)
f.DEBUG_value = ProtoField.new("value (float)", "mavlink_proto.DEBUG_value", ftypes.FLOAT, nil)

f.SETUP_SIGNING_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SETUP_SIGNING_target_system", ftypes.UINT8, nil)
f.SETUP_SIGNING_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SETUP_SIGNING_target_component", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_0 = ProtoField.new("secret_key[0] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_0", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_1 = ProtoField.new("secret_key[1] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_1", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_2 = ProtoField.new("secret_key[2] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_2", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_3 = ProtoField.new("secret_key[3] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_3", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_4 = ProtoField.new("secret_key[4] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_4", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_5 = ProtoField.new("secret_key[5] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_5", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_6 = ProtoField.new("secret_key[6] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_6", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_7 = ProtoField.new("secret_key[7] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_7", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_8 = ProtoField.new("secret_key[8] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_8", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_9 = ProtoField.new("secret_key[9] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_9", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_10 = ProtoField.new("secret_key[10] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_10", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_11 = ProtoField.new("secret_key[11] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_11", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_12 = ProtoField.new("secret_key[12] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_12", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_13 = ProtoField.new("secret_key[13] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_13", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_14 = ProtoField.new("secret_key[14] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_14", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_15 = ProtoField.new("secret_key[15] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_15", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_16 = ProtoField.new("secret_key[16] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_16", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_17 = ProtoField.new("secret_key[17] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_17", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_18 = ProtoField.new("secret_key[18] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_18", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_19 = ProtoField.new("secret_key[19] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_19", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_20 = ProtoField.new("secret_key[20] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_20", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_21 = ProtoField.new("secret_key[21] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_21", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_22 = ProtoField.new("secret_key[22] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_22", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_23 = ProtoField.new("secret_key[23] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_23", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_24 = ProtoField.new("secret_key[24] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_24", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_25 = ProtoField.new("secret_key[25] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_25", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_26 = ProtoField.new("secret_key[26] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_26", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_27 = ProtoField.new("secret_key[27] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_27", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_28 = ProtoField.new("secret_key[28] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_28", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_29 = ProtoField.new("secret_key[29] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_29", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_30 = ProtoField.new("secret_key[30] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_30", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_31 = ProtoField.new("secret_key[31] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_31", ftypes.UINT8, nil)
f.SETUP_SIGNING_initial_timestamp = ProtoField.new("initial_timestamp (uint64_t)", "mavlink_proto.SETUP_SIGNING_initial_timestamp", ftypes.UINT64, nil)

f.BUTTON_CHANGE_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.BUTTON_CHANGE_time_boot_ms", ftypes.UINT32, nil)
f.BUTTON_CHANGE_last_change_ms = ProtoField.new("last_change_ms (uint32_t)", "mavlink_proto.BUTTON_CHANGE_last_change_ms", ftypes.UINT32, nil)
f.BUTTON_CHANGE_state = ProtoField.new("state (uint8_t)", "mavlink_proto.BUTTON_CHANGE_state", ftypes.UINT8, nil)

f.PLAY_TUNE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PLAY_TUNE_target_system", ftypes.UINT8, nil)
f.PLAY_TUNE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PLAY_TUNE_target_component", ftypes.UINT8, nil)
f.PLAY_TUNE_tune = ProtoField.new("tune (char)", "mavlink_proto.PLAY_TUNE_tune", ftypes.STRING, nil)
f.PLAY_TUNE_tune2 = ProtoField.new("tune2 (char)", "mavlink_proto.PLAY_TUNE_tune2", ftypes.STRING, nil)

f.CAMERA_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_INFORMATION_vendor_name_0 = ProtoField.new("vendor_name[0] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_0", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_1 = ProtoField.new("vendor_name[1] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_1", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_2 = ProtoField.new("vendor_name[2] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_2", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_3 = ProtoField.new("vendor_name[3] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_3", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_4 = ProtoField.new("vendor_name[4] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_4", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_5 = ProtoField.new("vendor_name[5] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_5", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_6 = ProtoField.new("vendor_name[6] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_6", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_7 = ProtoField.new("vendor_name[7] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_7", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_8 = ProtoField.new("vendor_name[8] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_8", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_9 = ProtoField.new("vendor_name[9] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_9", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_10 = ProtoField.new("vendor_name[10] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_10", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_11 = ProtoField.new("vendor_name[11] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_11", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_12 = ProtoField.new("vendor_name[12] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_12", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_13 = ProtoField.new("vendor_name[13] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_13", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_14 = ProtoField.new("vendor_name[14] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_14", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_15 = ProtoField.new("vendor_name[15] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_15", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_16 = ProtoField.new("vendor_name[16] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_16", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_17 = ProtoField.new("vendor_name[17] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_17", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_18 = ProtoField.new("vendor_name[18] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_18", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_19 = ProtoField.new("vendor_name[19] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_19", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_20 = ProtoField.new("vendor_name[20] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_20", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_21 = ProtoField.new("vendor_name[21] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_21", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_22 = ProtoField.new("vendor_name[22] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_22", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_23 = ProtoField.new("vendor_name[23] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_23", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_24 = ProtoField.new("vendor_name[24] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_24", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_25 = ProtoField.new("vendor_name[25] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_25", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_26 = ProtoField.new("vendor_name[26] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_26", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_27 = ProtoField.new("vendor_name[27] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_27", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_28 = ProtoField.new("vendor_name[28] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_28", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_29 = ProtoField.new("vendor_name[29] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_29", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_30 = ProtoField.new("vendor_name[30] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_30", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_31 = ProtoField.new("vendor_name[31] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_31", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_0 = ProtoField.new("model_name[0] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_0", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_1 = ProtoField.new("model_name[1] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_1", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_2 = ProtoField.new("model_name[2] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_2", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_3 = ProtoField.new("model_name[3] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_3", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_4 = ProtoField.new("model_name[4] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_4", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_5 = ProtoField.new("model_name[5] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_5", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_6 = ProtoField.new("model_name[6] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_6", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_7 = ProtoField.new("model_name[7] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_7", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_8 = ProtoField.new("model_name[8] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_8", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_9 = ProtoField.new("model_name[9] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_9", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_10 = ProtoField.new("model_name[10] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_10", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_11 = ProtoField.new("model_name[11] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_11", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_12 = ProtoField.new("model_name[12] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_12", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_13 = ProtoField.new("model_name[13] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_13", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_14 = ProtoField.new("model_name[14] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_14", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_15 = ProtoField.new("model_name[15] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_15", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_16 = ProtoField.new("model_name[16] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_16", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_17 = ProtoField.new("model_name[17] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_17", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_18 = ProtoField.new("model_name[18] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_18", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_19 = ProtoField.new("model_name[19] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_19", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_20 = ProtoField.new("model_name[20] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_20", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_21 = ProtoField.new("model_name[21] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_21", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_22 = ProtoField.new("model_name[22] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_22", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_23 = ProtoField.new("model_name[23] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_23", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_24 = ProtoField.new("model_name[24] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_24", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_25 = ProtoField.new("model_name[25] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_25", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_26 = ProtoField.new("model_name[26] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_26", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_27 = ProtoField.new("model_name[27] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_27", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_28 = ProtoField.new("model_name[28] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_28", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_29 = ProtoField.new("model_name[29] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_29", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_30 = ProtoField.new("model_name[30] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_30", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_31 = ProtoField.new("model_name[31] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_31", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_firmware_version = ProtoField.new("firmware_version (uint32_t)", "mavlink_proto.CAMERA_INFORMATION_firmware_version", ftypes.UINT32, nil)
f.CAMERA_INFORMATION_focal_length = ProtoField.new("focal_length (float)", "mavlink_proto.CAMERA_INFORMATION_focal_length", ftypes.FLOAT, nil)
f.CAMERA_INFORMATION_sensor_size_h = ProtoField.new("sensor_size_h (float)", "mavlink_proto.CAMERA_INFORMATION_sensor_size_h", ftypes.FLOAT, nil)
f.CAMERA_INFORMATION_sensor_size_v = ProtoField.new("sensor_size_v (float)", "mavlink_proto.CAMERA_INFORMATION_sensor_size_v", ftypes.FLOAT, nil)
f.CAMERA_INFORMATION_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.CAMERA_INFORMATION_resolution_h", ftypes.UINT16, nil)
f.CAMERA_INFORMATION_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.CAMERA_INFORMATION_resolution_v", ftypes.UINT16, nil)
f.CAMERA_INFORMATION_lens_id = ProtoField.new("lens_id (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_lens_id", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_flags = ProtoField.new("flags (CAMERA_CAP_FLAGS)", "mavlink_proto.CAMERA_INFORMATION_flags", ftypes.UINT32, nil)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAPTURE_VIDEO = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAPTURE_VIDEO", "CAMERA_CAP_FLAGS_CAPTURE_VIDEO")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAPTURE_IMAGE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAPTURE_IMAGE", "CAMERA_CAP_FLAGS_CAPTURE_IMAGE")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_MODES = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_MODES", "CAMERA_CAP_FLAGS_HAS_MODES")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE", "CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE", "CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE", "CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM", "CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS", "CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM", "CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_TRACKING_POINT = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_TRACKING_POINT", "CAMERA_CAP_FLAGS_HAS_TRACKING_POINT")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE", "CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE")
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS", "CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS")
f.CAMERA_INFORMATION_cam_definition_version = ProtoField.new("cam_definition_version (uint16_t)", "mavlink_proto.CAMERA_INFORMATION_cam_definition_version", ftypes.UINT16, nil)
f.CAMERA_INFORMATION_cam_definition_uri = ProtoField.new("cam_definition_uri (char)", "mavlink_proto.CAMERA_INFORMATION_cam_definition_uri", ftypes.STRING, nil)

f.CAMERA_SETTINGS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_SETTINGS_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_SETTINGS_mode_id = ProtoField.new("mode_id (CAMERA_MODE)", "mavlink_proto.CAMERA_SETTINGS_mode_id", ftypes.UINT8, enumEntryName.CAMERA_MODE)
f.CAMERA_SETTINGS_zoomLevel = ProtoField.new("zoomLevel (float)", "mavlink_proto.CAMERA_SETTINGS_zoomLevel", ftypes.FLOAT, nil)
f.CAMERA_SETTINGS_focusLevel = ProtoField.new("focusLevel (float)", "mavlink_proto.CAMERA_SETTINGS_focusLevel", ftypes.FLOAT, nil)

f.STORAGE_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.STORAGE_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.STORAGE_INFORMATION_storage_id = ProtoField.new("storage_id (uint8_t)", "mavlink_proto.STORAGE_INFORMATION_storage_id", ftypes.UINT8, nil)
f.STORAGE_INFORMATION_storage_count = ProtoField.new("storage_count (uint8_t)", "mavlink_proto.STORAGE_INFORMATION_storage_count", ftypes.UINT8, nil)
f.STORAGE_INFORMATION_status = ProtoField.new("status (STORAGE_STATUS)", "mavlink_proto.STORAGE_INFORMATION_status", ftypes.UINT8, enumEntryName.STORAGE_STATUS)
f.STORAGE_INFORMATION_total_capacity = ProtoField.new("total_capacity (float)", "mavlink_proto.STORAGE_INFORMATION_total_capacity", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_used_capacity = ProtoField.new("used_capacity (float)", "mavlink_proto.STORAGE_INFORMATION_used_capacity", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_available_capacity = ProtoField.new("available_capacity (float)", "mavlink_proto.STORAGE_INFORMATION_available_capacity", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_read_speed = ProtoField.new("read_speed (float)", "mavlink_proto.STORAGE_INFORMATION_read_speed", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_write_speed = ProtoField.new("write_speed (float)", "mavlink_proto.STORAGE_INFORMATION_write_speed", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_type = ProtoField.new("type (STORAGE_TYPE)", "mavlink_proto.STORAGE_INFORMATION_type", ftypes.UINT8, enumEntryName.STORAGE_TYPE)
f.STORAGE_INFORMATION_name = ProtoField.new("name (char)", "mavlink_proto.STORAGE_INFORMATION_name", ftypes.STRING, nil)
f.STORAGE_INFORMATION_storage_usage = ProtoField.new("storage_usage (STORAGE_USAGE_FLAG)", "mavlink_proto.STORAGE_INFORMATION_storage_usage", ftypes.UINT8, nil)
f.STORAGE_INFORMATION_storage_usage_flagSTORAGE_USAGE_FLAG_SET = ProtoField.bool("mavlink_proto.STORAGE_INFORMATION_storage_usage.STORAGE_USAGE_FLAG_SET", "STORAGE_USAGE_FLAG_SET")
f.STORAGE_INFORMATION_storage_usage_flagSTORAGE_USAGE_FLAG_PHOTO = ProtoField.bool("mavlink_proto.STORAGE_INFORMATION_storage_usage.STORAGE_USAGE_FLAG_PHOTO", "STORAGE_USAGE_FLAG_PHOTO")
f.STORAGE_INFORMATION_storage_usage_flagSTORAGE_USAGE_FLAG_VIDEO = ProtoField.bool("mavlink_proto.STORAGE_INFORMATION_storage_usage.STORAGE_USAGE_FLAG_VIDEO", "STORAGE_USAGE_FLAG_VIDEO")
f.STORAGE_INFORMATION_storage_usage_flagSTORAGE_USAGE_FLAG_LOGS = ProtoField.bool("mavlink_proto.STORAGE_INFORMATION_storage_usage.STORAGE_USAGE_FLAG_LOGS", "STORAGE_USAGE_FLAG_LOGS")

f.CAMERA_CAPTURE_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_CAPTURE_STATUS_image_status = ProtoField.new("image_status (uint8_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_image_status", ftypes.UINT8, nil)
f.CAMERA_CAPTURE_STATUS_video_status = ProtoField.new("video_status (uint8_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_video_status", ftypes.UINT8, nil)
f.CAMERA_CAPTURE_STATUS_image_interval = ProtoField.new("image_interval (float)", "mavlink_proto.CAMERA_CAPTURE_STATUS_image_interval", ftypes.FLOAT, nil)
f.CAMERA_CAPTURE_STATUS_recording_time_ms = ProtoField.new("recording_time_ms (uint32_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_recording_time_ms", ftypes.UINT32, nil)
f.CAMERA_CAPTURE_STATUS_available_capacity = ProtoField.new("available_capacity (float)", "mavlink_proto.CAMERA_CAPTURE_STATUS_available_capacity", ftypes.FLOAT, nil)
f.CAMERA_CAPTURE_STATUS_image_count = ProtoField.new("image_count (int32_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_image_count", ftypes.INT32, nil)

f.CAMERA_IMAGE_CAPTURED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_IMAGE_CAPTURED_time_utc = ProtoField.new("time_utc (uint64_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_time_utc", ftypes.UINT64, nil)
f.CAMERA_IMAGE_CAPTURED_camera_id = ProtoField.new("camera_id (uint8_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_camera_id", ftypes.UINT8, nil)
f.CAMERA_IMAGE_CAPTURED_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_lat", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_lon", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_alt", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_relative_alt", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_0", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_1", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_2", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_3", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_image_index = ProtoField.new("image_index (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_image_index", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_capture_result = ProtoField.new("capture_result (int8_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_capture_result", ftypes.INT8, nil)
f.CAMERA_IMAGE_CAPTURED_file_url = ProtoField.new("file_url (char)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_file_url", ftypes.STRING, nil)

f.FLIGHT_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.FLIGHT_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.FLIGHT_INFORMATION_arming_time_utc = ProtoField.new("arming_time_utc (uint64_t)", "mavlink_proto.FLIGHT_INFORMATION_arming_time_utc", ftypes.UINT64, nil)
f.FLIGHT_INFORMATION_takeoff_time_utc = ProtoField.new("takeoff_time_utc (uint64_t)", "mavlink_proto.FLIGHT_INFORMATION_takeoff_time_utc", ftypes.UINT64, nil)
f.FLIGHT_INFORMATION_flight_uuid = ProtoField.new("flight_uuid (uint64_t)", "mavlink_proto.FLIGHT_INFORMATION_flight_uuid", ftypes.UINT64, nil)

f.MOUNT_ORIENTATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.MOUNT_ORIENTATION_time_boot_ms", ftypes.UINT32, nil)
f.MOUNT_ORIENTATION_roll = ProtoField.new("roll (float)", "mavlink_proto.MOUNT_ORIENTATION_roll", ftypes.FLOAT, nil)
f.MOUNT_ORIENTATION_pitch = ProtoField.new("pitch (float)", "mavlink_proto.MOUNT_ORIENTATION_pitch", ftypes.FLOAT, nil)
f.MOUNT_ORIENTATION_yaw = ProtoField.new("yaw (float)", "mavlink_proto.MOUNT_ORIENTATION_yaw", ftypes.FLOAT, nil)
f.MOUNT_ORIENTATION_yaw_absolute = ProtoField.new("yaw_absolute (float)", "mavlink_proto.MOUNT_ORIENTATION_yaw_absolute", ftypes.FLOAT, nil)

f.LOGGING_DATA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOGGING_DATA_target_system", ftypes.UINT8, nil)
f.LOGGING_DATA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOGGING_DATA_target_component", ftypes.UINT8, nil)
f.LOGGING_DATA_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.LOGGING_DATA_sequence", ftypes.UINT16, nil)
f.LOGGING_DATA_length = ProtoField.new("length (uint8_t)", "mavlink_proto.LOGGING_DATA_length", ftypes.UINT8, nil)
f.LOGGING_DATA_first_message_offset = ProtoField.new("first_message_offset (uint8_t)", "mavlink_proto.LOGGING_DATA_first_message_offset", ftypes.UINT8, nil)
f.LOGGING_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_0", ftypes.UINT8, nil)
f.LOGGING_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_1", ftypes.UINT8, nil)
f.LOGGING_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_2", ftypes.UINT8, nil)
f.LOGGING_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_3", ftypes.UINT8, nil)
f.LOGGING_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_4", ftypes.UINT8, nil)
f.LOGGING_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_5", ftypes.UINT8, nil)
f.LOGGING_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_6", ftypes.UINT8, nil)
f.LOGGING_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_7", ftypes.UINT8, nil)
f.LOGGING_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_8", ftypes.UINT8, nil)
f.LOGGING_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_9", ftypes.UINT8, nil)
f.LOGGING_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_10", ftypes.UINT8, nil)
f.LOGGING_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_11", ftypes.UINT8, nil)
f.LOGGING_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_12", ftypes.UINT8, nil)
f.LOGGING_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_13", ftypes.UINT8, nil)
f.LOGGING_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_14", ftypes.UINT8, nil)
f.LOGGING_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_15", ftypes.UINT8, nil)
f.LOGGING_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_16", ftypes.UINT8, nil)
f.LOGGING_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_17", ftypes.UINT8, nil)
f.LOGGING_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_18", ftypes.UINT8, nil)
f.LOGGING_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_19", ftypes.UINT8, nil)
f.LOGGING_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_20", ftypes.UINT8, nil)
f.LOGGING_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_21", ftypes.UINT8, nil)
f.LOGGING_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_22", ftypes.UINT8, nil)
f.LOGGING_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_23", ftypes.UINT8, nil)
f.LOGGING_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_24", ftypes.UINT8, nil)
f.LOGGING_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_25", ftypes.UINT8, nil)
f.LOGGING_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_26", ftypes.UINT8, nil)
f.LOGGING_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_27", ftypes.UINT8, nil)
f.LOGGING_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_28", ftypes.UINT8, nil)
f.LOGGING_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_29", ftypes.UINT8, nil)
f.LOGGING_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_30", ftypes.UINT8, nil)
f.LOGGING_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_31", ftypes.UINT8, nil)
f.LOGGING_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_32", ftypes.UINT8, nil)
f.LOGGING_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_33", ftypes.UINT8, nil)
f.LOGGING_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_34", ftypes.UINT8, nil)
f.LOGGING_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_35", ftypes.UINT8, nil)
f.LOGGING_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_36", ftypes.UINT8, nil)
f.LOGGING_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_37", ftypes.UINT8, nil)
f.LOGGING_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_38", ftypes.UINT8, nil)
f.LOGGING_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_39", ftypes.UINT8, nil)
f.LOGGING_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_40", ftypes.UINT8, nil)
f.LOGGING_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_41", ftypes.UINT8, nil)
f.LOGGING_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_42", ftypes.UINT8, nil)
f.LOGGING_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_43", ftypes.UINT8, nil)
f.LOGGING_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_44", ftypes.UINT8, nil)
f.LOGGING_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_45", ftypes.UINT8, nil)
f.LOGGING_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_46", ftypes.UINT8, nil)
f.LOGGING_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_47", ftypes.UINT8, nil)
f.LOGGING_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_48", ftypes.UINT8, nil)
f.LOGGING_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_49", ftypes.UINT8, nil)
f.LOGGING_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_50", ftypes.UINT8, nil)
f.LOGGING_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_51", ftypes.UINT8, nil)
f.LOGGING_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_52", ftypes.UINT8, nil)
f.LOGGING_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_53", ftypes.UINT8, nil)
f.LOGGING_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_54", ftypes.UINT8, nil)
f.LOGGING_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_55", ftypes.UINT8, nil)
f.LOGGING_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_56", ftypes.UINT8, nil)
f.LOGGING_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_57", ftypes.UINT8, nil)
f.LOGGING_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_58", ftypes.UINT8, nil)
f.LOGGING_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_59", ftypes.UINT8, nil)
f.LOGGING_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_60", ftypes.UINT8, nil)
f.LOGGING_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_61", ftypes.UINT8, nil)
f.LOGGING_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_62", ftypes.UINT8, nil)
f.LOGGING_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_63", ftypes.UINT8, nil)
f.LOGGING_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_64", ftypes.UINT8, nil)
f.LOGGING_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_65", ftypes.UINT8, nil)
f.LOGGING_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_66", ftypes.UINT8, nil)
f.LOGGING_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_67", ftypes.UINT8, nil)
f.LOGGING_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_68", ftypes.UINT8, nil)
f.LOGGING_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_69", ftypes.UINT8, nil)
f.LOGGING_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_70", ftypes.UINT8, nil)
f.LOGGING_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_71", ftypes.UINT8, nil)
f.LOGGING_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_72", ftypes.UINT8, nil)
f.LOGGING_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_73", ftypes.UINT8, nil)
f.LOGGING_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_74", ftypes.UINT8, nil)
f.LOGGING_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_75", ftypes.UINT8, nil)
f.LOGGING_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_76", ftypes.UINT8, nil)
f.LOGGING_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_77", ftypes.UINT8, nil)
f.LOGGING_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_78", ftypes.UINT8, nil)
f.LOGGING_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_79", ftypes.UINT8, nil)
f.LOGGING_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_80", ftypes.UINT8, nil)
f.LOGGING_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_81", ftypes.UINT8, nil)
f.LOGGING_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_82", ftypes.UINT8, nil)
f.LOGGING_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_83", ftypes.UINT8, nil)
f.LOGGING_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_84", ftypes.UINT8, nil)
f.LOGGING_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_85", ftypes.UINT8, nil)
f.LOGGING_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_86", ftypes.UINT8, nil)
f.LOGGING_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_87", ftypes.UINT8, nil)
f.LOGGING_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_88", ftypes.UINT8, nil)
f.LOGGING_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_89", ftypes.UINT8, nil)
f.LOGGING_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_90", ftypes.UINT8, nil)
f.LOGGING_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_91", ftypes.UINT8, nil)
f.LOGGING_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_92", ftypes.UINT8, nil)
f.LOGGING_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_93", ftypes.UINT8, nil)
f.LOGGING_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_94", ftypes.UINT8, nil)
f.LOGGING_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_95", ftypes.UINT8, nil)
f.LOGGING_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_96", ftypes.UINT8, nil)
f.LOGGING_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_97", ftypes.UINT8, nil)
f.LOGGING_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_98", ftypes.UINT8, nil)
f.LOGGING_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_99", ftypes.UINT8, nil)
f.LOGGING_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_100", ftypes.UINT8, nil)
f.LOGGING_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_101", ftypes.UINT8, nil)
f.LOGGING_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_102", ftypes.UINT8, nil)
f.LOGGING_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_103", ftypes.UINT8, nil)
f.LOGGING_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_104", ftypes.UINT8, nil)
f.LOGGING_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_105", ftypes.UINT8, nil)
f.LOGGING_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_106", ftypes.UINT8, nil)
f.LOGGING_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_107", ftypes.UINT8, nil)
f.LOGGING_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_108", ftypes.UINT8, nil)
f.LOGGING_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_109", ftypes.UINT8, nil)
f.LOGGING_DATA_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_110", ftypes.UINT8, nil)
f.LOGGING_DATA_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_111", ftypes.UINT8, nil)
f.LOGGING_DATA_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_112", ftypes.UINT8, nil)
f.LOGGING_DATA_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_113", ftypes.UINT8, nil)
f.LOGGING_DATA_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_114", ftypes.UINT8, nil)
f.LOGGING_DATA_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_115", ftypes.UINT8, nil)
f.LOGGING_DATA_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_116", ftypes.UINT8, nil)
f.LOGGING_DATA_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_117", ftypes.UINT8, nil)
f.LOGGING_DATA_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_118", ftypes.UINT8, nil)
f.LOGGING_DATA_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_119", ftypes.UINT8, nil)
f.LOGGING_DATA_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_120", ftypes.UINT8, nil)
f.LOGGING_DATA_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_121", ftypes.UINT8, nil)
f.LOGGING_DATA_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_122", ftypes.UINT8, nil)
f.LOGGING_DATA_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_123", ftypes.UINT8, nil)
f.LOGGING_DATA_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_124", ftypes.UINT8, nil)
f.LOGGING_DATA_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_125", ftypes.UINT8, nil)
f.LOGGING_DATA_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_126", ftypes.UINT8, nil)
f.LOGGING_DATA_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_127", ftypes.UINT8, nil)
f.LOGGING_DATA_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_128", ftypes.UINT8, nil)
f.LOGGING_DATA_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_129", ftypes.UINT8, nil)
f.LOGGING_DATA_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_130", ftypes.UINT8, nil)
f.LOGGING_DATA_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_131", ftypes.UINT8, nil)
f.LOGGING_DATA_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_132", ftypes.UINT8, nil)
f.LOGGING_DATA_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_133", ftypes.UINT8, nil)
f.LOGGING_DATA_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_134", ftypes.UINT8, nil)
f.LOGGING_DATA_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_135", ftypes.UINT8, nil)
f.LOGGING_DATA_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_136", ftypes.UINT8, nil)
f.LOGGING_DATA_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_137", ftypes.UINT8, nil)
f.LOGGING_DATA_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_138", ftypes.UINT8, nil)
f.LOGGING_DATA_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_139", ftypes.UINT8, nil)
f.LOGGING_DATA_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_140", ftypes.UINT8, nil)
f.LOGGING_DATA_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_141", ftypes.UINT8, nil)
f.LOGGING_DATA_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_142", ftypes.UINT8, nil)
f.LOGGING_DATA_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_143", ftypes.UINT8, nil)
f.LOGGING_DATA_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_144", ftypes.UINT8, nil)
f.LOGGING_DATA_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_145", ftypes.UINT8, nil)
f.LOGGING_DATA_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_146", ftypes.UINT8, nil)
f.LOGGING_DATA_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_147", ftypes.UINT8, nil)
f.LOGGING_DATA_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_148", ftypes.UINT8, nil)
f.LOGGING_DATA_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_149", ftypes.UINT8, nil)
f.LOGGING_DATA_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_150", ftypes.UINT8, nil)
f.LOGGING_DATA_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_151", ftypes.UINT8, nil)
f.LOGGING_DATA_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_152", ftypes.UINT8, nil)
f.LOGGING_DATA_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_153", ftypes.UINT8, nil)
f.LOGGING_DATA_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_154", ftypes.UINT8, nil)
f.LOGGING_DATA_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_155", ftypes.UINT8, nil)
f.LOGGING_DATA_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_156", ftypes.UINT8, nil)
f.LOGGING_DATA_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_157", ftypes.UINT8, nil)
f.LOGGING_DATA_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_158", ftypes.UINT8, nil)
f.LOGGING_DATA_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_159", ftypes.UINT8, nil)
f.LOGGING_DATA_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_160", ftypes.UINT8, nil)
f.LOGGING_DATA_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_161", ftypes.UINT8, nil)
f.LOGGING_DATA_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_162", ftypes.UINT8, nil)
f.LOGGING_DATA_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_163", ftypes.UINT8, nil)
f.LOGGING_DATA_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_164", ftypes.UINT8, nil)
f.LOGGING_DATA_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_165", ftypes.UINT8, nil)
f.LOGGING_DATA_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_166", ftypes.UINT8, nil)
f.LOGGING_DATA_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_167", ftypes.UINT8, nil)
f.LOGGING_DATA_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_168", ftypes.UINT8, nil)
f.LOGGING_DATA_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_169", ftypes.UINT8, nil)
f.LOGGING_DATA_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_170", ftypes.UINT8, nil)
f.LOGGING_DATA_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_171", ftypes.UINT8, nil)
f.LOGGING_DATA_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_172", ftypes.UINT8, nil)
f.LOGGING_DATA_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_173", ftypes.UINT8, nil)
f.LOGGING_DATA_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_174", ftypes.UINT8, nil)
f.LOGGING_DATA_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_175", ftypes.UINT8, nil)
f.LOGGING_DATA_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_176", ftypes.UINT8, nil)
f.LOGGING_DATA_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_177", ftypes.UINT8, nil)
f.LOGGING_DATA_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_178", ftypes.UINT8, nil)
f.LOGGING_DATA_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_179", ftypes.UINT8, nil)
f.LOGGING_DATA_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_180", ftypes.UINT8, nil)
f.LOGGING_DATA_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_181", ftypes.UINT8, nil)
f.LOGGING_DATA_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_182", ftypes.UINT8, nil)
f.LOGGING_DATA_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_183", ftypes.UINT8, nil)
f.LOGGING_DATA_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_184", ftypes.UINT8, nil)
f.LOGGING_DATA_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_185", ftypes.UINT8, nil)
f.LOGGING_DATA_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_186", ftypes.UINT8, nil)
f.LOGGING_DATA_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_187", ftypes.UINT8, nil)
f.LOGGING_DATA_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_188", ftypes.UINT8, nil)
f.LOGGING_DATA_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_189", ftypes.UINT8, nil)
f.LOGGING_DATA_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_190", ftypes.UINT8, nil)
f.LOGGING_DATA_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_191", ftypes.UINT8, nil)
f.LOGGING_DATA_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_192", ftypes.UINT8, nil)
f.LOGGING_DATA_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_193", ftypes.UINT8, nil)
f.LOGGING_DATA_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_194", ftypes.UINT8, nil)
f.LOGGING_DATA_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_195", ftypes.UINT8, nil)
f.LOGGING_DATA_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_196", ftypes.UINT8, nil)
f.LOGGING_DATA_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_197", ftypes.UINT8, nil)
f.LOGGING_DATA_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_198", ftypes.UINT8, nil)
f.LOGGING_DATA_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_199", ftypes.UINT8, nil)
f.LOGGING_DATA_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_200", ftypes.UINT8, nil)
f.LOGGING_DATA_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_201", ftypes.UINT8, nil)
f.LOGGING_DATA_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_202", ftypes.UINT8, nil)
f.LOGGING_DATA_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_203", ftypes.UINT8, nil)
f.LOGGING_DATA_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_204", ftypes.UINT8, nil)
f.LOGGING_DATA_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_205", ftypes.UINT8, nil)
f.LOGGING_DATA_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_206", ftypes.UINT8, nil)
f.LOGGING_DATA_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_207", ftypes.UINT8, nil)
f.LOGGING_DATA_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_208", ftypes.UINT8, nil)
f.LOGGING_DATA_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_209", ftypes.UINT8, nil)
f.LOGGING_DATA_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_210", ftypes.UINT8, nil)
f.LOGGING_DATA_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_211", ftypes.UINT8, nil)
f.LOGGING_DATA_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_212", ftypes.UINT8, nil)
f.LOGGING_DATA_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_213", ftypes.UINT8, nil)
f.LOGGING_DATA_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_214", ftypes.UINT8, nil)
f.LOGGING_DATA_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_215", ftypes.UINT8, nil)
f.LOGGING_DATA_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_216", ftypes.UINT8, nil)
f.LOGGING_DATA_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_217", ftypes.UINT8, nil)
f.LOGGING_DATA_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_218", ftypes.UINT8, nil)
f.LOGGING_DATA_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_219", ftypes.UINT8, nil)
f.LOGGING_DATA_data_220 = ProtoField.new("data[220] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_220", ftypes.UINT8, nil)
f.LOGGING_DATA_data_221 = ProtoField.new("data[221] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_221", ftypes.UINT8, nil)
f.LOGGING_DATA_data_222 = ProtoField.new("data[222] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_222", ftypes.UINT8, nil)
f.LOGGING_DATA_data_223 = ProtoField.new("data[223] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_223", ftypes.UINT8, nil)
f.LOGGING_DATA_data_224 = ProtoField.new("data[224] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_224", ftypes.UINT8, nil)
f.LOGGING_DATA_data_225 = ProtoField.new("data[225] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_225", ftypes.UINT8, nil)
f.LOGGING_DATA_data_226 = ProtoField.new("data[226] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_226", ftypes.UINT8, nil)
f.LOGGING_DATA_data_227 = ProtoField.new("data[227] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_227", ftypes.UINT8, nil)
f.LOGGING_DATA_data_228 = ProtoField.new("data[228] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_228", ftypes.UINT8, nil)
f.LOGGING_DATA_data_229 = ProtoField.new("data[229] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_229", ftypes.UINT8, nil)
f.LOGGING_DATA_data_230 = ProtoField.new("data[230] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_230", ftypes.UINT8, nil)
f.LOGGING_DATA_data_231 = ProtoField.new("data[231] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_231", ftypes.UINT8, nil)
f.LOGGING_DATA_data_232 = ProtoField.new("data[232] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_232", ftypes.UINT8, nil)
f.LOGGING_DATA_data_233 = ProtoField.new("data[233] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_233", ftypes.UINT8, nil)
f.LOGGING_DATA_data_234 = ProtoField.new("data[234] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_234", ftypes.UINT8, nil)
f.LOGGING_DATA_data_235 = ProtoField.new("data[235] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_235", ftypes.UINT8, nil)
f.LOGGING_DATA_data_236 = ProtoField.new("data[236] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_236", ftypes.UINT8, nil)
f.LOGGING_DATA_data_237 = ProtoField.new("data[237] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_237", ftypes.UINT8, nil)
f.LOGGING_DATA_data_238 = ProtoField.new("data[238] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_238", ftypes.UINT8, nil)
f.LOGGING_DATA_data_239 = ProtoField.new("data[239] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_239", ftypes.UINT8, nil)
f.LOGGING_DATA_data_240 = ProtoField.new("data[240] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_240", ftypes.UINT8, nil)
f.LOGGING_DATA_data_241 = ProtoField.new("data[241] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_241", ftypes.UINT8, nil)
f.LOGGING_DATA_data_242 = ProtoField.new("data[242] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_242", ftypes.UINT8, nil)
f.LOGGING_DATA_data_243 = ProtoField.new("data[243] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_243", ftypes.UINT8, nil)
f.LOGGING_DATA_data_244 = ProtoField.new("data[244] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_244", ftypes.UINT8, nil)
f.LOGGING_DATA_data_245 = ProtoField.new("data[245] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_245", ftypes.UINT8, nil)
f.LOGGING_DATA_data_246 = ProtoField.new("data[246] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_246", ftypes.UINT8, nil)
f.LOGGING_DATA_data_247 = ProtoField.new("data[247] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_247", ftypes.UINT8, nil)
f.LOGGING_DATA_data_248 = ProtoField.new("data[248] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_248", ftypes.UINT8, nil)

f.LOGGING_DATA_ACKED_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_target_system", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_target_component", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.LOGGING_DATA_ACKED_sequence", ftypes.UINT16, nil)
f.LOGGING_DATA_ACKED_length = ProtoField.new("length (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_length", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_first_message_offset = ProtoField.new("first_message_offset (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_first_message_offset", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_0", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_1", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_2", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_3", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_4", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_5", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_6", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_7", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_8", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_9", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_10", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_11", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_12", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_13", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_14", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_15", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_16", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_17", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_18", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_19", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_20", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_21", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_22", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_23", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_24", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_25", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_26", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_27", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_28", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_29", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_30", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_31", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_32", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_33", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_34", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_35", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_36", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_37", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_38", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_39", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_40", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_41", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_42", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_43", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_44", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_45", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_46", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_47", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_48", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_49", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_50", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_51", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_52", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_53", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_54", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_55", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_56", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_57", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_58", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_59", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_60", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_61", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_62", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_63", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_64", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_65", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_66", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_67", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_68", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_69", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_70", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_71", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_72", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_73", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_74", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_75", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_76", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_77", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_78", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_79", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_80", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_81", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_82", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_83", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_84", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_85", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_86", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_87", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_88", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_89", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_90", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_91", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_92", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_93", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_94", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_95", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_96", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_97", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_98", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_99", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_100", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_101", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_102", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_103", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_104", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_105", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_106", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_107", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_108", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_109", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_110", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_111", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_112", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_113", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_114", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_115", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_116", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_117", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_118", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_119", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_120", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_121", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_122", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_123", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_124", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_125", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_126", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_127", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_128", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_129", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_130", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_131", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_132", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_133", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_134", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_135", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_136", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_137", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_138", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_139", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_140", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_141", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_142", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_143", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_144", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_145", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_146", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_147", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_148", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_149", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_150", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_151", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_152", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_153", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_154", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_155", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_156", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_157", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_158", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_159", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_160", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_161", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_162", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_163", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_164", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_165", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_166", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_167", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_168", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_169", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_170", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_171", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_172", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_173", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_174", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_175", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_176", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_177", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_178", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_179", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_180", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_181", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_182", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_183", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_184", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_185", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_186", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_187", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_188", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_189", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_190", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_191", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_192", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_193", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_194", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_195", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_196", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_197", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_198", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_199", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_200", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_201", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_202", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_203", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_204", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_205", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_206", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_207", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_208", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_209", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_210", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_211", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_212", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_213", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_214", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_215", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_216", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_217", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_218", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_219", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_220 = ProtoField.new("data[220] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_220", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_221 = ProtoField.new("data[221] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_221", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_222 = ProtoField.new("data[222] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_222", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_223 = ProtoField.new("data[223] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_223", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_224 = ProtoField.new("data[224] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_224", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_225 = ProtoField.new("data[225] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_225", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_226 = ProtoField.new("data[226] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_226", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_227 = ProtoField.new("data[227] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_227", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_228 = ProtoField.new("data[228] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_228", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_229 = ProtoField.new("data[229] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_229", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_230 = ProtoField.new("data[230] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_230", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_231 = ProtoField.new("data[231] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_231", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_232 = ProtoField.new("data[232] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_232", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_233 = ProtoField.new("data[233] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_233", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_234 = ProtoField.new("data[234] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_234", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_235 = ProtoField.new("data[235] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_235", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_236 = ProtoField.new("data[236] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_236", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_237 = ProtoField.new("data[237] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_237", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_238 = ProtoField.new("data[238] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_238", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_239 = ProtoField.new("data[239] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_239", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_240 = ProtoField.new("data[240] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_240", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_241 = ProtoField.new("data[241] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_241", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_242 = ProtoField.new("data[242] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_242", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_243 = ProtoField.new("data[243] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_243", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_244 = ProtoField.new("data[244] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_244", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_245 = ProtoField.new("data[245] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_245", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_246 = ProtoField.new("data[246] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_246", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_247 = ProtoField.new("data[247] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_247", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_248 = ProtoField.new("data[248] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_248", ftypes.UINT8, nil)

f.LOGGING_ACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOGGING_ACK_target_system", ftypes.UINT8, nil)
f.LOGGING_ACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOGGING_ACK_target_component", ftypes.UINT8, nil)
f.LOGGING_ACK_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.LOGGING_ACK_sequence", ftypes.UINT16, nil)

f.VIDEO_STREAM_INFORMATION_stream_id = ProtoField.new("stream_id (uint8_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_stream_id", ftypes.UINT8, nil)
f.VIDEO_STREAM_INFORMATION_count = ProtoField.new("count (uint8_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_count", ftypes.UINT8, nil)
f.VIDEO_STREAM_INFORMATION_type = ProtoField.new("type (VIDEO_STREAM_TYPE)", "mavlink_proto.VIDEO_STREAM_INFORMATION_type", ftypes.UINT8, enumEntryName.VIDEO_STREAM_TYPE)
f.VIDEO_STREAM_INFORMATION_flags = ProtoField.new("flags (VIDEO_STREAM_STATUS_FLAGS)", "mavlink_proto.VIDEO_STREAM_INFORMATION_flags", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_flags_flagVIDEO_STREAM_STATUS_FLAGS_RUNNING = ProtoField.bool("mavlink_proto.VIDEO_STREAM_INFORMATION_flags.VIDEO_STREAM_STATUS_FLAGS_RUNNING", "VIDEO_STREAM_STATUS_FLAGS_RUNNING")
f.VIDEO_STREAM_INFORMATION_flags_flagVIDEO_STREAM_STATUS_FLAGS_THERMAL = ProtoField.bool("mavlink_proto.VIDEO_STREAM_INFORMATION_flags.VIDEO_STREAM_STATUS_FLAGS_THERMAL", "VIDEO_STREAM_STATUS_FLAGS_THERMAL")
f.VIDEO_STREAM_INFORMATION_framerate = ProtoField.new("framerate (float)", "mavlink_proto.VIDEO_STREAM_INFORMATION_framerate", ftypes.FLOAT, nil)
f.VIDEO_STREAM_INFORMATION_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_resolution_h", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_resolution_v", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_bitrate = ProtoField.new("bitrate (uint32_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_bitrate", ftypes.UINT32, nil)
f.VIDEO_STREAM_INFORMATION_rotation = ProtoField.new("rotation (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_rotation", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_hfov = ProtoField.new("hfov (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_hfov", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_name = ProtoField.new("name (char)", "mavlink_proto.VIDEO_STREAM_INFORMATION_name", ftypes.STRING, nil)
f.VIDEO_STREAM_INFORMATION_uri = ProtoField.new("uri (char)", "mavlink_proto.VIDEO_STREAM_INFORMATION_uri", ftypes.STRING, nil)

f.VIDEO_STREAM_STATUS_stream_id = ProtoField.new("stream_id (uint8_t)", "mavlink_proto.VIDEO_STREAM_STATUS_stream_id", ftypes.UINT8, nil)
f.VIDEO_STREAM_STATUS_flags = ProtoField.new("flags (VIDEO_STREAM_STATUS_FLAGS)", "mavlink_proto.VIDEO_STREAM_STATUS_flags", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_flags_flagVIDEO_STREAM_STATUS_FLAGS_RUNNING = ProtoField.bool("mavlink_proto.VIDEO_STREAM_STATUS_flags.VIDEO_STREAM_STATUS_FLAGS_RUNNING", "VIDEO_STREAM_STATUS_FLAGS_RUNNING")
f.VIDEO_STREAM_STATUS_flags_flagVIDEO_STREAM_STATUS_FLAGS_THERMAL = ProtoField.bool("mavlink_proto.VIDEO_STREAM_STATUS_flags.VIDEO_STREAM_STATUS_FLAGS_THERMAL", "VIDEO_STREAM_STATUS_FLAGS_THERMAL")
f.VIDEO_STREAM_STATUS_framerate = ProtoField.new("framerate (float)", "mavlink_proto.VIDEO_STREAM_STATUS_framerate", ftypes.FLOAT, nil)
f.VIDEO_STREAM_STATUS_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_resolution_h", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_resolution_v", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_bitrate = ProtoField.new("bitrate (uint32_t)", "mavlink_proto.VIDEO_STREAM_STATUS_bitrate", ftypes.UINT32, nil)
f.VIDEO_STREAM_STATUS_rotation = ProtoField.new("rotation (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_rotation", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_hfov = ProtoField.new("hfov (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_hfov", ftypes.UINT16, nil)

f.CAMERA_FOV_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_FOV_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_FOV_STATUS_lat_camera = ProtoField.new("lat_camera (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lat_camera", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_lon_camera = ProtoField.new("lon_camera (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lon_camera", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_alt_camera = ProtoField.new("alt_camera (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_alt_camera", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_lat_image = ProtoField.new("lat_image (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lat_image", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_lon_image = ProtoField.new("lon_image (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lon_image", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_alt_image = ProtoField.new("alt_image (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_alt_image", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_0", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_1", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_2", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_3", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_hfov = ProtoField.new("hfov (float)", "mavlink_proto.CAMERA_FOV_STATUS_hfov", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_vfov = ProtoField.new("vfov (float)", "mavlink_proto.CAMERA_FOV_STATUS_vfov", ftypes.FLOAT, nil)

f.CAMERA_TRACKING_IMAGE_STATUS_tracking_status = ProtoField.new("tracking_status (CAMERA_TRACKING_STATUS_FLAGS)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_tracking_status", ftypes.UINT8, enumEntryName.CAMERA_TRACKING_STATUS_FLAGS)
f.CAMERA_TRACKING_IMAGE_STATUS_tracking_mode = ProtoField.new("tracking_mode (CAMERA_TRACKING_MODE)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_tracking_mode", ftypes.UINT8, enumEntryName.CAMERA_TRACKING_MODE)
f.CAMERA_TRACKING_IMAGE_STATUS_target_data = ProtoField.new("target_data (CAMERA_TRACKING_TARGET_DATA)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_target_data", ftypes.UINT8, enumEntryName.CAMERA_TRACKING_TARGET_DATA)
f.CAMERA_TRACKING_IMAGE_STATUS_point_x = ProtoField.new("point_x (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_point_x", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_point_y = ProtoField.new("point_y (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_point_y", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_radius = ProtoField.new("radius (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_radius", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_x = ProtoField.new("rec_top_x (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_top_x", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_y = ProtoField.new("rec_top_y (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_top_y", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_x = ProtoField.new("rec_bottom_x (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_x", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_y = ProtoField.new("rec_bottom_y (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_y", ftypes.FLOAT, nil)

f.CAMERA_TRACKING_GEO_STATUS_tracking_status = ProtoField.new("tracking_status (CAMERA_TRACKING_STATUS_FLAGS)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_tracking_status", ftypes.UINT8, enumEntryName.CAMERA_TRACKING_STATUS_FLAGS)
f.CAMERA_TRACKING_GEO_STATUS_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_lat", ftypes.INT32, nil)
f.CAMERA_TRACKING_GEO_STATUS_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_lon", ftypes.INT32, nil)
f.CAMERA_TRACKING_GEO_STATUS_alt = ProtoField.new("alt (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_alt", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_h_acc = ProtoField.new("h_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_h_acc", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_v_acc = ProtoField.new("v_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_v_acc", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_n = ProtoField.new("vel_n (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_n", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_e = ProtoField.new("vel_e (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_e", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_d = ProtoField.new("vel_d (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_d", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_acc = ProtoField.new("vel_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_acc", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_dist = ProtoField.new("dist (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_dist", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_hdg = ProtoField.new("hdg (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_hdg", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_hdg_acc = ProtoField.new("hdg_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_hdg_acc", ftypes.FLOAT, nil)

f.GIMBAL_MANAGER_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_INFORMATION_cap_flags = ProtoField.new("cap_flags (GIMBAL_MANAGER_CAP_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT", "GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL", "GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW", "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK", "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW", "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK", "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW", "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK", "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW", "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL", "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL")
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL", "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL")
f.GIMBAL_MANAGER_INFORMATION_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_INFORMATION_roll_min = ProtoField.new("roll_min (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_roll_min", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_roll_max = ProtoField.new("roll_max (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_roll_max", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_pitch_min = ProtoField.new("pitch_min (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_pitch_min", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_pitch_max = ProtoField.new("pitch_max (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_pitch_max", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_yaw_min = ProtoField.new("yaw_min (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_yaw_min", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_yaw_max = ProtoField.new("yaw_max (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_yaw_max", ftypes.FLOAT, nil)

f.GIMBAL_MANAGER_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_STATUS_flags = ProtoField.new("flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_STATUS_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE", "GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE")
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_RC_MIXED = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_RC_MIXED", "GIMBAL_MANAGER_FLAGS_RC_MIXED")
f.GIMBAL_MANAGER_STATUS_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_primary_control_sysid = ProtoField.new("primary_control_sysid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_primary_control_sysid", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_primary_control_compid = ProtoField.new("primary_control_compid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_primary_control_compid", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_secondary_control_sysid = ProtoField.new("secondary_control_sysid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_secondary_control_sysid", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_secondary_control_compid = ProtoField.new("secondary_control_compid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_secondary_control_compid", ftypes.UINT8, nil)

f.GIMBAL_MANAGER_SET_ATTITUDE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_target_system", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_target_component", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags = ProtoField.new("flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE", "GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE")
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_RC_MIXED = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_RC_MIXED", "GIMBAL_MANAGER_FLAGS_RC_MIXED")
f.GIMBAL_MANAGER_SET_ATTITUDE_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_0", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_1", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_2", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_3", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_x = ProtoField.new("angular_velocity_x (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_x", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_y = ProtoField.new("angular_velocity_y (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_y", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_z = ProtoField.new("angular_velocity_z (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_z", ftypes.FLOAT, nil)

f.GIMBAL_DEVICE_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_INFORMATION_vendor_name = ProtoField.new("vendor_name (char)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_vendor_name", ftypes.STRING, nil)
f.GIMBAL_DEVICE_INFORMATION_model_name = ProtoField.new("model_name (char)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_model_name", ftypes.STRING, nil)
f.GIMBAL_DEVICE_INFORMATION_custom_name = ProtoField.new("custom_name (char)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_custom_name", ftypes.STRING, nil)
f.GIMBAL_DEVICE_INFORMATION_firmware_version = ProtoField.new("firmware_version (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_firmware_version", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_INFORMATION_hardware_version = ProtoField.new("hardware_version (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_hardware_version", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_INFORMATION_uid = ProtoField.new("uid (uint64_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_uid", ftypes.UINT64, nil)
f.GIMBAL_DEVICE_INFORMATION_cap_flags = ProtoField.new("cap_flags (GIMBAL_DEVICE_CAP_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT", "GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL", "GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS", "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW", "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK", "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS", "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW", "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK", "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS", "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW", "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK", "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW", "GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME", "GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS", "GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS")
f.GIMBAL_DEVICE_INFORMATION_custom_cap_flags = ProtoField.new("custom_cap_flags (uint16_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_custom_cap_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_INFORMATION_roll_min = ProtoField.new("roll_min (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_roll_min", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_roll_max = ProtoField.new("roll_max (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_roll_max", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_pitch_min = ProtoField.new("pitch_min (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_pitch_min", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_pitch_max = ProtoField.new("pitch_max (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_pitch_max", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_yaw_min = ProtoField.new("yaw_min (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_yaw_min", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_yaw_max = ProtoField.new("yaw_max (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_yaw_max", ftypes.FLOAT, nil)

f.GIMBAL_DEVICE_SET_ATTITUDE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_target_system", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_target_component", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags = ProtoField.new("flags (GIMBAL_DEVICE_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_RETRACT", "GIMBAL_DEVICE_FLAGS_RETRACT")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_NEUTRAL", "GIMBAL_DEVICE_FLAGS_NEUTRAL")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_ROLL_LOCK", "GIMBAL_DEVICE_FLAGS_ROLL_LOCK")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_PITCH_LOCK", "GIMBAL_DEVICE_FLAGS_PITCH_LOCK")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_YAW_LOCK", "GIMBAL_DEVICE_FLAGS_YAW_LOCK")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME", "GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME", "GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME", "GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE", "GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE")
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_RC_MIXED = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_RC_MIXED", "GIMBAL_DEVICE_FLAGS_RC_MIXED")
f.GIMBAL_DEVICE_SET_ATTITUDE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_0", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_1", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_2", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_3", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_x = ProtoField.new("angular_velocity_x (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_x", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_y = ProtoField.new("angular_velocity_y (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_y", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_z = ProtoField.new("angular_velocity_z (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_z", ftypes.FLOAT, nil)

f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_target_system", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_target_component", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags = ProtoField.new("flags (GIMBAL_DEVICE_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_RETRACT", "GIMBAL_DEVICE_FLAGS_RETRACT")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_NEUTRAL", "GIMBAL_DEVICE_FLAGS_NEUTRAL")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_ROLL_LOCK", "GIMBAL_DEVICE_FLAGS_ROLL_LOCK")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_PITCH_LOCK", "GIMBAL_DEVICE_FLAGS_PITCH_LOCK")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_YAW_LOCK", "GIMBAL_DEVICE_FLAGS_YAW_LOCK")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME", "GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME", "GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME", "GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE", "GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_RC_MIXED = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_RC_MIXED", "GIMBAL_DEVICE_FLAGS_RC_MIXED")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_0", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_1", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_2", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_3", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_x = ProtoField.new("angular_velocity_x (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_x", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_y = ProtoField.new("angular_velocity_y (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_y", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_z = ProtoField.new("angular_velocity_z (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_z", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags = ProtoField.new("failure_flags (GIMBAL_DEVICE_ERROR_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT", "GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT", "GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT", "GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING", "GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER", "GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER")
f.GIMBAL_DEVICE_ATTITUDE_STATUS_delta_yaw = ProtoField.new("delta_yaw (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_delta_yaw", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_delta_yaw_velocity = ProtoField.new("delta_yaw_velocity (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_delta_yaw_velocity", ftypes.FLOAT, nil)

f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_system", ftypes.UINT8, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_component", ftypes.UINT8, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_time_boot_us = ProtoField.new("time_boot_us (uint64_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_time_boot_us", ftypes.UINT64, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_0", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_1", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_2", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_3", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_estimated_delay_us = ProtoField.new("q_estimated_delay_us (uint32_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_estimated_delay_us", ftypes.UINT32, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vx = ProtoField.new("vx (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vx", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vy = ProtoField.new("vy (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vy", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vz = ProtoField.new("vz (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vz", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_v_estimated_delay_us = ProtoField.new("v_estimated_delay_us (uint32_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_v_estimated_delay_us", ftypes.UINT32, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_feed_forward_angular_velocity_z = ProtoField.new("feed_forward_angular_velocity_z (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_feed_forward_angular_velocity_z", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status = ProtoField.new("estimator_status (ESTIMATOR_STATUS_FLAGS)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status", ftypes.UINT16, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_ATTITUDE = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_ATTITUDE", "ESTIMATOR_ATTITUDE")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_VELOCITY_HORIZ = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_VELOCITY_HORIZ", "ESTIMATOR_VELOCITY_HORIZ")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_VELOCITY_VERT = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_VELOCITY_VERT", "ESTIMATOR_VELOCITY_VERT")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_HORIZ_REL", "ESTIMATOR_POS_HORIZ_REL")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_HORIZ_ABS", "ESTIMATOR_POS_HORIZ_ABS")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_VERT_ABS = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_VERT_ABS", "ESTIMATOR_POS_VERT_ABS")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_VERT_AGL = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_VERT_AGL", "ESTIMATOR_POS_VERT_AGL")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_CONST_POS_MODE = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_CONST_POS_MODE", "ESTIMATOR_CONST_POS_MODE")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_PRED_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_PRED_POS_HORIZ_REL", "ESTIMATOR_PRED_POS_HORIZ_REL")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_PRED_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_PRED_POS_HORIZ_ABS", "ESTIMATOR_PRED_POS_HORIZ_ABS")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_GPS_GLITCH = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_GPS_GLITCH", "ESTIMATOR_GPS_GLITCH")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_ACCEL_ERROR = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_ACCEL_ERROR", "ESTIMATOR_ACCEL_ERROR")
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_landed_state = ProtoField.new("landed_state (MAV_LANDED_STATE)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_landed_state", ftypes.UINT8, enumEntryName.MAV_LANDED_STATE)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_angular_velocity_z = ProtoField.new("angular_velocity_z (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_angular_velocity_z", ftypes.FLOAT, nil)

f.GIMBAL_MANAGER_SET_PITCHYAW_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_target_system", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_target_component", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags = ProtoField.new("flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE", "GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE")
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_RC_MIXED = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_RC_MIXED", "GIMBAL_MANAGER_FLAGS_RC_MIXED")
f.GIMBAL_MANAGER_SET_PITCHYAW_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_pitch = ProtoField.new("pitch (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_pitch", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_yaw = ProtoField.new("yaw (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_yaw", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_pitch_rate = ProtoField.new("pitch_rate (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_pitch_rate", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_yaw_rate", ftypes.FLOAT, nil)

f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_target_system", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_target_component", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags = ProtoField.new("flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE", "GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags_flagGIMBAL_MANAGER_FLAGS_RC_MIXED = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags.GIMBAL_MANAGER_FLAGS_RC_MIXED", "GIMBAL_MANAGER_FLAGS_RC_MIXED")
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_pitch = ProtoField.new("pitch (float)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_pitch", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_yaw = ProtoField.new("yaw (float)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_yaw", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_pitch_rate = ProtoField.new("pitch_rate (float)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_pitch_rate", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.GIMBAL_MANAGER_SET_MANUAL_CONTROL_yaw_rate", ftypes.FLOAT, nil)

f.ESC_INFO_index = ProtoField.new("index (uint8_t)", "mavlink_proto.ESC_INFO_index", ftypes.UINT8, nil)
f.ESC_INFO_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ESC_INFO_time_usec", ftypes.UINT64, nil)
f.ESC_INFO_counter = ProtoField.new("counter (uint16_t)", "mavlink_proto.ESC_INFO_counter", ftypes.UINT16, nil)
f.ESC_INFO_count = ProtoField.new("count (uint8_t)", "mavlink_proto.ESC_INFO_count", ftypes.UINT8, nil)
f.ESC_INFO_connection_type = ProtoField.new("connection_type (ESC_CONNECTION_TYPE)", "mavlink_proto.ESC_INFO_connection_type", ftypes.UINT8, enumEntryName.ESC_CONNECTION_TYPE)
f.ESC_INFO_info = ProtoField.new("info (uint8_t)", "mavlink_proto.ESC_INFO_info", ftypes.UINT8, nil)
f.ESC_INFO_failure_flags_0 = ProtoField.new("failure_flags[0] (ESC_FAILURE_FLAGS)", "mavlink_proto.ESC_INFO_failure_flags_0", ftypes.UINT16, enumEntryName.ESC_FAILURE_FLAGS)
f.ESC_INFO_failure_flags_1 = ProtoField.new("failure_flags[1] (ESC_FAILURE_FLAGS)", "mavlink_proto.ESC_INFO_failure_flags_1", ftypes.UINT16, enumEntryName.ESC_FAILURE_FLAGS)
f.ESC_INFO_failure_flags_2 = ProtoField.new("failure_flags[2] (ESC_FAILURE_FLAGS)", "mavlink_proto.ESC_INFO_failure_flags_2", ftypes.UINT16, enumEntryName.ESC_FAILURE_FLAGS)
f.ESC_INFO_failure_flags_3 = ProtoField.new("failure_flags[3] (ESC_FAILURE_FLAGS)", "mavlink_proto.ESC_INFO_failure_flags_3", ftypes.UINT16, enumEntryName.ESC_FAILURE_FLAGS)
f.ESC_INFO_error_count_0 = ProtoField.new("error_count[0] (uint32_t)", "mavlink_proto.ESC_INFO_error_count_0", ftypes.UINT32, nil)
f.ESC_INFO_error_count_1 = ProtoField.new("error_count[1] (uint32_t)", "mavlink_proto.ESC_INFO_error_count_1", ftypes.UINT32, nil)
f.ESC_INFO_error_count_2 = ProtoField.new("error_count[2] (uint32_t)", "mavlink_proto.ESC_INFO_error_count_2", ftypes.UINT32, nil)
f.ESC_INFO_error_count_3 = ProtoField.new("error_count[3] (uint32_t)", "mavlink_proto.ESC_INFO_error_count_3", ftypes.UINT32, nil)
f.ESC_INFO_temperature_0 = ProtoField.new("temperature[0] (int16_t)", "mavlink_proto.ESC_INFO_temperature_0", ftypes.INT16, nil)
f.ESC_INFO_temperature_1 = ProtoField.new("temperature[1] (int16_t)", "mavlink_proto.ESC_INFO_temperature_1", ftypes.INT16, nil)
f.ESC_INFO_temperature_2 = ProtoField.new("temperature[2] (int16_t)", "mavlink_proto.ESC_INFO_temperature_2", ftypes.INT16, nil)
f.ESC_INFO_temperature_3 = ProtoField.new("temperature[3] (int16_t)", "mavlink_proto.ESC_INFO_temperature_3", ftypes.INT16, nil)

f.ESC_STATUS_index = ProtoField.new("index (uint8_t)", "mavlink_proto.ESC_STATUS_index", ftypes.UINT8, nil)
f.ESC_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ESC_STATUS_time_usec", ftypes.UINT64, nil)
f.ESC_STATUS_rpm_0 = ProtoField.new("rpm[0] (int32_t)", "mavlink_proto.ESC_STATUS_rpm_0", ftypes.INT32, nil)
f.ESC_STATUS_rpm_1 = ProtoField.new("rpm[1] (int32_t)", "mavlink_proto.ESC_STATUS_rpm_1", ftypes.INT32, nil)
f.ESC_STATUS_rpm_2 = ProtoField.new("rpm[2] (int32_t)", "mavlink_proto.ESC_STATUS_rpm_2", ftypes.INT32, nil)
f.ESC_STATUS_rpm_3 = ProtoField.new("rpm[3] (int32_t)", "mavlink_proto.ESC_STATUS_rpm_3", ftypes.INT32, nil)
f.ESC_STATUS_voltage_0 = ProtoField.new("voltage[0] (float)", "mavlink_proto.ESC_STATUS_voltage_0", ftypes.FLOAT, nil)
f.ESC_STATUS_voltage_1 = ProtoField.new("voltage[1] (float)", "mavlink_proto.ESC_STATUS_voltage_1", ftypes.FLOAT, nil)
f.ESC_STATUS_voltage_2 = ProtoField.new("voltage[2] (float)", "mavlink_proto.ESC_STATUS_voltage_2", ftypes.FLOAT, nil)
f.ESC_STATUS_voltage_3 = ProtoField.new("voltage[3] (float)", "mavlink_proto.ESC_STATUS_voltage_3", ftypes.FLOAT, nil)
f.ESC_STATUS_current_0 = ProtoField.new("current[0] (float)", "mavlink_proto.ESC_STATUS_current_0", ftypes.FLOAT, nil)
f.ESC_STATUS_current_1 = ProtoField.new("current[1] (float)", "mavlink_proto.ESC_STATUS_current_1", ftypes.FLOAT, nil)
f.ESC_STATUS_current_2 = ProtoField.new("current[2] (float)", "mavlink_proto.ESC_STATUS_current_2", ftypes.FLOAT, nil)
f.ESC_STATUS_current_3 = ProtoField.new("current[3] (float)", "mavlink_proto.ESC_STATUS_current_3", ftypes.FLOAT, nil)

f.WIFI_CONFIG_AP_ssid = ProtoField.new("ssid (char)", "mavlink_proto.WIFI_CONFIG_AP_ssid", ftypes.STRING, nil)
f.WIFI_CONFIG_AP_password = ProtoField.new("password (char)", "mavlink_proto.WIFI_CONFIG_AP_password", ftypes.STRING, nil)
f.WIFI_CONFIG_AP_mode = ProtoField.new("mode (WIFI_CONFIG_AP_MODE)", "mavlink_proto.WIFI_CONFIG_AP_mode", ftypes.INT8, enumEntryName.WIFI_CONFIG_AP_MODE)
f.WIFI_CONFIG_AP_response = ProtoField.new("response (WIFI_CONFIG_AP_RESPONSE)", "mavlink_proto.WIFI_CONFIG_AP_response", ftypes.INT8, enumEntryName.WIFI_CONFIG_AP_RESPONSE)

f.AIS_VESSEL_MMSI = ProtoField.new("MMSI (uint32_t)", "mavlink_proto.AIS_VESSEL_MMSI", ftypes.UINT32, nil)
f.AIS_VESSEL_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.AIS_VESSEL_lat", ftypes.INT32, nil)
f.AIS_VESSEL_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.AIS_VESSEL_lon", ftypes.INT32, nil)
f.AIS_VESSEL_COG = ProtoField.new("COG (uint16_t)", "mavlink_proto.AIS_VESSEL_COG", ftypes.UINT16, nil)
f.AIS_VESSEL_heading = ProtoField.new("heading (uint16_t)", "mavlink_proto.AIS_VESSEL_heading", ftypes.UINT16, nil)
f.AIS_VESSEL_velocity = ProtoField.new("velocity (uint16_t)", "mavlink_proto.AIS_VESSEL_velocity", ftypes.UINT16, nil)
f.AIS_VESSEL_turn_rate = ProtoField.new("turn_rate (int8_t)", "mavlink_proto.AIS_VESSEL_turn_rate", ftypes.INT8, nil)
f.AIS_VESSEL_navigational_status = ProtoField.new("navigational_status (AIS_NAV_STATUS)", "mavlink_proto.AIS_VESSEL_navigational_status", ftypes.UINT8, enumEntryName.AIS_NAV_STATUS)
f.AIS_VESSEL_type = ProtoField.new("type (AIS_TYPE)", "mavlink_proto.AIS_VESSEL_type", ftypes.UINT8, enumEntryName.AIS_TYPE)
f.AIS_VESSEL_dimension_bow = ProtoField.new("dimension_bow (uint16_t)", "mavlink_proto.AIS_VESSEL_dimension_bow", ftypes.UINT16, nil)
f.AIS_VESSEL_dimension_stern = ProtoField.new("dimension_stern (uint16_t)", "mavlink_proto.AIS_VESSEL_dimension_stern", ftypes.UINT16, nil)
f.AIS_VESSEL_dimension_port = ProtoField.new("dimension_port (uint8_t)", "mavlink_proto.AIS_VESSEL_dimension_port", ftypes.UINT8, nil)
f.AIS_VESSEL_dimension_starboard = ProtoField.new("dimension_starboard (uint8_t)", "mavlink_proto.AIS_VESSEL_dimension_starboard", ftypes.UINT8, nil)
f.AIS_VESSEL_callsign = ProtoField.new("callsign (char)", "mavlink_proto.AIS_VESSEL_callsign", ftypes.STRING, nil)
f.AIS_VESSEL_name = ProtoField.new("name (char)", "mavlink_proto.AIS_VESSEL_name", ftypes.STRING, nil)
f.AIS_VESSEL_tslc = ProtoField.new("tslc (uint16_t)", "mavlink_proto.AIS_VESSEL_tslc", ftypes.UINT16, nil)
f.AIS_VESSEL_flags = ProtoField.new("flags (AIS_FLAGS)", "mavlink_proto.AIS_VESSEL_flags", ftypes.UINT16, nil)
f.AIS_VESSEL_flags_flagAIS_FLAGS_POSITION_ACCURACY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_POSITION_ACCURACY", "AIS_FLAGS_POSITION_ACCURACY")
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_COG = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_COG", "AIS_FLAGS_VALID_COG")
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_VELOCITY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_VELOCITY", "AIS_FLAGS_VALID_VELOCITY")
f.AIS_VESSEL_flags_flagAIS_FLAGS_HIGH_VELOCITY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_HIGH_VELOCITY", "AIS_FLAGS_HIGH_VELOCITY")
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_TURN_RATE = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_TURN_RATE", "AIS_FLAGS_VALID_TURN_RATE")
f.AIS_VESSEL_flags_flagAIS_FLAGS_TURN_RATE_SIGN_ONLY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_TURN_RATE_SIGN_ONLY", "AIS_FLAGS_TURN_RATE_SIGN_ONLY")
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_DIMENSIONS = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_DIMENSIONS", "AIS_FLAGS_VALID_DIMENSIONS")
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_BOW_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_BOW_DIMENSION", "AIS_FLAGS_LARGE_BOW_DIMENSION")
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_STERN_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_STERN_DIMENSION", "AIS_FLAGS_LARGE_STERN_DIMENSION")
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_PORT_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_PORT_DIMENSION", "AIS_FLAGS_LARGE_PORT_DIMENSION")
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_STARBOARD_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_STARBOARD_DIMENSION", "AIS_FLAGS_LARGE_STARBOARD_DIMENSION")
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_CALLSIGN = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_CALLSIGN", "AIS_FLAGS_VALID_CALLSIGN")
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_NAME = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_NAME", "AIS_FLAGS_VALID_NAME")

f.UAVCAN_NODE_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.UAVCAN_NODE_STATUS_time_usec", ftypes.UINT64, nil)
f.UAVCAN_NODE_STATUS_uptime_sec = ProtoField.new("uptime_sec (uint32_t)", "mavlink_proto.UAVCAN_NODE_STATUS_uptime_sec", ftypes.UINT32, nil)
f.UAVCAN_NODE_STATUS_health = ProtoField.new("health (UAVCAN_NODE_HEALTH)", "mavlink_proto.UAVCAN_NODE_STATUS_health", ftypes.UINT8, enumEntryName.UAVCAN_NODE_HEALTH)
f.UAVCAN_NODE_STATUS_mode = ProtoField.new("mode (UAVCAN_NODE_MODE)", "mavlink_proto.UAVCAN_NODE_STATUS_mode", ftypes.UINT8, enumEntryName.UAVCAN_NODE_MODE)
f.UAVCAN_NODE_STATUS_sub_mode = ProtoField.new("sub_mode (uint8_t)", "mavlink_proto.UAVCAN_NODE_STATUS_sub_mode", ftypes.UINT8, nil)
f.UAVCAN_NODE_STATUS_vendor_specific_status_code = ProtoField.new("vendor_specific_status_code (uint16_t)", "mavlink_proto.UAVCAN_NODE_STATUS_vendor_specific_status_code", ftypes.UINT16, nil)

f.UAVCAN_NODE_INFO_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.UAVCAN_NODE_INFO_time_usec", ftypes.UINT64, nil)
f.UAVCAN_NODE_INFO_uptime_sec = ProtoField.new("uptime_sec (uint32_t)", "mavlink_proto.UAVCAN_NODE_INFO_uptime_sec", ftypes.UINT32, nil)
f.UAVCAN_NODE_INFO_name = ProtoField.new("name (char)", "mavlink_proto.UAVCAN_NODE_INFO_name", ftypes.STRING, nil)
f.UAVCAN_NODE_INFO_hw_version_major = ProtoField.new("hw_version_major (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_version_major", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_version_minor = ProtoField.new("hw_version_minor (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_version_minor", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_0 = ProtoField.new("hw_unique_id[0] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_0", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_1 = ProtoField.new("hw_unique_id[1] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_1", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_2 = ProtoField.new("hw_unique_id[2] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_2", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_3 = ProtoField.new("hw_unique_id[3] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_3", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_4 = ProtoField.new("hw_unique_id[4] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_4", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_5 = ProtoField.new("hw_unique_id[5] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_5", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_6 = ProtoField.new("hw_unique_id[6] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_6", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_7 = ProtoField.new("hw_unique_id[7] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_7", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_8 = ProtoField.new("hw_unique_id[8] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_8", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_9 = ProtoField.new("hw_unique_id[9] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_9", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_10 = ProtoField.new("hw_unique_id[10] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_10", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_11 = ProtoField.new("hw_unique_id[11] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_11", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_12 = ProtoField.new("hw_unique_id[12] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_12", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_13 = ProtoField.new("hw_unique_id[13] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_13", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_14 = ProtoField.new("hw_unique_id[14] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_14", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_15 = ProtoField.new("hw_unique_id[15] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_15", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_sw_version_major = ProtoField.new("sw_version_major (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_sw_version_major", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_sw_version_minor = ProtoField.new("sw_version_minor (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_sw_version_minor", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_sw_vcs_commit = ProtoField.new("sw_vcs_commit (uint32_t)", "mavlink_proto.UAVCAN_NODE_INFO_sw_vcs_commit", ftypes.UINT32, nil)

f.PARAM_EXT_REQUEST_READ_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_READ_target_system", ftypes.UINT8, nil)
f.PARAM_EXT_REQUEST_READ_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_READ_target_component", ftypes.UINT8, nil)
f.PARAM_EXT_REQUEST_READ_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_REQUEST_READ_param_id", ftypes.STRING, nil)
f.PARAM_EXT_REQUEST_READ_param_index = ProtoField.new("param_index (int16_t)", "mavlink_proto.PARAM_EXT_REQUEST_READ_param_index", ftypes.INT16, nil)

f.PARAM_EXT_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.PARAM_EXT_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_LIST_target_component", ftypes.UINT8, nil)

f.PARAM_EXT_VALUE_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_VALUE_param_id", ftypes.STRING, nil)
f.PARAM_EXT_VALUE_param_value = ProtoField.new("param_value (char)", "mavlink_proto.PARAM_EXT_VALUE_param_value", ftypes.STRING, nil)
f.PARAM_EXT_VALUE_param_type = ProtoField.new("param_type (MAV_PARAM_EXT_TYPE)", "mavlink_proto.PARAM_EXT_VALUE_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_EXT_TYPE)
f.PARAM_EXT_VALUE_param_count = ProtoField.new("param_count (uint16_t)", "mavlink_proto.PARAM_EXT_VALUE_param_count", ftypes.UINT16, nil)
f.PARAM_EXT_VALUE_param_index = ProtoField.new("param_index (uint16_t)", "mavlink_proto.PARAM_EXT_VALUE_param_index", ftypes.UINT16, nil)

f.PARAM_EXT_SET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_EXT_SET_target_system", ftypes.UINT8, nil)
f.PARAM_EXT_SET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_EXT_SET_target_component", ftypes.UINT8, nil)
f.PARAM_EXT_SET_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_SET_param_id", ftypes.STRING, nil)
f.PARAM_EXT_SET_param_value = ProtoField.new("param_value (char)", "mavlink_proto.PARAM_EXT_SET_param_value", ftypes.STRING, nil)
f.PARAM_EXT_SET_param_type = ProtoField.new("param_type (MAV_PARAM_EXT_TYPE)", "mavlink_proto.PARAM_EXT_SET_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_EXT_TYPE)

f.PARAM_EXT_ACK_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_ACK_param_id", ftypes.STRING, nil)
f.PARAM_EXT_ACK_param_value = ProtoField.new("param_value (char)", "mavlink_proto.PARAM_EXT_ACK_param_value", ftypes.STRING, nil)
f.PARAM_EXT_ACK_param_type = ProtoField.new("param_type (MAV_PARAM_EXT_TYPE)", "mavlink_proto.PARAM_EXT_ACK_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_EXT_TYPE)
f.PARAM_EXT_ACK_param_result = ProtoField.new("param_result (PARAM_ACK)", "mavlink_proto.PARAM_EXT_ACK_param_result", ftypes.UINT8, enumEntryName.PARAM_ACK)

f.OBSTACLE_DISTANCE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.OBSTACLE_DISTANCE_time_usec", ftypes.UINT64, nil)
f.OBSTACLE_DISTANCE_sensor_type = ProtoField.new("sensor_type (MAV_DISTANCE_SENSOR)", "mavlink_proto.OBSTACLE_DISTANCE_sensor_type", ftypes.UINT8, enumEntryName.MAV_DISTANCE_SENSOR)
f.OBSTACLE_DISTANCE_distances_0 = ProtoField.new("distances[0] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_0", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_1 = ProtoField.new("distances[1] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_1", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_2 = ProtoField.new("distances[2] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_2", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_3 = ProtoField.new("distances[3] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_3", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_4 = ProtoField.new("distances[4] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_4", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_5 = ProtoField.new("distances[5] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_5", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_6 = ProtoField.new("distances[6] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_6", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_7 = ProtoField.new("distances[7] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_7", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_8 = ProtoField.new("distances[8] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_8", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_9 = ProtoField.new("distances[9] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_9", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_10 = ProtoField.new("distances[10] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_10", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_11 = ProtoField.new("distances[11] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_11", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_12 = ProtoField.new("distances[12] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_12", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_13 = ProtoField.new("distances[13] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_13", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_14 = ProtoField.new("distances[14] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_14", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_15 = ProtoField.new("distances[15] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_15", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_16 = ProtoField.new("distances[16] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_16", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_17 = ProtoField.new("distances[17] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_17", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_18 = ProtoField.new("distances[18] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_18", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_19 = ProtoField.new("distances[19] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_19", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_20 = ProtoField.new("distances[20] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_20", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_21 = ProtoField.new("distances[21] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_21", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_22 = ProtoField.new("distances[22] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_22", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_23 = ProtoField.new("distances[23] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_23", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_24 = ProtoField.new("distances[24] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_24", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_25 = ProtoField.new("distances[25] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_25", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_26 = ProtoField.new("distances[26] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_26", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_27 = ProtoField.new("distances[27] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_27", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_28 = ProtoField.new("distances[28] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_28", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_29 = ProtoField.new("distances[29] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_29", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_30 = ProtoField.new("distances[30] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_30", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_31 = ProtoField.new("distances[31] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_31", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_32 = ProtoField.new("distances[32] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_32", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_33 = ProtoField.new("distances[33] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_33", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_34 = ProtoField.new("distances[34] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_34", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_35 = ProtoField.new("distances[35] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_35", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_36 = ProtoField.new("distances[36] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_36", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_37 = ProtoField.new("distances[37] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_37", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_38 = ProtoField.new("distances[38] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_38", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_39 = ProtoField.new("distances[39] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_39", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_40 = ProtoField.new("distances[40] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_40", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_41 = ProtoField.new("distances[41] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_41", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_42 = ProtoField.new("distances[42] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_42", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_43 = ProtoField.new("distances[43] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_43", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_44 = ProtoField.new("distances[44] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_44", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_45 = ProtoField.new("distances[45] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_45", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_46 = ProtoField.new("distances[46] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_46", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_47 = ProtoField.new("distances[47] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_47", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_48 = ProtoField.new("distances[48] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_48", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_49 = ProtoField.new("distances[49] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_49", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_50 = ProtoField.new("distances[50] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_50", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_51 = ProtoField.new("distances[51] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_51", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_52 = ProtoField.new("distances[52] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_52", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_53 = ProtoField.new("distances[53] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_53", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_54 = ProtoField.new("distances[54] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_54", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_55 = ProtoField.new("distances[55] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_55", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_56 = ProtoField.new("distances[56] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_56", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_57 = ProtoField.new("distances[57] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_57", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_58 = ProtoField.new("distances[58] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_58", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_59 = ProtoField.new("distances[59] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_59", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_60 = ProtoField.new("distances[60] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_60", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_61 = ProtoField.new("distances[61] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_61", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_62 = ProtoField.new("distances[62] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_62", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_63 = ProtoField.new("distances[63] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_63", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_64 = ProtoField.new("distances[64] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_64", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_65 = ProtoField.new("distances[65] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_65", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_66 = ProtoField.new("distances[66] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_66", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_67 = ProtoField.new("distances[67] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_67", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_68 = ProtoField.new("distances[68] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_68", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_69 = ProtoField.new("distances[69] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_69", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_70 = ProtoField.new("distances[70] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_70", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_71 = ProtoField.new("distances[71] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_71", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_increment = ProtoField.new("increment (uint8_t)", "mavlink_proto.OBSTACLE_DISTANCE_increment", ftypes.UINT8, nil)
f.OBSTACLE_DISTANCE_min_distance = ProtoField.new("min_distance (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_min_distance", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_max_distance = ProtoField.new("max_distance (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_max_distance", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_increment_f = ProtoField.new("increment_f (float)", "mavlink_proto.OBSTACLE_DISTANCE_increment_f", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_angle_offset = ProtoField.new("angle_offset (float)", "mavlink_proto.OBSTACLE_DISTANCE_angle_offset", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.OBSTACLE_DISTANCE_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)

f.ODOMETRY_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ODOMETRY_time_usec", ftypes.UINT64, nil)
f.ODOMETRY_frame_id = ProtoField.new("frame_id (MAV_FRAME)", "mavlink_proto.ODOMETRY_frame_id", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.ODOMETRY_child_frame_id = ProtoField.new("child_frame_id (MAV_FRAME)", "mavlink_proto.ODOMETRY_child_frame_id", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.ODOMETRY_x = ProtoField.new("x (float)", "mavlink_proto.ODOMETRY_x", ftypes.FLOAT, nil)
f.ODOMETRY_y = ProtoField.new("y (float)", "mavlink_proto.ODOMETRY_y", ftypes.FLOAT, nil)
f.ODOMETRY_z = ProtoField.new("z (float)", "mavlink_proto.ODOMETRY_z", ftypes.FLOAT, nil)
f.ODOMETRY_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ODOMETRY_q_0", ftypes.FLOAT, nil)
f.ODOMETRY_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ODOMETRY_q_1", ftypes.FLOAT, nil)
f.ODOMETRY_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ODOMETRY_q_2", ftypes.FLOAT, nil)
f.ODOMETRY_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ODOMETRY_q_3", ftypes.FLOAT, nil)
f.ODOMETRY_vx = ProtoField.new("vx (float)", "mavlink_proto.ODOMETRY_vx", ftypes.FLOAT, nil)
f.ODOMETRY_vy = ProtoField.new("vy (float)", "mavlink_proto.ODOMETRY_vy", ftypes.FLOAT, nil)
f.ODOMETRY_vz = ProtoField.new("vz (float)", "mavlink_proto.ODOMETRY_vz", ftypes.FLOAT, nil)
f.ODOMETRY_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ODOMETRY_rollspeed", ftypes.FLOAT, nil)
f.ODOMETRY_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ODOMETRY_pitchspeed", ftypes.FLOAT, nil)
f.ODOMETRY_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ODOMETRY_yawspeed", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_0 = ProtoField.new("pose_covariance[0] (float)", "mavlink_proto.ODOMETRY_pose_covariance_0", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_1 = ProtoField.new("pose_covariance[1] (float)", "mavlink_proto.ODOMETRY_pose_covariance_1", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_2 = ProtoField.new("pose_covariance[2] (float)", "mavlink_proto.ODOMETRY_pose_covariance_2", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_3 = ProtoField.new("pose_covariance[3] (float)", "mavlink_proto.ODOMETRY_pose_covariance_3", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_4 = ProtoField.new("pose_covariance[4] (float)", "mavlink_proto.ODOMETRY_pose_covariance_4", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_5 = ProtoField.new("pose_covariance[5] (float)", "mavlink_proto.ODOMETRY_pose_covariance_5", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_6 = ProtoField.new("pose_covariance[6] (float)", "mavlink_proto.ODOMETRY_pose_covariance_6", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_7 = ProtoField.new("pose_covariance[7] (float)", "mavlink_proto.ODOMETRY_pose_covariance_7", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_8 = ProtoField.new("pose_covariance[8] (float)", "mavlink_proto.ODOMETRY_pose_covariance_8", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_9 = ProtoField.new("pose_covariance[9] (float)", "mavlink_proto.ODOMETRY_pose_covariance_9", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_10 = ProtoField.new("pose_covariance[10] (float)", "mavlink_proto.ODOMETRY_pose_covariance_10", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_11 = ProtoField.new("pose_covariance[11] (float)", "mavlink_proto.ODOMETRY_pose_covariance_11", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_12 = ProtoField.new("pose_covariance[12] (float)", "mavlink_proto.ODOMETRY_pose_covariance_12", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_13 = ProtoField.new("pose_covariance[13] (float)", "mavlink_proto.ODOMETRY_pose_covariance_13", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_14 = ProtoField.new("pose_covariance[14] (float)", "mavlink_proto.ODOMETRY_pose_covariance_14", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_15 = ProtoField.new("pose_covariance[15] (float)", "mavlink_proto.ODOMETRY_pose_covariance_15", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_16 = ProtoField.new("pose_covariance[16] (float)", "mavlink_proto.ODOMETRY_pose_covariance_16", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_17 = ProtoField.new("pose_covariance[17] (float)", "mavlink_proto.ODOMETRY_pose_covariance_17", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_18 = ProtoField.new("pose_covariance[18] (float)", "mavlink_proto.ODOMETRY_pose_covariance_18", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_19 = ProtoField.new("pose_covariance[19] (float)", "mavlink_proto.ODOMETRY_pose_covariance_19", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_20 = ProtoField.new("pose_covariance[20] (float)", "mavlink_proto.ODOMETRY_pose_covariance_20", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_0 = ProtoField.new("velocity_covariance[0] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_0", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_1 = ProtoField.new("velocity_covariance[1] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_1", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_2 = ProtoField.new("velocity_covariance[2] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_2", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_3 = ProtoField.new("velocity_covariance[3] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_3", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_4 = ProtoField.new("velocity_covariance[4] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_4", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_5 = ProtoField.new("velocity_covariance[5] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_5", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_6 = ProtoField.new("velocity_covariance[6] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_6", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_7 = ProtoField.new("velocity_covariance[7] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_7", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_8 = ProtoField.new("velocity_covariance[8] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_8", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_9 = ProtoField.new("velocity_covariance[9] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_9", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_10 = ProtoField.new("velocity_covariance[10] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_10", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_11 = ProtoField.new("velocity_covariance[11] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_11", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_12 = ProtoField.new("velocity_covariance[12] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_12", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_13 = ProtoField.new("velocity_covariance[13] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_13", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_14 = ProtoField.new("velocity_covariance[14] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_14", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_15 = ProtoField.new("velocity_covariance[15] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_15", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_16 = ProtoField.new("velocity_covariance[16] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_16", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_17 = ProtoField.new("velocity_covariance[17] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_17", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_18 = ProtoField.new("velocity_covariance[18] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_18", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_19 = ProtoField.new("velocity_covariance[19] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_19", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_20 = ProtoField.new("velocity_covariance[20] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_20", ftypes.FLOAT, nil)
f.ODOMETRY_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.ODOMETRY_reset_counter", ftypes.UINT8, nil)
f.ODOMETRY_estimator_type = ProtoField.new("estimator_type (MAV_ESTIMATOR_TYPE)", "mavlink_proto.ODOMETRY_estimator_type", ftypes.UINT8, enumEntryName.MAV_ESTIMATOR_TYPE)
f.ODOMETRY_quality = ProtoField.new("quality (int8_t)", "mavlink_proto.ODOMETRY_quality", ftypes.INT8, nil)

f.TRAJECTORY_REPRESENTATION_WAYPOINTS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_time_usec", ftypes.UINT64, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_valid_points = ProtoField.new("valid_points (uint8_t)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_valid_points", ftypes.UINT8, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_0 = ProtoField.new("pos_x[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_1 = ProtoField.new("pos_x[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_2 = ProtoField.new("pos_x[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_3 = ProtoField.new("pos_x[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_4 = ProtoField.new("pos_x[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_0 = ProtoField.new("pos_y[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_1 = ProtoField.new("pos_y[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_2 = ProtoField.new("pos_y[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_3 = ProtoField.new("pos_y[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_4 = ProtoField.new("pos_y[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_0 = ProtoField.new("pos_z[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_1 = ProtoField.new("pos_z[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_2 = ProtoField.new("pos_z[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_3 = ProtoField.new("pos_z[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_4 = ProtoField.new("pos_z[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_0 = ProtoField.new("vel_x[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_1 = ProtoField.new("vel_x[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_2 = ProtoField.new("vel_x[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_3 = ProtoField.new("vel_x[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_4 = ProtoField.new("vel_x[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_0 = ProtoField.new("vel_y[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_1 = ProtoField.new("vel_y[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_2 = ProtoField.new("vel_y[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_3 = ProtoField.new("vel_y[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_4 = ProtoField.new("vel_y[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_0 = ProtoField.new("vel_z[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_1 = ProtoField.new("vel_z[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_2 = ProtoField.new("vel_z[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_3 = ProtoField.new("vel_z[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_4 = ProtoField.new("vel_z[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_0 = ProtoField.new("acc_x[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_1 = ProtoField.new("acc_x[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_2 = ProtoField.new("acc_x[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_3 = ProtoField.new("acc_x[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_4 = ProtoField.new("acc_x[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_0 = ProtoField.new("acc_y[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_1 = ProtoField.new("acc_y[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_2 = ProtoField.new("acc_y[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_3 = ProtoField.new("acc_y[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_4 = ProtoField.new("acc_y[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_0 = ProtoField.new("acc_z[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_1 = ProtoField.new("acc_z[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_2 = ProtoField.new("acc_z[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_3 = ProtoField.new("acc_z[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_4 = ProtoField.new("acc_z[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_0 = ProtoField.new("pos_yaw[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_1 = ProtoField.new("pos_yaw[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_2 = ProtoField.new("pos_yaw[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_3 = ProtoField.new("pos_yaw[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_4 = ProtoField.new("pos_yaw[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_0 = ProtoField.new("vel_yaw[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_1 = ProtoField.new("vel_yaw[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_2 = ProtoField.new("vel_yaw[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_3 = ProtoField.new("vel_yaw[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_4 = ProtoField.new("vel_yaw[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_0 = ProtoField.new("command[0] (MAV_CMD)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_0", ftypes.UINT16, enumEntryName.MAV_CMD)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_1 = ProtoField.new("command[1] (MAV_CMD)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_1", ftypes.UINT16, enumEntryName.MAV_CMD)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_2 = ProtoField.new("command[2] (MAV_CMD)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_2", ftypes.UINT16, enumEntryName.MAV_CMD)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_3 = ProtoField.new("command[3] (MAV_CMD)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_3", ftypes.UINT16, enumEntryName.MAV_CMD)
f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_4 = ProtoField.new("command[4] (MAV_CMD)", "mavlink_proto.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_4", ftypes.UINT16, enumEntryName.MAV_CMD)

f.TRAJECTORY_REPRESENTATION_BEZIER_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_time_usec", ftypes.UINT64, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_valid_points = ProtoField.new("valid_points (uint8_t)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_valid_points", ftypes.UINT8, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_0 = ProtoField.new("pos_x[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_1 = ProtoField.new("pos_x[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_2 = ProtoField.new("pos_x[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_3 = ProtoField.new("pos_x[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_4 = ProtoField.new("pos_x[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_0 = ProtoField.new("pos_y[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_1 = ProtoField.new("pos_y[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_2 = ProtoField.new("pos_y[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_3 = ProtoField.new("pos_y[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_4 = ProtoField.new("pos_y[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_0 = ProtoField.new("pos_z[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_1 = ProtoField.new("pos_z[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_2 = ProtoField.new("pos_z[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_3 = ProtoField.new("pos_z[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_4 = ProtoField.new("pos_z[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_delta_0 = ProtoField.new("delta[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_delta_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_delta_1 = ProtoField.new("delta[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_delta_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_delta_2 = ProtoField.new("delta[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_delta_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_delta_3 = ProtoField.new("delta[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_delta_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_delta_4 = ProtoField.new("delta[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_delta_4", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_0 = ProtoField.new("pos_yaw[0] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_0", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_1 = ProtoField.new("pos_yaw[1] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_1", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_2 = ProtoField.new("pos_yaw[2] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_2", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_3 = ProtoField.new("pos_yaw[3] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_3", ftypes.FLOAT, nil)
f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_4 = ProtoField.new("pos_yaw[4] (float)", "mavlink_proto.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_4", ftypes.FLOAT, nil)

f.CELLULAR_STATUS_status = ProtoField.new("status (CELLULAR_STATUS_FLAG)", "mavlink_proto.CELLULAR_STATUS_status", ftypes.UINT8, enumEntryName.CELLULAR_STATUS_FLAG)
f.CELLULAR_STATUS_failure_reason = ProtoField.new("failure_reason (CELLULAR_NETWORK_FAILED_REASON)", "mavlink_proto.CELLULAR_STATUS_failure_reason", ftypes.UINT8, enumEntryName.CELLULAR_NETWORK_FAILED_REASON)
f.CELLULAR_STATUS_type = ProtoField.new("type (CELLULAR_NETWORK_RADIO_TYPE)", "mavlink_proto.CELLULAR_STATUS_type", ftypes.UINT8, enumEntryName.CELLULAR_NETWORK_RADIO_TYPE)
f.CELLULAR_STATUS_quality = ProtoField.new("quality (uint8_t)", "mavlink_proto.CELLULAR_STATUS_quality", ftypes.UINT8, nil)
f.CELLULAR_STATUS_mcc = ProtoField.new("mcc (uint16_t)", "mavlink_proto.CELLULAR_STATUS_mcc", ftypes.UINT16, nil)
f.CELLULAR_STATUS_mnc = ProtoField.new("mnc (uint16_t)", "mavlink_proto.CELLULAR_STATUS_mnc", ftypes.UINT16, nil)
f.CELLULAR_STATUS_lac = ProtoField.new("lac (uint16_t)", "mavlink_proto.CELLULAR_STATUS_lac", ftypes.UINT16, nil)

f.ISBD_LINK_STATUS_timestamp = ProtoField.new("timestamp (uint64_t)", "mavlink_proto.ISBD_LINK_STATUS_timestamp", ftypes.UINT64, nil)
f.ISBD_LINK_STATUS_last_heartbeat = ProtoField.new("last_heartbeat (uint64_t)", "mavlink_proto.ISBD_LINK_STATUS_last_heartbeat", ftypes.UINT64, nil)
f.ISBD_LINK_STATUS_failed_sessions = ProtoField.new("failed_sessions (uint16_t)", "mavlink_proto.ISBD_LINK_STATUS_failed_sessions", ftypes.UINT16, nil)
f.ISBD_LINK_STATUS_successful_sessions = ProtoField.new("successful_sessions (uint16_t)", "mavlink_proto.ISBD_LINK_STATUS_successful_sessions", ftypes.UINT16, nil)
f.ISBD_LINK_STATUS_signal_quality = ProtoField.new("signal_quality (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_signal_quality", ftypes.UINT8, nil)
f.ISBD_LINK_STATUS_ring_pending = ProtoField.new("ring_pending (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_ring_pending", ftypes.UINT8, nil)
f.ISBD_LINK_STATUS_tx_session_pending = ProtoField.new("tx_session_pending (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_tx_session_pending", ftypes.UINT8, nil)
f.ISBD_LINK_STATUS_rx_session_pending = ProtoField.new("rx_session_pending (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_rx_session_pending", ftypes.UINT8, nil)

f.CELLULAR_CONFIG_enable_lte = ProtoField.new("enable_lte (uint8_t)", "mavlink_proto.CELLULAR_CONFIG_enable_lte", ftypes.UINT8, nil)
f.CELLULAR_CONFIG_enable_pin = ProtoField.new("enable_pin (uint8_t)", "mavlink_proto.CELLULAR_CONFIG_enable_pin", ftypes.UINT8, nil)
f.CELLULAR_CONFIG_pin = ProtoField.new("pin (char)", "mavlink_proto.CELLULAR_CONFIG_pin", ftypes.STRING, nil)
f.CELLULAR_CONFIG_new_pin = ProtoField.new("new_pin (char)", "mavlink_proto.CELLULAR_CONFIG_new_pin", ftypes.STRING, nil)
f.CELLULAR_CONFIG_apn = ProtoField.new("apn (char)", "mavlink_proto.CELLULAR_CONFIG_apn", ftypes.STRING, nil)
f.CELLULAR_CONFIG_puk = ProtoField.new("puk (char)", "mavlink_proto.CELLULAR_CONFIG_puk", ftypes.STRING, nil)
f.CELLULAR_CONFIG_roaming = ProtoField.new("roaming (uint8_t)", "mavlink_proto.CELLULAR_CONFIG_roaming", ftypes.UINT8, nil)
f.CELLULAR_CONFIG_response = ProtoField.new("response (CELLULAR_CONFIG_RESPONSE)", "mavlink_proto.CELLULAR_CONFIG_response", ftypes.UINT8, enumEntryName.CELLULAR_CONFIG_RESPONSE)

f.RAW_RPM_index = ProtoField.new("index (uint8_t)", "mavlink_proto.RAW_RPM_index", ftypes.UINT8, nil)
f.RAW_RPM_frequency = ProtoField.new("frequency (float)", "mavlink_proto.RAW_RPM_frequency", ftypes.FLOAT, nil)

f.UTM_GLOBAL_POSITION_time = ProtoField.new("time (uint64_t)", "mavlink_proto.UTM_GLOBAL_POSITION_time", ftypes.UINT64, nil)
f.UTM_GLOBAL_POSITION_uas_id_0 = ProtoField.new("uas_id[0] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_0", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_1 = ProtoField.new("uas_id[1] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_1", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_2 = ProtoField.new("uas_id[2] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_2", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_3 = ProtoField.new("uas_id[3] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_3", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_4 = ProtoField.new("uas_id[4] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_4", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_5 = ProtoField.new("uas_id[5] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_5", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_6 = ProtoField.new("uas_id[6] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_6", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_7 = ProtoField.new("uas_id[7] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_7", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_8 = ProtoField.new("uas_id[8] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_8", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_9 = ProtoField.new("uas_id[9] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_9", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_10 = ProtoField.new("uas_id[10] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_10", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_11 = ProtoField.new("uas_id[11] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_11", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_12 = ProtoField.new("uas_id[12] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_12", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_13 = ProtoField.new("uas_id[13] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_13", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_14 = ProtoField.new("uas_id[14] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_14", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_15 = ProtoField.new("uas_id[15] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_15", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_16 = ProtoField.new("uas_id[16] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_16", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_17 = ProtoField.new("uas_id[17] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_17", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_lat", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_lon", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_alt", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_relative_alt", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vx", ftypes.INT16, nil)
f.UTM_GLOBAL_POSITION_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vy", ftypes.INT16, nil)
f.UTM_GLOBAL_POSITION_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vz", ftypes.INT16, nil)
f.UTM_GLOBAL_POSITION_h_acc = ProtoField.new("h_acc (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_h_acc", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_v_acc = ProtoField.new("v_acc (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_v_acc", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_vel_acc = ProtoField.new("vel_acc (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vel_acc", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_next_lat = ProtoField.new("next_lat (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_next_lat", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_next_lon = ProtoField.new("next_lon (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_next_lon", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_next_alt = ProtoField.new("next_alt (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_next_alt", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_update_rate = ProtoField.new("update_rate (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_update_rate", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_flight_state = ProtoField.new("flight_state (UTM_FLIGHT_STATE)", "mavlink_proto.UTM_GLOBAL_POSITION_flight_state", ftypes.UINT8, enumEntryName.UTM_FLIGHT_STATE)
f.UTM_GLOBAL_POSITION_flags = ProtoField.new("flags (UTM_DATA_AVAIL_FLAGS)", "mavlink_proto.UTM_GLOBAL_POSITION_flags", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_TIME_VALID = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_TIME_VALID", "UTM_DATA_AVAIL_FLAGS_TIME_VALID")
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE")
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE")
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE")
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE")
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE")
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE")
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE")

f.DEBUG_FLOAT_ARRAY_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.DEBUG_FLOAT_ARRAY_time_usec", ftypes.UINT64, nil)
f.DEBUG_FLOAT_ARRAY_name = ProtoField.new("name (char)", "mavlink_proto.DEBUG_FLOAT_ARRAY_name", ftypes.STRING, nil)
f.DEBUG_FLOAT_ARRAY_array_id = ProtoField.new("array_id (uint16_t)", "mavlink_proto.DEBUG_FLOAT_ARRAY_array_id", ftypes.UINT16, nil)
f.DEBUG_FLOAT_ARRAY_data_0 = ProtoField.new("data[0] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_0", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_1 = ProtoField.new("data[1] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_1", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_2 = ProtoField.new("data[2] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_2", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_3 = ProtoField.new("data[3] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_3", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_4 = ProtoField.new("data[4] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_4", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_5 = ProtoField.new("data[5] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_5", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_6 = ProtoField.new("data[6] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_6", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_7 = ProtoField.new("data[7] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_7", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_8 = ProtoField.new("data[8] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_8", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_9 = ProtoField.new("data[9] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_9", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_10 = ProtoField.new("data[10] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_10", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_11 = ProtoField.new("data[11] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_11", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_12 = ProtoField.new("data[12] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_12", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_13 = ProtoField.new("data[13] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_13", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_14 = ProtoField.new("data[14] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_14", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_15 = ProtoField.new("data[15] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_15", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_16 = ProtoField.new("data[16] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_16", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_17 = ProtoField.new("data[17] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_17", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_18 = ProtoField.new("data[18] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_18", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_19 = ProtoField.new("data[19] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_19", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_20 = ProtoField.new("data[20] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_20", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_21 = ProtoField.new("data[21] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_21", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_22 = ProtoField.new("data[22] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_22", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_23 = ProtoField.new("data[23] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_23", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_24 = ProtoField.new("data[24] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_24", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_25 = ProtoField.new("data[25] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_25", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_26 = ProtoField.new("data[26] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_26", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_27 = ProtoField.new("data[27] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_27", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_28 = ProtoField.new("data[28] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_28", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_29 = ProtoField.new("data[29] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_29", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_30 = ProtoField.new("data[30] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_30", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_31 = ProtoField.new("data[31] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_31", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_32 = ProtoField.new("data[32] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_32", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_33 = ProtoField.new("data[33] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_33", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_34 = ProtoField.new("data[34] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_34", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_35 = ProtoField.new("data[35] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_35", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_36 = ProtoField.new("data[36] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_36", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_37 = ProtoField.new("data[37] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_37", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_38 = ProtoField.new("data[38] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_38", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_39 = ProtoField.new("data[39] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_39", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_40 = ProtoField.new("data[40] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_40", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_41 = ProtoField.new("data[41] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_41", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_42 = ProtoField.new("data[42] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_42", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_43 = ProtoField.new("data[43] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_43", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_44 = ProtoField.new("data[44] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_44", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_45 = ProtoField.new("data[45] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_45", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_46 = ProtoField.new("data[46] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_46", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_47 = ProtoField.new("data[47] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_47", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_48 = ProtoField.new("data[48] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_48", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_49 = ProtoField.new("data[49] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_49", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_50 = ProtoField.new("data[50] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_50", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_51 = ProtoField.new("data[51] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_51", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_52 = ProtoField.new("data[52] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_52", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_53 = ProtoField.new("data[53] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_53", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_54 = ProtoField.new("data[54] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_54", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_55 = ProtoField.new("data[55] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_55", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_56 = ProtoField.new("data[56] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_56", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_57 = ProtoField.new("data[57] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_57", ftypes.FLOAT, nil)

f.ORBIT_EXECUTION_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ORBIT_EXECUTION_STATUS_time_usec", ftypes.UINT64, nil)
f.ORBIT_EXECUTION_STATUS_radius = ProtoField.new("radius (float)", "mavlink_proto.ORBIT_EXECUTION_STATUS_radius", ftypes.FLOAT, nil)
f.ORBIT_EXECUTION_STATUS_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.ORBIT_EXECUTION_STATUS_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.ORBIT_EXECUTION_STATUS_x = ProtoField.new("x (int32_t)", "mavlink_proto.ORBIT_EXECUTION_STATUS_x", ftypes.INT32, nil)
f.ORBIT_EXECUTION_STATUS_y = ProtoField.new("y (int32_t)", "mavlink_proto.ORBIT_EXECUTION_STATUS_y", ftypes.INT32, nil)
f.ORBIT_EXECUTION_STATUS_z = ProtoField.new("z (float)", "mavlink_proto.ORBIT_EXECUTION_STATUS_z", ftypes.FLOAT, nil)

f.SMART_BATTERY_INFO_id = ProtoField.new("id (uint8_t)", "mavlink_proto.SMART_BATTERY_INFO_id", ftypes.UINT8, nil)
f.SMART_BATTERY_INFO_battery_function = ProtoField.new("battery_function (MAV_BATTERY_FUNCTION)", "mavlink_proto.SMART_BATTERY_INFO_battery_function", ftypes.UINT8, enumEntryName.MAV_BATTERY_FUNCTION)
f.SMART_BATTERY_INFO_type = ProtoField.new("type (MAV_BATTERY_TYPE)", "mavlink_proto.SMART_BATTERY_INFO_type", ftypes.UINT8, enumEntryName.MAV_BATTERY_TYPE)
f.SMART_BATTERY_INFO_capacity_full_specification = ProtoField.new("capacity_full_specification (int32_t)", "mavlink_proto.SMART_BATTERY_INFO_capacity_full_specification", ftypes.INT32, nil)
f.SMART_BATTERY_INFO_capacity_full = ProtoField.new("capacity_full (int32_t)", "mavlink_proto.SMART_BATTERY_INFO_capacity_full", ftypes.INT32, nil)
f.SMART_BATTERY_INFO_cycle_count = ProtoField.new("cycle_count (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_cycle_count", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_serial_number = ProtoField.new("serial_number (char)", "mavlink_proto.SMART_BATTERY_INFO_serial_number", ftypes.STRING, nil)
f.SMART_BATTERY_INFO_device_name = ProtoField.new("device_name (char)", "mavlink_proto.SMART_BATTERY_INFO_device_name", ftypes.STRING, nil)
f.SMART_BATTERY_INFO_weight = ProtoField.new("weight (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_weight", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_discharge_minimum_voltage = ProtoField.new("discharge_minimum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_discharge_minimum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_charging_minimum_voltage = ProtoField.new("charging_minimum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_charging_minimum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_resting_minimum_voltage = ProtoField.new("resting_minimum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_resting_minimum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_charging_maximum_voltage = ProtoField.new("charging_maximum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_charging_maximum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_cells_in_series = ProtoField.new("cells_in_series (uint8_t)", "mavlink_proto.SMART_BATTERY_INFO_cells_in_series", ftypes.UINT8, nil)
f.SMART_BATTERY_INFO_discharge_maximum_current = ProtoField.new("discharge_maximum_current (uint32_t)", "mavlink_proto.SMART_BATTERY_INFO_discharge_maximum_current", ftypes.UINT32, nil)
f.SMART_BATTERY_INFO_discharge_maximum_burst_current = ProtoField.new("discharge_maximum_burst_current (uint32_t)", "mavlink_proto.SMART_BATTERY_INFO_discharge_maximum_burst_current", ftypes.UINT32, nil)
f.SMART_BATTERY_INFO_manufacture_date = ProtoField.new("manufacture_date (char)", "mavlink_proto.SMART_BATTERY_INFO_manufacture_date", ftypes.STRING, nil)

f.GENERATOR_STATUS_status = ProtoField.new("status (MAV_GENERATOR_STATUS_FLAG)", "mavlink_proto.GENERATOR_STATUS_status", ftypes.UINT64, nil)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OFF = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OFF", "MAV_GENERATOR_STATUS_FLAG_OFF")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_READY = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_READY", "MAV_GENERATOR_STATUS_FLAG_READY")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_GENERATING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_GENERATING", "MAV_GENERATOR_STATUS_FLAG_GENERATING")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_CHARGING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_CHARGING", "MAV_GENERATOR_STATUS_FLAG_CHARGING")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_REDUCED_POWER = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER", "MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_MAXPOWER = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_MAXPOWER", "MAV_GENERATOR_STATUS_FLAG_MAXPOWER")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING", "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT", "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING", "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT", "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT", "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT", "MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING", "MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_COOLING_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING", "MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT", "MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT", "MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT", "MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT", "MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT", "MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_START_INHIBITED = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_START_INHIBITED", "MAV_GENERATOR_STATUS_FLAG_START_INHIBITED")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED", "MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_WARMING_UP = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_WARMING_UP", "MAV_GENERATOR_STATUS_FLAG_WARMING_UP")
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_IDLE = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_IDLE", "MAV_GENERATOR_STATUS_FLAG_IDLE")
f.GENERATOR_STATUS_generator_speed = ProtoField.new("generator_speed (uint16_t)", "mavlink_proto.GENERATOR_STATUS_generator_speed", ftypes.UINT16, nil)
f.GENERATOR_STATUS_battery_current = ProtoField.new("battery_current (float)", "mavlink_proto.GENERATOR_STATUS_battery_current", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_load_current = ProtoField.new("load_current (float)", "mavlink_proto.GENERATOR_STATUS_load_current", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_power_generated = ProtoField.new("power_generated (float)", "mavlink_proto.GENERATOR_STATUS_power_generated", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_bus_voltage = ProtoField.new("bus_voltage (float)", "mavlink_proto.GENERATOR_STATUS_bus_voltage", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_rectifier_temperature = ProtoField.new("rectifier_temperature (int16_t)", "mavlink_proto.GENERATOR_STATUS_rectifier_temperature", ftypes.INT16, nil)
f.GENERATOR_STATUS_bat_current_setpoint = ProtoField.new("bat_current_setpoint (float)", "mavlink_proto.GENERATOR_STATUS_bat_current_setpoint", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_generator_temperature = ProtoField.new("generator_temperature (int16_t)", "mavlink_proto.GENERATOR_STATUS_generator_temperature", ftypes.INT16, nil)
f.GENERATOR_STATUS_runtime = ProtoField.new("runtime (uint32_t)", "mavlink_proto.GENERATOR_STATUS_runtime", ftypes.UINT32, nil)
f.GENERATOR_STATUS_time_until_maintenance = ProtoField.new("time_until_maintenance (int32_t)", "mavlink_proto.GENERATOR_STATUS_time_until_maintenance", ftypes.INT32, nil)

f.ACTUATOR_OUTPUT_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_time_usec", ftypes.UINT64, nil)
f.ACTUATOR_OUTPUT_STATUS_active = ProtoField.new("active (uint32_t)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_active", ftypes.UINT32, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_0 = ProtoField.new("actuator[0] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_0", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_1 = ProtoField.new("actuator[1] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_1", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_2 = ProtoField.new("actuator[2] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_2", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_3 = ProtoField.new("actuator[3] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_3", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_4 = ProtoField.new("actuator[4] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_4", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_5 = ProtoField.new("actuator[5] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_5", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_6 = ProtoField.new("actuator[6] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_6", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_7 = ProtoField.new("actuator[7] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_7", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_8 = ProtoField.new("actuator[8] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_8", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_9 = ProtoField.new("actuator[9] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_9", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_10 = ProtoField.new("actuator[10] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_10", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_11 = ProtoField.new("actuator[11] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_11", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_12 = ProtoField.new("actuator[12] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_12", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_13 = ProtoField.new("actuator[13] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_13", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_14 = ProtoField.new("actuator[14] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_14", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_15 = ProtoField.new("actuator[15] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_15", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_16 = ProtoField.new("actuator[16] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_16", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_17 = ProtoField.new("actuator[17] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_17", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_18 = ProtoField.new("actuator[18] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_18", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_19 = ProtoField.new("actuator[19] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_19", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_20 = ProtoField.new("actuator[20] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_20", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_21 = ProtoField.new("actuator[21] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_21", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_22 = ProtoField.new("actuator[22] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_22", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_23 = ProtoField.new("actuator[23] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_23", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_24 = ProtoField.new("actuator[24] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_24", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_25 = ProtoField.new("actuator[25] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_25", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_26 = ProtoField.new("actuator[26] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_26", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_27 = ProtoField.new("actuator[27] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_27", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_28 = ProtoField.new("actuator[28] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_28", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_29 = ProtoField.new("actuator[29] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_29", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_30 = ProtoField.new("actuator[30] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_30", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_31 = ProtoField.new("actuator[31] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_31", ftypes.FLOAT, nil)

f.TIME_ESTIMATE_TO_TARGET_safe_return = ProtoField.new("safe_return (int32_t)", "mavlink_proto.TIME_ESTIMATE_TO_TARGET_safe_return", ftypes.INT32, nil)
f.TIME_ESTIMATE_TO_TARGET_land = ProtoField.new("land (int32_t)", "mavlink_proto.TIME_ESTIMATE_TO_TARGET_land", ftypes.INT32, nil)
f.TIME_ESTIMATE_TO_TARGET_mission_next_item = ProtoField.new("mission_next_item (int32_t)", "mavlink_proto.TIME_ESTIMATE_TO_TARGET_mission_next_item", ftypes.INT32, nil)
f.TIME_ESTIMATE_TO_TARGET_mission_end = ProtoField.new("mission_end (int32_t)", "mavlink_proto.TIME_ESTIMATE_TO_TARGET_mission_end", ftypes.INT32, nil)
f.TIME_ESTIMATE_TO_TARGET_commanded_action = ProtoField.new("commanded_action (int32_t)", "mavlink_proto.TIME_ESTIMATE_TO_TARGET_commanded_action", ftypes.INT32, nil)

f.TUNNEL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.TUNNEL_target_system", ftypes.UINT8, nil)
f.TUNNEL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.TUNNEL_target_component", ftypes.UINT8, nil)
f.TUNNEL_payload_type = ProtoField.new("payload_type (MAV_TUNNEL_PAYLOAD_TYPE)", "mavlink_proto.TUNNEL_payload_type", ftypes.UINT16, enumEntryName.MAV_TUNNEL_PAYLOAD_TYPE)
f.TUNNEL_payload_length = ProtoField.new("payload_length (uint8_t)", "mavlink_proto.TUNNEL_payload_length", ftypes.UINT8, nil)
f.TUNNEL_payload_0 = ProtoField.new("payload[0] (uint8_t)", "mavlink_proto.TUNNEL_payload_0", ftypes.UINT8, nil)
f.TUNNEL_payload_1 = ProtoField.new("payload[1] (uint8_t)", "mavlink_proto.TUNNEL_payload_1", ftypes.UINT8, nil)
f.TUNNEL_payload_2 = ProtoField.new("payload[2] (uint8_t)", "mavlink_proto.TUNNEL_payload_2", ftypes.UINT8, nil)
f.TUNNEL_payload_3 = ProtoField.new("payload[3] (uint8_t)", "mavlink_proto.TUNNEL_payload_3", ftypes.UINT8, nil)
f.TUNNEL_payload_4 = ProtoField.new("payload[4] (uint8_t)", "mavlink_proto.TUNNEL_payload_4", ftypes.UINT8, nil)
f.TUNNEL_payload_5 = ProtoField.new("payload[5] (uint8_t)", "mavlink_proto.TUNNEL_payload_5", ftypes.UINT8, nil)
f.TUNNEL_payload_6 = ProtoField.new("payload[6] (uint8_t)", "mavlink_proto.TUNNEL_payload_6", ftypes.UINT8, nil)
f.TUNNEL_payload_7 = ProtoField.new("payload[7] (uint8_t)", "mavlink_proto.TUNNEL_payload_7", ftypes.UINT8, nil)
f.TUNNEL_payload_8 = ProtoField.new("payload[8] (uint8_t)", "mavlink_proto.TUNNEL_payload_8", ftypes.UINT8, nil)
f.TUNNEL_payload_9 = ProtoField.new("payload[9] (uint8_t)", "mavlink_proto.TUNNEL_payload_9", ftypes.UINT8, nil)
f.TUNNEL_payload_10 = ProtoField.new("payload[10] (uint8_t)", "mavlink_proto.TUNNEL_payload_10", ftypes.UINT8, nil)
f.TUNNEL_payload_11 = ProtoField.new("payload[11] (uint8_t)", "mavlink_proto.TUNNEL_payload_11", ftypes.UINT8, nil)
f.TUNNEL_payload_12 = ProtoField.new("payload[12] (uint8_t)", "mavlink_proto.TUNNEL_payload_12", ftypes.UINT8, nil)
f.TUNNEL_payload_13 = ProtoField.new("payload[13] (uint8_t)", "mavlink_proto.TUNNEL_payload_13", ftypes.UINT8, nil)
f.TUNNEL_payload_14 = ProtoField.new("payload[14] (uint8_t)", "mavlink_proto.TUNNEL_payload_14", ftypes.UINT8, nil)
f.TUNNEL_payload_15 = ProtoField.new("payload[15] (uint8_t)", "mavlink_proto.TUNNEL_payload_15", ftypes.UINT8, nil)
f.TUNNEL_payload_16 = ProtoField.new("payload[16] (uint8_t)", "mavlink_proto.TUNNEL_payload_16", ftypes.UINT8, nil)
f.TUNNEL_payload_17 = ProtoField.new("payload[17] (uint8_t)", "mavlink_proto.TUNNEL_payload_17", ftypes.UINT8, nil)
f.TUNNEL_payload_18 = ProtoField.new("payload[18] (uint8_t)", "mavlink_proto.TUNNEL_payload_18", ftypes.UINT8, nil)
f.TUNNEL_payload_19 = ProtoField.new("payload[19] (uint8_t)", "mavlink_proto.TUNNEL_payload_19", ftypes.UINT8, nil)
f.TUNNEL_payload_20 = ProtoField.new("payload[20] (uint8_t)", "mavlink_proto.TUNNEL_payload_20", ftypes.UINT8, nil)
f.TUNNEL_payload_21 = ProtoField.new("payload[21] (uint8_t)", "mavlink_proto.TUNNEL_payload_21", ftypes.UINT8, nil)
f.TUNNEL_payload_22 = ProtoField.new("payload[22] (uint8_t)", "mavlink_proto.TUNNEL_payload_22", ftypes.UINT8, nil)
f.TUNNEL_payload_23 = ProtoField.new("payload[23] (uint8_t)", "mavlink_proto.TUNNEL_payload_23", ftypes.UINT8, nil)
f.TUNNEL_payload_24 = ProtoField.new("payload[24] (uint8_t)", "mavlink_proto.TUNNEL_payload_24", ftypes.UINT8, nil)
f.TUNNEL_payload_25 = ProtoField.new("payload[25] (uint8_t)", "mavlink_proto.TUNNEL_payload_25", ftypes.UINT8, nil)
f.TUNNEL_payload_26 = ProtoField.new("payload[26] (uint8_t)", "mavlink_proto.TUNNEL_payload_26", ftypes.UINT8, nil)
f.TUNNEL_payload_27 = ProtoField.new("payload[27] (uint8_t)", "mavlink_proto.TUNNEL_payload_27", ftypes.UINT8, nil)
f.TUNNEL_payload_28 = ProtoField.new("payload[28] (uint8_t)", "mavlink_proto.TUNNEL_payload_28", ftypes.UINT8, nil)
f.TUNNEL_payload_29 = ProtoField.new("payload[29] (uint8_t)", "mavlink_proto.TUNNEL_payload_29", ftypes.UINT8, nil)
f.TUNNEL_payload_30 = ProtoField.new("payload[30] (uint8_t)", "mavlink_proto.TUNNEL_payload_30", ftypes.UINT8, nil)
f.TUNNEL_payload_31 = ProtoField.new("payload[31] (uint8_t)", "mavlink_proto.TUNNEL_payload_31", ftypes.UINT8, nil)
f.TUNNEL_payload_32 = ProtoField.new("payload[32] (uint8_t)", "mavlink_proto.TUNNEL_payload_32", ftypes.UINT8, nil)
f.TUNNEL_payload_33 = ProtoField.new("payload[33] (uint8_t)", "mavlink_proto.TUNNEL_payload_33", ftypes.UINT8, nil)
f.TUNNEL_payload_34 = ProtoField.new("payload[34] (uint8_t)", "mavlink_proto.TUNNEL_payload_34", ftypes.UINT8, nil)
f.TUNNEL_payload_35 = ProtoField.new("payload[35] (uint8_t)", "mavlink_proto.TUNNEL_payload_35", ftypes.UINT8, nil)
f.TUNNEL_payload_36 = ProtoField.new("payload[36] (uint8_t)", "mavlink_proto.TUNNEL_payload_36", ftypes.UINT8, nil)
f.TUNNEL_payload_37 = ProtoField.new("payload[37] (uint8_t)", "mavlink_proto.TUNNEL_payload_37", ftypes.UINT8, nil)
f.TUNNEL_payload_38 = ProtoField.new("payload[38] (uint8_t)", "mavlink_proto.TUNNEL_payload_38", ftypes.UINT8, nil)
f.TUNNEL_payload_39 = ProtoField.new("payload[39] (uint8_t)", "mavlink_proto.TUNNEL_payload_39", ftypes.UINT8, nil)
f.TUNNEL_payload_40 = ProtoField.new("payload[40] (uint8_t)", "mavlink_proto.TUNNEL_payload_40", ftypes.UINT8, nil)
f.TUNNEL_payload_41 = ProtoField.new("payload[41] (uint8_t)", "mavlink_proto.TUNNEL_payload_41", ftypes.UINT8, nil)
f.TUNNEL_payload_42 = ProtoField.new("payload[42] (uint8_t)", "mavlink_proto.TUNNEL_payload_42", ftypes.UINT8, nil)
f.TUNNEL_payload_43 = ProtoField.new("payload[43] (uint8_t)", "mavlink_proto.TUNNEL_payload_43", ftypes.UINT8, nil)
f.TUNNEL_payload_44 = ProtoField.new("payload[44] (uint8_t)", "mavlink_proto.TUNNEL_payload_44", ftypes.UINT8, nil)
f.TUNNEL_payload_45 = ProtoField.new("payload[45] (uint8_t)", "mavlink_proto.TUNNEL_payload_45", ftypes.UINT8, nil)
f.TUNNEL_payload_46 = ProtoField.new("payload[46] (uint8_t)", "mavlink_proto.TUNNEL_payload_46", ftypes.UINT8, nil)
f.TUNNEL_payload_47 = ProtoField.new("payload[47] (uint8_t)", "mavlink_proto.TUNNEL_payload_47", ftypes.UINT8, nil)
f.TUNNEL_payload_48 = ProtoField.new("payload[48] (uint8_t)", "mavlink_proto.TUNNEL_payload_48", ftypes.UINT8, nil)
f.TUNNEL_payload_49 = ProtoField.new("payload[49] (uint8_t)", "mavlink_proto.TUNNEL_payload_49", ftypes.UINT8, nil)
f.TUNNEL_payload_50 = ProtoField.new("payload[50] (uint8_t)", "mavlink_proto.TUNNEL_payload_50", ftypes.UINT8, nil)
f.TUNNEL_payload_51 = ProtoField.new("payload[51] (uint8_t)", "mavlink_proto.TUNNEL_payload_51", ftypes.UINT8, nil)
f.TUNNEL_payload_52 = ProtoField.new("payload[52] (uint8_t)", "mavlink_proto.TUNNEL_payload_52", ftypes.UINT8, nil)
f.TUNNEL_payload_53 = ProtoField.new("payload[53] (uint8_t)", "mavlink_proto.TUNNEL_payload_53", ftypes.UINT8, nil)
f.TUNNEL_payload_54 = ProtoField.new("payload[54] (uint8_t)", "mavlink_proto.TUNNEL_payload_54", ftypes.UINT8, nil)
f.TUNNEL_payload_55 = ProtoField.new("payload[55] (uint8_t)", "mavlink_proto.TUNNEL_payload_55", ftypes.UINT8, nil)
f.TUNNEL_payload_56 = ProtoField.new("payload[56] (uint8_t)", "mavlink_proto.TUNNEL_payload_56", ftypes.UINT8, nil)
f.TUNNEL_payload_57 = ProtoField.new("payload[57] (uint8_t)", "mavlink_proto.TUNNEL_payload_57", ftypes.UINT8, nil)
f.TUNNEL_payload_58 = ProtoField.new("payload[58] (uint8_t)", "mavlink_proto.TUNNEL_payload_58", ftypes.UINT8, nil)
f.TUNNEL_payload_59 = ProtoField.new("payload[59] (uint8_t)", "mavlink_proto.TUNNEL_payload_59", ftypes.UINT8, nil)
f.TUNNEL_payload_60 = ProtoField.new("payload[60] (uint8_t)", "mavlink_proto.TUNNEL_payload_60", ftypes.UINT8, nil)
f.TUNNEL_payload_61 = ProtoField.new("payload[61] (uint8_t)", "mavlink_proto.TUNNEL_payload_61", ftypes.UINT8, nil)
f.TUNNEL_payload_62 = ProtoField.new("payload[62] (uint8_t)", "mavlink_proto.TUNNEL_payload_62", ftypes.UINT8, nil)
f.TUNNEL_payload_63 = ProtoField.new("payload[63] (uint8_t)", "mavlink_proto.TUNNEL_payload_63", ftypes.UINT8, nil)
f.TUNNEL_payload_64 = ProtoField.new("payload[64] (uint8_t)", "mavlink_proto.TUNNEL_payload_64", ftypes.UINT8, nil)
f.TUNNEL_payload_65 = ProtoField.new("payload[65] (uint8_t)", "mavlink_proto.TUNNEL_payload_65", ftypes.UINT8, nil)
f.TUNNEL_payload_66 = ProtoField.new("payload[66] (uint8_t)", "mavlink_proto.TUNNEL_payload_66", ftypes.UINT8, nil)
f.TUNNEL_payload_67 = ProtoField.new("payload[67] (uint8_t)", "mavlink_proto.TUNNEL_payload_67", ftypes.UINT8, nil)
f.TUNNEL_payload_68 = ProtoField.new("payload[68] (uint8_t)", "mavlink_proto.TUNNEL_payload_68", ftypes.UINT8, nil)
f.TUNNEL_payload_69 = ProtoField.new("payload[69] (uint8_t)", "mavlink_proto.TUNNEL_payload_69", ftypes.UINT8, nil)
f.TUNNEL_payload_70 = ProtoField.new("payload[70] (uint8_t)", "mavlink_proto.TUNNEL_payload_70", ftypes.UINT8, nil)
f.TUNNEL_payload_71 = ProtoField.new("payload[71] (uint8_t)", "mavlink_proto.TUNNEL_payload_71", ftypes.UINT8, nil)
f.TUNNEL_payload_72 = ProtoField.new("payload[72] (uint8_t)", "mavlink_proto.TUNNEL_payload_72", ftypes.UINT8, nil)
f.TUNNEL_payload_73 = ProtoField.new("payload[73] (uint8_t)", "mavlink_proto.TUNNEL_payload_73", ftypes.UINT8, nil)
f.TUNNEL_payload_74 = ProtoField.new("payload[74] (uint8_t)", "mavlink_proto.TUNNEL_payload_74", ftypes.UINT8, nil)
f.TUNNEL_payload_75 = ProtoField.new("payload[75] (uint8_t)", "mavlink_proto.TUNNEL_payload_75", ftypes.UINT8, nil)
f.TUNNEL_payload_76 = ProtoField.new("payload[76] (uint8_t)", "mavlink_proto.TUNNEL_payload_76", ftypes.UINT8, nil)
f.TUNNEL_payload_77 = ProtoField.new("payload[77] (uint8_t)", "mavlink_proto.TUNNEL_payload_77", ftypes.UINT8, nil)
f.TUNNEL_payload_78 = ProtoField.new("payload[78] (uint8_t)", "mavlink_proto.TUNNEL_payload_78", ftypes.UINT8, nil)
f.TUNNEL_payload_79 = ProtoField.new("payload[79] (uint8_t)", "mavlink_proto.TUNNEL_payload_79", ftypes.UINT8, nil)
f.TUNNEL_payload_80 = ProtoField.new("payload[80] (uint8_t)", "mavlink_proto.TUNNEL_payload_80", ftypes.UINT8, nil)
f.TUNNEL_payload_81 = ProtoField.new("payload[81] (uint8_t)", "mavlink_proto.TUNNEL_payload_81", ftypes.UINT8, nil)
f.TUNNEL_payload_82 = ProtoField.new("payload[82] (uint8_t)", "mavlink_proto.TUNNEL_payload_82", ftypes.UINT8, nil)
f.TUNNEL_payload_83 = ProtoField.new("payload[83] (uint8_t)", "mavlink_proto.TUNNEL_payload_83", ftypes.UINT8, nil)
f.TUNNEL_payload_84 = ProtoField.new("payload[84] (uint8_t)", "mavlink_proto.TUNNEL_payload_84", ftypes.UINT8, nil)
f.TUNNEL_payload_85 = ProtoField.new("payload[85] (uint8_t)", "mavlink_proto.TUNNEL_payload_85", ftypes.UINT8, nil)
f.TUNNEL_payload_86 = ProtoField.new("payload[86] (uint8_t)", "mavlink_proto.TUNNEL_payload_86", ftypes.UINT8, nil)
f.TUNNEL_payload_87 = ProtoField.new("payload[87] (uint8_t)", "mavlink_proto.TUNNEL_payload_87", ftypes.UINT8, nil)
f.TUNNEL_payload_88 = ProtoField.new("payload[88] (uint8_t)", "mavlink_proto.TUNNEL_payload_88", ftypes.UINT8, nil)
f.TUNNEL_payload_89 = ProtoField.new("payload[89] (uint8_t)", "mavlink_proto.TUNNEL_payload_89", ftypes.UINT8, nil)
f.TUNNEL_payload_90 = ProtoField.new("payload[90] (uint8_t)", "mavlink_proto.TUNNEL_payload_90", ftypes.UINT8, nil)
f.TUNNEL_payload_91 = ProtoField.new("payload[91] (uint8_t)", "mavlink_proto.TUNNEL_payload_91", ftypes.UINT8, nil)
f.TUNNEL_payload_92 = ProtoField.new("payload[92] (uint8_t)", "mavlink_proto.TUNNEL_payload_92", ftypes.UINT8, nil)
f.TUNNEL_payload_93 = ProtoField.new("payload[93] (uint8_t)", "mavlink_proto.TUNNEL_payload_93", ftypes.UINT8, nil)
f.TUNNEL_payload_94 = ProtoField.new("payload[94] (uint8_t)", "mavlink_proto.TUNNEL_payload_94", ftypes.UINT8, nil)
f.TUNNEL_payload_95 = ProtoField.new("payload[95] (uint8_t)", "mavlink_proto.TUNNEL_payload_95", ftypes.UINT8, nil)
f.TUNNEL_payload_96 = ProtoField.new("payload[96] (uint8_t)", "mavlink_proto.TUNNEL_payload_96", ftypes.UINT8, nil)
f.TUNNEL_payload_97 = ProtoField.new("payload[97] (uint8_t)", "mavlink_proto.TUNNEL_payload_97", ftypes.UINT8, nil)
f.TUNNEL_payload_98 = ProtoField.new("payload[98] (uint8_t)", "mavlink_proto.TUNNEL_payload_98", ftypes.UINT8, nil)
f.TUNNEL_payload_99 = ProtoField.new("payload[99] (uint8_t)", "mavlink_proto.TUNNEL_payload_99", ftypes.UINT8, nil)
f.TUNNEL_payload_100 = ProtoField.new("payload[100] (uint8_t)", "mavlink_proto.TUNNEL_payload_100", ftypes.UINT8, nil)
f.TUNNEL_payload_101 = ProtoField.new("payload[101] (uint8_t)", "mavlink_proto.TUNNEL_payload_101", ftypes.UINT8, nil)
f.TUNNEL_payload_102 = ProtoField.new("payload[102] (uint8_t)", "mavlink_proto.TUNNEL_payload_102", ftypes.UINT8, nil)
f.TUNNEL_payload_103 = ProtoField.new("payload[103] (uint8_t)", "mavlink_proto.TUNNEL_payload_103", ftypes.UINT8, nil)
f.TUNNEL_payload_104 = ProtoField.new("payload[104] (uint8_t)", "mavlink_proto.TUNNEL_payload_104", ftypes.UINT8, nil)
f.TUNNEL_payload_105 = ProtoField.new("payload[105] (uint8_t)", "mavlink_proto.TUNNEL_payload_105", ftypes.UINT8, nil)
f.TUNNEL_payload_106 = ProtoField.new("payload[106] (uint8_t)", "mavlink_proto.TUNNEL_payload_106", ftypes.UINT8, nil)
f.TUNNEL_payload_107 = ProtoField.new("payload[107] (uint8_t)", "mavlink_proto.TUNNEL_payload_107", ftypes.UINT8, nil)
f.TUNNEL_payload_108 = ProtoField.new("payload[108] (uint8_t)", "mavlink_proto.TUNNEL_payload_108", ftypes.UINT8, nil)
f.TUNNEL_payload_109 = ProtoField.new("payload[109] (uint8_t)", "mavlink_proto.TUNNEL_payload_109", ftypes.UINT8, nil)
f.TUNNEL_payload_110 = ProtoField.new("payload[110] (uint8_t)", "mavlink_proto.TUNNEL_payload_110", ftypes.UINT8, nil)
f.TUNNEL_payload_111 = ProtoField.new("payload[111] (uint8_t)", "mavlink_proto.TUNNEL_payload_111", ftypes.UINT8, nil)
f.TUNNEL_payload_112 = ProtoField.new("payload[112] (uint8_t)", "mavlink_proto.TUNNEL_payload_112", ftypes.UINT8, nil)
f.TUNNEL_payload_113 = ProtoField.new("payload[113] (uint8_t)", "mavlink_proto.TUNNEL_payload_113", ftypes.UINT8, nil)
f.TUNNEL_payload_114 = ProtoField.new("payload[114] (uint8_t)", "mavlink_proto.TUNNEL_payload_114", ftypes.UINT8, nil)
f.TUNNEL_payload_115 = ProtoField.new("payload[115] (uint8_t)", "mavlink_proto.TUNNEL_payload_115", ftypes.UINT8, nil)
f.TUNNEL_payload_116 = ProtoField.new("payload[116] (uint8_t)", "mavlink_proto.TUNNEL_payload_116", ftypes.UINT8, nil)
f.TUNNEL_payload_117 = ProtoField.new("payload[117] (uint8_t)", "mavlink_proto.TUNNEL_payload_117", ftypes.UINT8, nil)
f.TUNNEL_payload_118 = ProtoField.new("payload[118] (uint8_t)", "mavlink_proto.TUNNEL_payload_118", ftypes.UINT8, nil)
f.TUNNEL_payload_119 = ProtoField.new("payload[119] (uint8_t)", "mavlink_proto.TUNNEL_payload_119", ftypes.UINT8, nil)
f.TUNNEL_payload_120 = ProtoField.new("payload[120] (uint8_t)", "mavlink_proto.TUNNEL_payload_120", ftypes.UINT8, nil)
f.TUNNEL_payload_121 = ProtoField.new("payload[121] (uint8_t)", "mavlink_proto.TUNNEL_payload_121", ftypes.UINT8, nil)
f.TUNNEL_payload_122 = ProtoField.new("payload[122] (uint8_t)", "mavlink_proto.TUNNEL_payload_122", ftypes.UINT8, nil)
f.TUNNEL_payload_123 = ProtoField.new("payload[123] (uint8_t)", "mavlink_proto.TUNNEL_payload_123", ftypes.UINT8, nil)
f.TUNNEL_payload_124 = ProtoField.new("payload[124] (uint8_t)", "mavlink_proto.TUNNEL_payload_124", ftypes.UINT8, nil)
f.TUNNEL_payload_125 = ProtoField.new("payload[125] (uint8_t)", "mavlink_proto.TUNNEL_payload_125", ftypes.UINT8, nil)
f.TUNNEL_payload_126 = ProtoField.new("payload[126] (uint8_t)", "mavlink_proto.TUNNEL_payload_126", ftypes.UINT8, nil)
f.TUNNEL_payload_127 = ProtoField.new("payload[127] (uint8_t)", "mavlink_proto.TUNNEL_payload_127", ftypes.UINT8, nil)

f.CAN_FRAME_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CAN_FRAME_target_system", ftypes.UINT8, nil)
f.CAN_FRAME_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CAN_FRAME_target_component", ftypes.UINT8, nil)
f.CAN_FRAME_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.CAN_FRAME_bus", ftypes.UINT8, nil)
f.CAN_FRAME_len = ProtoField.new("len (uint8_t)", "mavlink_proto.CAN_FRAME_len", ftypes.UINT8, nil)
f.CAN_FRAME_id = ProtoField.new("id (uint32_t)", "mavlink_proto.CAN_FRAME_id", ftypes.UINT32, nil)
f.CAN_FRAME_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.CAN_FRAME_data_0", ftypes.UINT8, nil)
f.CAN_FRAME_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.CAN_FRAME_data_1", ftypes.UINT8, nil)
f.CAN_FRAME_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.CAN_FRAME_data_2", ftypes.UINT8, nil)
f.CAN_FRAME_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.CAN_FRAME_data_3", ftypes.UINT8, nil)
f.CAN_FRAME_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.CAN_FRAME_data_4", ftypes.UINT8, nil)
f.CAN_FRAME_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.CAN_FRAME_data_5", ftypes.UINT8, nil)
f.CAN_FRAME_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.CAN_FRAME_data_6", ftypes.UINT8, nil)
f.CAN_FRAME_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.CAN_FRAME_data_7", ftypes.UINT8, nil)

f.ONBOARD_COMPUTER_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_time_usec", ftypes.UINT64, nil)
f.ONBOARD_COMPUTER_STATUS_uptime = ProtoField.new("uptime (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_uptime", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_type = ProtoField.new("type (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_type", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_0 = ProtoField.new("cpu_cores[0] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_0", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_1 = ProtoField.new("cpu_cores[1] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_1", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_2 = ProtoField.new("cpu_cores[2] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_2", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_3 = ProtoField.new("cpu_cores[3] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_3", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_4 = ProtoField.new("cpu_cores[4] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_4", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_5 = ProtoField.new("cpu_cores[5] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_5", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_6 = ProtoField.new("cpu_cores[6] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_6", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_cores_7 = ProtoField.new("cpu_cores[7] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_cores_7", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_0 = ProtoField.new("cpu_combined[0] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_0", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_1 = ProtoField.new("cpu_combined[1] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_1", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_2 = ProtoField.new("cpu_combined[2] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_2", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_3 = ProtoField.new("cpu_combined[3] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_3", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_4 = ProtoField.new("cpu_combined[4] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_4", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_5 = ProtoField.new("cpu_combined[5] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_5", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_6 = ProtoField.new("cpu_combined[6] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_6", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_7 = ProtoField.new("cpu_combined[7] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_7", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_8 = ProtoField.new("cpu_combined[8] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_8", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_cpu_combined_9 = ProtoField.new("cpu_combined[9] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_cpu_combined_9", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_cores_0 = ProtoField.new("gpu_cores[0] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_cores_0", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_cores_1 = ProtoField.new("gpu_cores[1] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_cores_1", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_cores_2 = ProtoField.new("gpu_cores[2] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_cores_2", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_cores_3 = ProtoField.new("gpu_cores[3] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_cores_3", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_0 = ProtoField.new("gpu_combined[0] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_0", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_1 = ProtoField.new("gpu_combined[1] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_1", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_2 = ProtoField.new("gpu_combined[2] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_2", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_3 = ProtoField.new("gpu_combined[3] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_3", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_4 = ProtoField.new("gpu_combined[4] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_4", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_5 = ProtoField.new("gpu_combined[5] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_5", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_6 = ProtoField.new("gpu_combined[6] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_6", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_7 = ProtoField.new("gpu_combined[7] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_7", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_8 = ProtoField.new("gpu_combined[8] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_8", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_gpu_combined_9 = ProtoField.new("gpu_combined[9] (uint8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_gpu_combined_9", ftypes.UINT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_board = ProtoField.new("temperature_board (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_board", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_0 = ProtoField.new("temperature_core[0] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_0", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_1 = ProtoField.new("temperature_core[1] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_1", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_2 = ProtoField.new("temperature_core[2] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_2", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_3 = ProtoField.new("temperature_core[3] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_3", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_4 = ProtoField.new("temperature_core[4] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_4", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_5 = ProtoField.new("temperature_core[5] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_5", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_6 = ProtoField.new("temperature_core[6] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_6", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_temperature_core_7 = ProtoField.new("temperature_core[7] (int8_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_temperature_core_7", ftypes.INT8, nil)
f.ONBOARD_COMPUTER_STATUS_fan_speed_0 = ProtoField.new("fan_speed[0] (int16_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_fan_speed_0", ftypes.INT16, nil)
f.ONBOARD_COMPUTER_STATUS_fan_speed_1 = ProtoField.new("fan_speed[1] (int16_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_fan_speed_1", ftypes.INT16, nil)
f.ONBOARD_COMPUTER_STATUS_fan_speed_2 = ProtoField.new("fan_speed[2] (int16_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_fan_speed_2", ftypes.INT16, nil)
f.ONBOARD_COMPUTER_STATUS_fan_speed_3 = ProtoField.new("fan_speed[3] (int16_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_fan_speed_3", ftypes.INT16, nil)
f.ONBOARD_COMPUTER_STATUS_ram_usage = ProtoField.new("ram_usage (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_ram_usage", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_ram_total = ProtoField.new("ram_total (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_ram_total", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_type_0 = ProtoField.new("storage_type[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_type_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_type_1 = ProtoField.new("storage_type[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_type_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_type_2 = ProtoField.new("storage_type[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_type_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_type_3 = ProtoField.new("storage_type[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_type_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_usage_0 = ProtoField.new("storage_usage[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_usage_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_usage_1 = ProtoField.new("storage_usage[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_usage_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_usage_2 = ProtoField.new("storage_usage[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_usage_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_usage_3 = ProtoField.new("storage_usage[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_usage_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_total_0 = ProtoField.new("storage_total[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_total_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_total_1 = ProtoField.new("storage_total[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_total_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_total_2 = ProtoField.new("storage_total[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_total_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_storage_total_3 = ProtoField.new("storage_total[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_storage_total_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_type_0 = ProtoField.new("link_type[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_type_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_type_1 = ProtoField.new("link_type[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_type_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_type_2 = ProtoField.new("link_type[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_type_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_type_3 = ProtoField.new("link_type[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_type_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_type_4 = ProtoField.new("link_type[4] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_type_4", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_type_5 = ProtoField.new("link_type[5] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_type_5", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_rate_0 = ProtoField.new("link_tx_rate[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_rate_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_rate_1 = ProtoField.new("link_tx_rate[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_rate_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_rate_2 = ProtoField.new("link_tx_rate[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_rate_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_rate_3 = ProtoField.new("link_tx_rate[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_rate_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_rate_4 = ProtoField.new("link_tx_rate[4] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_rate_4", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_rate_5 = ProtoField.new("link_tx_rate[5] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_rate_5", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_rate_0 = ProtoField.new("link_rx_rate[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_rate_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_rate_1 = ProtoField.new("link_rx_rate[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_rate_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_rate_2 = ProtoField.new("link_rx_rate[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_rate_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_rate_3 = ProtoField.new("link_rx_rate[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_rate_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_rate_4 = ProtoField.new("link_rx_rate[4] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_rate_4", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_rate_5 = ProtoField.new("link_rx_rate[5] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_rate_5", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_max_0 = ProtoField.new("link_tx_max[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_max_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_max_1 = ProtoField.new("link_tx_max[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_max_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_max_2 = ProtoField.new("link_tx_max[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_max_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_max_3 = ProtoField.new("link_tx_max[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_max_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_max_4 = ProtoField.new("link_tx_max[4] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_max_4", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_tx_max_5 = ProtoField.new("link_tx_max[5] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_tx_max_5", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_max_0 = ProtoField.new("link_rx_max[0] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_max_0", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_max_1 = ProtoField.new("link_rx_max[1] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_max_1", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_max_2 = ProtoField.new("link_rx_max[2] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_max_2", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_max_3 = ProtoField.new("link_rx_max[3] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_max_3", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_max_4 = ProtoField.new("link_rx_max[4] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_max_4", ftypes.UINT32, nil)
f.ONBOARD_COMPUTER_STATUS_link_rx_max_5 = ProtoField.new("link_rx_max[5] (uint32_t)", "mavlink_proto.ONBOARD_COMPUTER_STATUS_link_rx_max_5", ftypes.UINT32, nil)

f.COMPONENT_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.COMPONENT_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.COMPONENT_INFORMATION_general_metadata_file_crc = ProtoField.new("general_metadata_file_crc (uint32_t)", "mavlink_proto.COMPONENT_INFORMATION_general_metadata_file_crc", ftypes.UINT32, nil)
f.COMPONENT_INFORMATION_general_metadata_uri = ProtoField.new("general_metadata_uri (char)", "mavlink_proto.COMPONENT_INFORMATION_general_metadata_uri", ftypes.STRING, nil)
f.COMPONENT_INFORMATION_peripherals_metadata_file_crc = ProtoField.new("peripherals_metadata_file_crc (uint32_t)", "mavlink_proto.COMPONENT_INFORMATION_peripherals_metadata_file_crc", ftypes.UINT32, nil)
f.COMPONENT_INFORMATION_peripherals_metadata_uri = ProtoField.new("peripherals_metadata_uri (char)", "mavlink_proto.COMPONENT_INFORMATION_peripherals_metadata_uri", ftypes.STRING, nil)

f.COMPONENT_METADATA_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.COMPONENT_METADATA_time_boot_ms", ftypes.UINT32, nil)
f.COMPONENT_METADATA_file_crc = ProtoField.new("file_crc (uint32_t)", "mavlink_proto.COMPONENT_METADATA_file_crc", ftypes.UINT32, nil)
f.COMPONENT_METADATA_uri = ProtoField.new("uri (char)", "mavlink_proto.COMPONENT_METADATA_uri", ftypes.STRING, nil)

f.PLAY_TUNE_V2_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PLAY_TUNE_V2_target_system", ftypes.UINT8, nil)
f.PLAY_TUNE_V2_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PLAY_TUNE_V2_target_component", ftypes.UINT8, nil)
f.PLAY_TUNE_V2_format = ProtoField.new("format (TUNE_FORMAT)", "mavlink_proto.PLAY_TUNE_V2_format", ftypes.UINT32, enumEntryName.TUNE_FORMAT)
f.PLAY_TUNE_V2_tune = ProtoField.new("tune (char)", "mavlink_proto.PLAY_TUNE_V2_tune", ftypes.STRING, nil)

f.SUPPORTED_TUNES_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SUPPORTED_TUNES_target_system", ftypes.UINT8, nil)
f.SUPPORTED_TUNES_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SUPPORTED_TUNES_target_component", ftypes.UINT8, nil)
f.SUPPORTED_TUNES_format = ProtoField.new("format (TUNE_FORMAT)", "mavlink_proto.SUPPORTED_TUNES_format", ftypes.UINT32, enumEntryName.TUNE_FORMAT)

f.EVENT_destination_component = ProtoField.new("destination_component (uint8_t)", "mavlink_proto.EVENT_destination_component", ftypes.UINT8, nil)
f.EVENT_destination_system = ProtoField.new("destination_system (uint8_t)", "mavlink_proto.EVENT_destination_system", ftypes.UINT8, nil)
f.EVENT_id = ProtoField.new("id (uint32_t)", "mavlink_proto.EVENT_id", ftypes.UINT32, nil)
f.EVENT_event_time_boot_ms = ProtoField.new("event_time_boot_ms (uint32_t)", "mavlink_proto.EVENT_event_time_boot_ms", ftypes.UINT32, nil)
f.EVENT_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.EVENT_sequence", ftypes.UINT16, nil)
f.EVENT_log_levels = ProtoField.new("log_levels (uint8_t)", "mavlink_proto.EVENT_log_levels", ftypes.UINT8, nil)
f.EVENT_arguments_0 = ProtoField.new("arguments[0] (uint8_t)", "mavlink_proto.EVENT_arguments_0", ftypes.UINT8, nil)
f.EVENT_arguments_1 = ProtoField.new("arguments[1] (uint8_t)", "mavlink_proto.EVENT_arguments_1", ftypes.UINT8, nil)
f.EVENT_arguments_2 = ProtoField.new("arguments[2] (uint8_t)", "mavlink_proto.EVENT_arguments_2", ftypes.UINT8, nil)
f.EVENT_arguments_3 = ProtoField.new("arguments[3] (uint8_t)", "mavlink_proto.EVENT_arguments_3", ftypes.UINT8, nil)
f.EVENT_arguments_4 = ProtoField.new("arguments[4] (uint8_t)", "mavlink_proto.EVENT_arguments_4", ftypes.UINT8, nil)
f.EVENT_arguments_5 = ProtoField.new("arguments[5] (uint8_t)", "mavlink_proto.EVENT_arguments_5", ftypes.UINT8, nil)
f.EVENT_arguments_6 = ProtoField.new("arguments[6] (uint8_t)", "mavlink_proto.EVENT_arguments_6", ftypes.UINT8, nil)
f.EVENT_arguments_7 = ProtoField.new("arguments[7] (uint8_t)", "mavlink_proto.EVENT_arguments_7", ftypes.UINT8, nil)
f.EVENT_arguments_8 = ProtoField.new("arguments[8] (uint8_t)", "mavlink_proto.EVENT_arguments_8", ftypes.UINT8, nil)
f.EVENT_arguments_9 = ProtoField.new("arguments[9] (uint8_t)", "mavlink_proto.EVENT_arguments_9", ftypes.UINT8, nil)
f.EVENT_arguments_10 = ProtoField.new("arguments[10] (uint8_t)", "mavlink_proto.EVENT_arguments_10", ftypes.UINT8, nil)
f.EVENT_arguments_11 = ProtoField.new("arguments[11] (uint8_t)", "mavlink_proto.EVENT_arguments_11", ftypes.UINT8, nil)
f.EVENT_arguments_12 = ProtoField.new("arguments[12] (uint8_t)", "mavlink_proto.EVENT_arguments_12", ftypes.UINT8, nil)
f.EVENT_arguments_13 = ProtoField.new("arguments[13] (uint8_t)", "mavlink_proto.EVENT_arguments_13", ftypes.UINT8, nil)
f.EVENT_arguments_14 = ProtoField.new("arguments[14] (uint8_t)", "mavlink_proto.EVENT_arguments_14", ftypes.UINT8, nil)
f.EVENT_arguments_15 = ProtoField.new("arguments[15] (uint8_t)", "mavlink_proto.EVENT_arguments_15", ftypes.UINT8, nil)
f.EVENT_arguments_16 = ProtoField.new("arguments[16] (uint8_t)", "mavlink_proto.EVENT_arguments_16", ftypes.UINT8, nil)
f.EVENT_arguments_17 = ProtoField.new("arguments[17] (uint8_t)", "mavlink_proto.EVENT_arguments_17", ftypes.UINT8, nil)
f.EVENT_arguments_18 = ProtoField.new("arguments[18] (uint8_t)", "mavlink_proto.EVENT_arguments_18", ftypes.UINT8, nil)
f.EVENT_arguments_19 = ProtoField.new("arguments[19] (uint8_t)", "mavlink_proto.EVENT_arguments_19", ftypes.UINT8, nil)
f.EVENT_arguments_20 = ProtoField.new("arguments[20] (uint8_t)", "mavlink_proto.EVENT_arguments_20", ftypes.UINT8, nil)
f.EVENT_arguments_21 = ProtoField.new("arguments[21] (uint8_t)", "mavlink_proto.EVENT_arguments_21", ftypes.UINT8, nil)
f.EVENT_arguments_22 = ProtoField.new("arguments[22] (uint8_t)", "mavlink_proto.EVENT_arguments_22", ftypes.UINT8, nil)
f.EVENT_arguments_23 = ProtoField.new("arguments[23] (uint8_t)", "mavlink_proto.EVENT_arguments_23", ftypes.UINT8, nil)
f.EVENT_arguments_24 = ProtoField.new("arguments[24] (uint8_t)", "mavlink_proto.EVENT_arguments_24", ftypes.UINT8, nil)
f.EVENT_arguments_25 = ProtoField.new("arguments[25] (uint8_t)", "mavlink_proto.EVENT_arguments_25", ftypes.UINT8, nil)
f.EVENT_arguments_26 = ProtoField.new("arguments[26] (uint8_t)", "mavlink_proto.EVENT_arguments_26", ftypes.UINT8, nil)
f.EVENT_arguments_27 = ProtoField.new("arguments[27] (uint8_t)", "mavlink_proto.EVENT_arguments_27", ftypes.UINT8, nil)
f.EVENT_arguments_28 = ProtoField.new("arguments[28] (uint8_t)", "mavlink_proto.EVENT_arguments_28", ftypes.UINT8, nil)
f.EVENT_arguments_29 = ProtoField.new("arguments[29] (uint8_t)", "mavlink_proto.EVENT_arguments_29", ftypes.UINT8, nil)
f.EVENT_arguments_30 = ProtoField.new("arguments[30] (uint8_t)", "mavlink_proto.EVENT_arguments_30", ftypes.UINT8, nil)
f.EVENT_arguments_31 = ProtoField.new("arguments[31] (uint8_t)", "mavlink_proto.EVENT_arguments_31", ftypes.UINT8, nil)
f.EVENT_arguments_32 = ProtoField.new("arguments[32] (uint8_t)", "mavlink_proto.EVENT_arguments_32", ftypes.UINT8, nil)
f.EVENT_arguments_33 = ProtoField.new("arguments[33] (uint8_t)", "mavlink_proto.EVENT_arguments_33", ftypes.UINT8, nil)
f.EVENT_arguments_34 = ProtoField.new("arguments[34] (uint8_t)", "mavlink_proto.EVENT_arguments_34", ftypes.UINT8, nil)
f.EVENT_arguments_35 = ProtoField.new("arguments[35] (uint8_t)", "mavlink_proto.EVENT_arguments_35", ftypes.UINT8, nil)
f.EVENT_arguments_36 = ProtoField.new("arguments[36] (uint8_t)", "mavlink_proto.EVENT_arguments_36", ftypes.UINT8, nil)
f.EVENT_arguments_37 = ProtoField.new("arguments[37] (uint8_t)", "mavlink_proto.EVENT_arguments_37", ftypes.UINT8, nil)
f.EVENT_arguments_38 = ProtoField.new("arguments[38] (uint8_t)", "mavlink_proto.EVENT_arguments_38", ftypes.UINT8, nil)
f.EVENT_arguments_39 = ProtoField.new("arguments[39] (uint8_t)", "mavlink_proto.EVENT_arguments_39", ftypes.UINT8, nil)

f.CURRENT_EVENT_SEQUENCE_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.CURRENT_EVENT_SEQUENCE_sequence", ftypes.UINT16, nil)
f.CURRENT_EVENT_SEQUENCE_flags = ProtoField.new("flags (MAV_EVENT_CURRENT_SEQUENCE_FLAGS)", "mavlink_proto.CURRENT_EVENT_SEQUENCE_flags", ftypes.UINT8, nil)
f.CURRENT_EVENT_SEQUENCE_flags_flagMAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET = ProtoField.bool("mavlink_proto.CURRENT_EVENT_SEQUENCE_flags.MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET", "MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET")
f.CURRENT_EVENT_SEQUENCE_flags_flagMAV_EVENT_CURRENT_SEQUENCE_FLAGS_ENUM_END = ProtoField.bool("mavlink_proto.CURRENT_EVENT_SEQUENCE_flags.MAV_EVENT_CURRENT_SEQUENCE_FLAGS_ENUM_END", "MAV_EVENT_CURRENT_SEQUENCE_FLAGS_ENUM_END")

f.REQUEST_EVENT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.REQUEST_EVENT_target_system", ftypes.UINT8, nil)
f.REQUEST_EVENT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.REQUEST_EVENT_target_component", ftypes.UINT8, nil)
f.REQUEST_EVENT_first_sequence = ProtoField.new("first_sequence (uint16_t)", "mavlink_proto.REQUEST_EVENT_first_sequence", ftypes.UINT16, nil)
f.REQUEST_EVENT_last_sequence = ProtoField.new("last_sequence (uint16_t)", "mavlink_proto.REQUEST_EVENT_last_sequence", ftypes.UINT16, nil)

f.RESPONSE_EVENT_ERROR_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.RESPONSE_EVENT_ERROR_target_system", ftypes.UINT8, nil)
f.RESPONSE_EVENT_ERROR_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.RESPONSE_EVENT_ERROR_target_component", ftypes.UINT8, nil)
f.RESPONSE_EVENT_ERROR_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.RESPONSE_EVENT_ERROR_sequence", ftypes.UINT16, nil)
f.RESPONSE_EVENT_ERROR_sequence_oldest_available = ProtoField.new("sequence_oldest_available (uint16_t)", "mavlink_proto.RESPONSE_EVENT_ERROR_sequence_oldest_available", ftypes.UINT16, nil)
f.RESPONSE_EVENT_ERROR_reason = ProtoField.new("reason (MAV_EVENT_ERROR_REASON)", "mavlink_proto.RESPONSE_EVENT_ERROR_reason", ftypes.UINT8, enumEntryName.MAV_EVENT_ERROR_REASON)

f.CANFD_FRAME_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CANFD_FRAME_target_system", ftypes.UINT8, nil)
f.CANFD_FRAME_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CANFD_FRAME_target_component", ftypes.UINT8, nil)
f.CANFD_FRAME_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.CANFD_FRAME_bus", ftypes.UINT8, nil)
f.CANFD_FRAME_len = ProtoField.new("len (uint8_t)", "mavlink_proto.CANFD_FRAME_len", ftypes.UINT8, nil)
f.CANFD_FRAME_id = ProtoField.new("id (uint32_t)", "mavlink_proto.CANFD_FRAME_id", ftypes.UINT32, nil)
f.CANFD_FRAME_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_0", ftypes.UINT8, nil)
f.CANFD_FRAME_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_1", ftypes.UINT8, nil)
f.CANFD_FRAME_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_2", ftypes.UINT8, nil)
f.CANFD_FRAME_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_3", ftypes.UINT8, nil)
f.CANFD_FRAME_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_4", ftypes.UINT8, nil)
f.CANFD_FRAME_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_5", ftypes.UINT8, nil)
f.CANFD_FRAME_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_6", ftypes.UINT8, nil)
f.CANFD_FRAME_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_7", ftypes.UINT8, nil)
f.CANFD_FRAME_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_8", ftypes.UINT8, nil)
f.CANFD_FRAME_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_9", ftypes.UINT8, nil)
f.CANFD_FRAME_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_10", ftypes.UINT8, nil)
f.CANFD_FRAME_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_11", ftypes.UINT8, nil)
f.CANFD_FRAME_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_12", ftypes.UINT8, nil)
f.CANFD_FRAME_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_13", ftypes.UINT8, nil)
f.CANFD_FRAME_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_14", ftypes.UINT8, nil)
f.CANFD_FRAME_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_15", ftypes.UINT8, nil)
f.CANFD_FRAME_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_16", ftypes.UINT8, nil)
f.CANFD_FRAME_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_17", ftypes.UINT8, nil)
f.CANFD_FRAME_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_18", ftypes.UINT8, nil)
f.CANFD_FRAME_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_19", ftypes.UINT8, nil)
f.CANFD_FRAME_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_20", ftypes.UINT8, nil)
f.CANFD_FRAME_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_21", ftypes.UINT8, nil)
f.CANFD_FRAME_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_22", ftypes.UINT8, nil)
f.CANFD_FRAME_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_23", ftypes.UINT8, nil)
f.CANFD_FRAME_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_24", ftypes.UINT8, nil)
f.CANFD_FRAME_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_25", ftypes.UINT8, nil)
f.CANFD_FRAME_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_26", ftypes.UINT8, nil)
f.CANFD_FRAME_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_27", ftypes.UINT8, nil)
f.CANFD_FRAME_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_28", ftypes.UINT8, nil)
f.CANFD_FRAME_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_29", ftypes.UINT8, nil)
f.CANFD_FRAME_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_30", ftypes.UINT8, nil)
f.CANFD_FRAME_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_31", ftypes.UINT8, nil)
f.CANFD_FRAME_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_32", ftypes.UINT8, nil)
f.CANFD_FRAME_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_33", ftypes.UINT8, nil)
f.CANFD_FRAME_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_34", ftypes.UINT8, nil)
f.CANFD_FRAME_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_35", ftypes.UINT8, nil)
f.CANFD_FRAME_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_36", ftypes.UINT8, nil)
f.CANFD_FRAME_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_37", ftypes.UINT8, nil)
f.CANFD_FRAME_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_38", ftypes.UINT8, nil)
f.CANFD_FRAME_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_39", ftypes.UINT8, nil)
f.CANFD_FRAME_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_40", ftypes.UINT8, nil)
f.CANFD_FRAME_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_41", ftypes.UINT8, nil)
f.CANFD_FRAME_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_42", ftypes.UINT8, nil)
f.CANFD_FRAME_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_43", ftypes.UINT8, nil)
f.CANFD_FRAME_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_44", ftypes.UINT8, nil)
f.CANFD_FRAME_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_45", ftypes.UINT8, nil)
f.CANFD_FRAME_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_46", ftypes.UINT8, nil)
f.CANFD_FRAME_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_47", ftypes.UINT8, nil)
f.CANFD_FRAME_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_48", ftypes.UINT8, nil)
f.CANFD_FRAME_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_49", ftypes.UINT8, nil)
f.CANFD_FRAME_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_50", ftypes.UINT8, nil)
f.CANFD_FRAME_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_51", ftypes.UINT8, nil)
f.CANFD_FRAME_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_52", ftypes.UINT8, nil)
f.CANFD_FRAME_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_53", ftypes.UINT8, nil)
f.CANFD_FRAME_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_54", ftypes.UINT8, nil)
f.CANFD_FRAME_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_55", ftypes.UINT8, nil)
f.CANFD_FRAME_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_56", ftypes.UINT8, nil)
f.CANFD_FRAME_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_57", ftypes.UINT8, nil)
f.CANFD_FRAME_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_58", ftypes.UINT8, nil)
f.CANFD_FRAME_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_59", ftypes.UINT8, nil)
f.CANFD_FRAME_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_60", ftypes.UINT8, nil)
f.CANFD_FRAME_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_61", ftypes.UINT8, nil)
f.CANFD_FRAME_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_62", ftypes.UINT8, nil)
f.CANFD_FRAME_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_63", ftypes.UINT8, nil)

f.CAN_FILTER_MODIFY_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_target_system", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_target_component", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_bus", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_operation = ProtoField.new("operation (CAN_FILTER_OP)", "mavlink_proto.CAN_FILTER_MODIFY_operation", ftypes.UINT8, enumEntryName.CAN_FILTER_OP)
f.CAN_FILTER_MODIFY_num_ids = ProtoField.new("num_ids (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_num_ids", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_ids_0 = ProtoField.new("ids[0] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_0", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_1 = ProtoField.new("ids[1] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_1", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_2 = ProtoField.new("ids[2] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_2", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_3 = ProtoField.new("ids[3] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_3", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_4 = ProtoField.new("ids[4] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_4", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_5 = ProtoField.new("ids[5] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_5", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_6 = ProtoField.new("ids[6] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_6", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_7 = ProtoField.new("ids[7] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_7", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_8 = ProtoField.new("ids[8] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_8", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_9 = ProtoField.new("ids[9] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_9", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_10 = ProtoField.new("ids[10] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_10", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_11 = ProtoField.new("ids[11] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_11", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_12 = ProtoField.new("ids[12] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_12", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_13 = ProtoField.new("ids[13] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_13", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_14 = ProtoField.new("ids[14] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_14", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_15 = ProtoField.new("ids[15] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_15", ftypes.UINT16, nil)

f.WHEEL_DISTANCE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.WHEEL_DISTANCE_time_usec", ftypes.UINT64, nil)
f.WHEEL_DISTANCE_count = ProtoField.new("count (uint8_t)", "mavlink_proto.WHEEL_DISTANCE_count", ftypes.UINT8, nil)
f.WHEEL_DISTANCE_distance_0 = ProtoField.new("distance[0] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_0", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_1 = ProtoField.new("distance[1] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_1", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_2 = ProtoField.new("distance[2] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_2", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_3 = ProtoField.new("distance[3] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_3", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_4 = ProtoField.new("distance[4] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_4", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_5 = ProtoField.new("distance[5] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_5", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_6 = ProtoField.new("distance[6] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_6", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_7 = ProtoField.new("distance[7] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_7", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_8 = ProtoField.new("distance[8] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_8", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_9 = ProtoField.new("distance[9] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_9", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_10 = ProtoField.new("distance[10] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_10", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_11 = ProtoField.new("distance[11] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_11", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_12 = ProtoField.new("distance[12] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_12", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_13 = ProtoField.new("distance[13] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_13", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_14 = ProtoField.new("distance[14] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_14", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_15 = ProtoField.new("distance[15] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_15", ftypes.DOUBLE, nil)

f.WINCH_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.WINCH_STATUS_time_usec", ftypes.UINT64, nil)
f.WINCH_STATUS_line_length = ProtoField.new("line_length (float)", "mavlink_proto.WINCH_STATUS_line_length", ftypes.FLOAT, nil)
f.WINCH_STATUS_speed = ProtoField.new("speed (float)", "mavlink_proto.WINCH_STATUS_speed", ftypes.FLOAT, nil)
f.WINCH_STATUS_tension = ProtoField.new("tension (float)", "mavlink_proto.WINCH_STATUS_tension", ftypes.FLOAT, nil)
f.WINCH_STATUS_voltage = ProtoField.new("voltage (float)", "mavlink_proto.WINCH_STATUS_voltage", ftypes.FLOAT, nil)
f.WINCH_STATUS_current = ProtoField.new("current (float)", "mavlink_proto.WINCH_STATUS_current", ftypes.FLOAT, nil)
f.WINCH_STATUS_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.WINCH_STATUS_temperature", ftypes.INT16, nil)
f.WINCH_STATUS_status = ProtoField.new("status (MAV_WINCH_STATUS_FLAG)", "mavlink_proto.WINCH_STATUS_status", ftypes.UINT32, nil)
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_HEALTHY = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_HEALTHY", "MAV_WINCH_STATUS_HEALTHY")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_FULLY_RETRACTED = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_FULLY_RETRACTED", "MAV_WINCH_STATUS_FULLY_RETRACTED")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_MOVING = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_MOVING", "MAV_WINCH_STATUS_MOVING")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_CLUTCH_ENGAGED = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_CLUTCH_ENGAGED", "MAV_WINCH_STATUS_CLUTCH_ENGAGED")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_LOCKED = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_LOCKED", "MAV_WINCH_STATUS_LOCKED")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_DROPPING = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_DROPPING", "MAV_WINCH_STATUS_DROPPING")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_ARRESTING = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_ARRESTING", "MAV_WINCH_STATUS_ARRESTING")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_GROUND_SENSE = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_GROUND_SENSE", "MAV_WINCH_STATUS_GROUND_SENSE")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_RETRACTING = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_RETRACTING", "MAV_WINCH_STATUS_RETRACTING")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_REDELIVER = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_REDELIVER", "MAV_WINCH_STATUS_REDELIVER")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_ABANDON_LINE = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_ABANDON_LINE", "MAV_WINCH_STATUS_ABANDON_LINE")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_LOCKING = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_LOCKING", "MAV_WINCH_STATUS_LOCKING")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_LOAD_LINE = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_LOAD_LINE", "MAV_WINCH_STATUS_LOAD_LINE")
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_LOAD_PAYLOAD = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_LOAD_PAYLOAD", "MAV_WINCH_STATUS_LOAD_PAYLOAD")

f.OPEN_DRONE_ID_BASIC_ID_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_type = ProtoField.new("id_type (MAV_ODID_ID_TYPE)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_type", ftypes.UINT8, enumEntryName.MAV_ODID_ID_TYPE)
f.OPEN_DRONE_ID_BASIC_ID_ua_type = ProtoField.new("ua_type (MAV_ODID_UA_TYPE)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_ua_type", ftypes.UINT8, enumEntryName.MAV_ODID_UA_TYPE)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_0 = ProtoField.new("uas_id[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_1 = ProtoField.new("uas_id[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_2 = ProtoField.new("uas_id[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_3 = ProtoField.new("uas_id[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_4 = ProtoField.new("uas_id[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_5 = ProtoField.new("uas_id[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_6 = ProtoField.new("uas_id[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_7 = ProtoField.new("uas_id[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_8 = ProtoField.new("uas_id[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_9 = ProtoField.new("uas_id[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_10 = ProtoField.new("uas_id[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_11 = ProtoField.new("uas_id[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_12 = ProtoField.new("uas_id[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_13 = ProtoField.new("uas_id[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_14 = ProtoField.new("uas_id[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_15 = ProtoField.new("uas_id[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_16 = ProtoField.new("uas_id[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_17 = ProtoField.new("uas_id[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_18 = ProtoField.new("uas_id[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_19 = ProtoField.new("uas_id[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_19", ftypes.UINT8, nil)

f.OPEN_DRONE_ID_LOCATION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_status = ProtoField.new("status (MAV_ODID_STATUS)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_status", ftypes.UINT8, enumEntryName.MAV_ODID_STATUS)
f.OPEN_DRONE_ID_LOCATION_direction = ProtoField.new("direction (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_direction", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_LOCATION_speed_horizontal = ProtoField.new("speed_horizontal (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_speed_horizontal", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_LOCATION_speed_vertical = ProtoField.new("speed_vertical (int16_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_speed_vertical", ftypes.INT16, nil)
f.OPEN_DRONE_ID_LOCATION_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_latitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_LOCATION_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_longitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_LOCATION_altitude_barometric = ProtoField.new("altitude_barometric (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_altitude_barometric", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_altitude_geodetic = ProtoField.new("altitude_geodetic (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_altitude_geodetic", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_height_reference = ProtoField.new("height_reference (MAV_ODID_HEIGHT_REF)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_height_reference", ftypes.UINT8, enumEntryName.MAV_ODID_HEIGHT_REF)
f.OPEN_DRONE_ID_LOCATION_height = ProtoField.new("height (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_height", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_horizontal_accuracy = ProtoField.new("horizontal_accuracy (MAV_ODID_HOR_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_horizontal_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_HOR_ACC)
f.OPEN_DRONE_ID_LOCATION_vertical_accuracy = ProtoField.new("vertical_accuracy (MAV_ODID_VER_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_vertical_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_VER_ACC)
f.OPEN_DRONE_ID_LOCATION_barometer_accuracy = ProtoField.new("barometer_accuracy (MAV_ODID_VER_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_barometer_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_VER_ACC)
f.OPEN_DRONE_ID_LOCATION_speed_accuracy = ProtoField.new("speed_accuracy (MAV_ODID_SPEED_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_speed_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_SPEED_ACC)
f.OPEN_DRONE_ID_LOCATION_timestamp = ProtoField.new("timestamp (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_timestamp", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_timestamp_accuracy = ProtoField.new("timestamp_accuracy (MAV_ODID_TIME_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_timestamp_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_TIME_ACC)

f.OPEN_DRONE_ID_AUTHENTICATION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_type = ProtoField.new("authentication_type (MAV_ODID_AUTH_TYPE)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_type", ftypes.UINT8, enumEntryName.MAV_ODID_AUTH_TYPE)
f.OPEN_DRONE_ID_AUTHENTICATION_data_page = ProtoField.new("data_page (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_data_page", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_last_page_index = ProtoField.new("last_page_index (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_last_page_index", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_length = ProtoField.new("length (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_length", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_timestamp", ftypes.UINT32, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_0 = ProtoField.new("authentication_data[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_1 = ProtoField.new("authentication_data[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_2 = ProtoField.new("authentication_data[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_3 = ProtoField.new("authentication_data[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_4 = ProtoField.new("authentication_data[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_5 = ProtoField.new("authentication_data[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_6 = ProtoField.new("authentication_data[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_7 = ProtoField.new("authentication_data[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_8 = ProtoField.new("authentication_data[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_9 = ProtoField.new("authentication_data[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_10 = ProtoField.new("authentication_data[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_11 = ProtoField.new("authentication_data[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_12 = ProtoField.new("authentication_data[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_13 = ProtoField.new("authentication_data[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_14 = ProtoField.new("authentication_data[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_15 = ProtoField.new("authentication_data[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_16 = ProtoField.new("authentication_data[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_17 = ProtoField.new("authentication_data[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_18 = ProtoField.new("authentication_data[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_19 = ProtoField.new("authentication_data[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_20 = ProtoField.new("authentication_data[20] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_20", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_21 = ProtoField.new("authentication_data[21] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_21", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_22 = ProtoField.new("authentication_data[22] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_22", ftypes.UINT8, nil)

f.OPEN_DRONE_ID_SELF_ID_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_description_type = ProtoField.new("description_type (MAV_ODID_DESC_TYPE)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_description_type", ftypes.UINT8, enumEntryName.MAV_ODID_DESC_TYPE)
f.OPEN_DRONE_ID_SELF_ID_description = ProtoField.new("description (char)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_description", ftypes.STRING, nil)

f.OPEN_DRONE_ID_SYSTEM_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_operator_location_type = ProtoField.new("operator_location_type (MAV_ODID_OPERATOR_LOCATION_TYPE)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_location_type", ftypes.UINT8, enumEntryName.MAV_ODID_OPERATOR_LOCATION_TYPE)
f.OPEN_DRONE_ID_SYSTEM_classification_type = ProtoField.new("classification_type (MAV_ODID_CLASSIFICATION_TYPE)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_classification_type", ftypes.UINT8, enumEntryName.MAV_ODID_CLASSIFICATION_TYPE)
f.OPEN_DRONE_ID_SYSTEM_operator_latitude = ProtoField.new("operator_latitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_latitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_operator_longitude = ProtoField.new("operator_longitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_longitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_area_count = ProtoField.new("area_count (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_count", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_SYSTEM_area_radius = ProtoField.new("area_radius (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_radius", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_SYSTEM_area_ceiling = ProtoField.new("area_ceiling (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_ceiling", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_area_floor = ProtoField.new("area_floor (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_floor", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_category_eu = ProtoField.new("category_eu (MAV_ODID_CATEGORY_EU)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_category_eu", ftypes.UINT8, enumEntryName.MAV_ODID_CATEGORY_EU)
f.OPEN_DRONE_ID_SYSTEM_class_eu = ProtoField.new("class_eu (MAV_ODID_CLASS_EU)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_class_eu", ftypes.UINT8, enumEntryName.MAV_ODID_CLASS_EU)
f.OPEN_DRONE_ID_SYSTEM_operator_altitude_geo = ProtoField.new("operator_altitude_geo (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_altitude_geo", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_timestamp", ftypes.UINT32, nil)

f.OPEN_DRONE_ID_OPERATOR_ID_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_operator_id_type = ProtoField.new("operator_id_type (MAV_ODID_OPERATOR_ID_TYPE)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_operator_id_type", ftypes.UINT8, enumEntryName.MAV_ODID_OPERATOR_ID_TYPE)
f.OPEN_DRONE_ID_OPERATOR_ID_operator_id = ProtoField.new("operator_id (char)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_operator_id", ftypes.STRING, nil)

f.OPEN_DRONE_ID_MESSAGE_PACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_single_message_size = ProtoField.new("single_message_size (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_single_message_size", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_msg_pack_size = ProtoField.new("msg_pack_size (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_msg_pack_size", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_0 = ProtoField.new("messages[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_1 = ProtoField.new("messages[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_2 = ProtoField.new("messages[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_3 = ProtoField.new("messages[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_4 = ProtoField.new("messages[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_5 = ProtoField.new("messages[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_6 = ProtoField.new("messages[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_7 = ProtoField.new("messages[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_8 = ProtoField.new("messages[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_9 = ProtoField.new("messages[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_10 = ProtoField.new("messages[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_11 = ProtoField.new("messages[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_12 = ProtoField.new("messages[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_13 = ProtoField.new("messages[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_14 = ProtoField.new("messages[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_15 = ProtoField.new("messages[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_16 = ProtoField.new("messages[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_17 = ProtoField.new("messages[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_18 = ProtoField.new("messages[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_19 = ProtoField.new("messages[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_20 = ProtoField.new("messages[20] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_20", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_21 = ProtoField.new("messages[21] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_21", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_22 = ProtoField.new("messages[22] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_22", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_23 = ProtoField.new("messages[23] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_23", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_24 = ProtoField.new("messages[24] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_24", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_25 = ProtoField.new("messages[25] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_25", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_26 = ProtoField.new("messages[26] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_26", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_27 = ProtoField.new("messages[27] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_27", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_28 = ProtoField.new("messages[28] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_28", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_29 = ProtoField.new("messages[29] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_29", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_30 = ProtoField.new("messages[30] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_30", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_31 = ProtoField.new("messages[31] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_31", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_32 = ProtoField.new("messages[32] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_32", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_33 = ProtoField.new("messages[33] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_33", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_34 = ProtoField.new("messages[34] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_34", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_35 = ProtoField.new("messages[35] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_35", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_36 = ProtoField.new("messages[36] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_36", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_37 = ProtoField.new("messages[37] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_37", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_38 = ProtoField.new("messages[38] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_38", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_39 = ProtoField.new("messages[39] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_39", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_40 = ProtoField.new("messages[40] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_40", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_41 = ProtoField.new("messages[41] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_41", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_42 = ProtoField.new("messages[42] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_42", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_43 = ProtoField.new("messages[43] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_43", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_44 = ProtoField.new("messages[44] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_44", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_45 = ProtoField.new("messages[45] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_45", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_46 = ProtoField.new("messages[46] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_46", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_47 = ProtoField.new("messages[47] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_47", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_48 = ProtoField.new("messages[48] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_48", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_49 = ProtoField.new("messages[49] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_49", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_50 = ProtoField.new("messages[50] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_50", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_51 = ProtoField.new("messages[51] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_51", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_52 = ProtoField.new("messages[52] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_52", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_53 = ProtoField.new("messages[53] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_53", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_54 = ProtoField.new("messages[54] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_54", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_55 = ProtoField.new("messages[55] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_55", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_56 = ProtoField.new("messages[56] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_56", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_57 = ProtoField.new("messages[57] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_57", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_58 = ProtoField.new("messages[58] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_58", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_59 = ProtoField.new("messages[59] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_59", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_60 = ProtoField.new("messages[60] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_60", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_61 = ProtoField.new("messages[61] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_61", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_62 = ProtoField.new("messages[62] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_62", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_63 = ProtoField.new("messages[63] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_63", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_64 = ProtoField.new("messages[64] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_64", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_65 = ProtoField.new("messages[65] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_65", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_66 = ProtoField.new("messages[66] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_66", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_67 = ProtoField.new("messages[67] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_67", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_68 = ProtoField.new("messages[68] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_68", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_69 = ProtoField.new("messages[69] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_69", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_70 = ProtoField.new("messages[70] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_70", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_71 = ProtoField.new("messages[71] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_71", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_72 = ProtoField.new("messages[72] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_72", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_73 = ProtoField.new("messages[73] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_73", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_74 = ProtoField.new("messages[74] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_74", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_75 = ProtoField.new("messages[75] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_75", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_76 = ProtoField.new("messages[76] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_76", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_77 = ProtoField.new("messages[77] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_77", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_78 = ProtoField.new("messages[78] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_78", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_79 = ProtoField.new("messages[79] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_79", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_80 = ProtoField.new("messages[80] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_80", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_81 = ProtoField.new("messages[81] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_81", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_82 = ProtoField.new("messages[82] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_82", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_83 = ProtoField.new("messages[83] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_83", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_84 = ProtoField.new("messages[84] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_84", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_85 = ProtoField.new("messages[85] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_85", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_86 = ProtoField.new("messages[86] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_86", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_87 = ProtoField.new("messages[87] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_87", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_88 = ProtoField.new("messages[88] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_88", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_89 = ProtoField.new("messages[89] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_89", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_90 = ProtoField.new("messages[90] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_90", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_91 = ProtoField.new("messages[91] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_91", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_92 = ProtoField.new("messages[92] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_92", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_93 = ProtoField.new("messages[93] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_93", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_94 = ProtoField.new("messages[94] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_94", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_95 = ProtoField.new("messages[95] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_95", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_96 = ProtoField.new("messages[96] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_96", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_97 = ProtoField.new("messages[97] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_97", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_98 = ProtoField.new("messages[98] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_98", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_99 = ProtoField.new("messages[99] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_99", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_100 = ProtoField.new("messages[100] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_100", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_101 = ProtoField.new("messages[101] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_101", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_102 = ProtoField.new("messages[102] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_102", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_103 = ProtoField.new("messages[103] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_103", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_104 = ProtoField.new("messages[104] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_104", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_105 = ProtoField.new("messages[105] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_105", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_106 = ProtoField.new("messages[106] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_106", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_107 = ProtoField.new("messages[107] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_107", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_108 = ProtoField.new("messages[108] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_108", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_109 = ProtoField.new("messages[109] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_109", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_110 = ProtoField.new("messages[110] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_110", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_111 = ProtoField.new("messages[111] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_111", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_112 = ProtoField.new("messages[112] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_112", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_113 = ProtoField.new("messages[113] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_113", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_114 = ProtoField.new("messages[114] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_114", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_115 = ProtoField.new("messages[115] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_115", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_116 = ProtoField.new("messages[116] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_116", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_117 = ProtoField.new("messages[117] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_117", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_118 = ProtoField.new("messages[118] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_118", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_119 = ProtoField.new("messages[119] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_119", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_120 = ProtoField.new("messages[120] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_120", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_121 = ProtoField.new("messages[121] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_121", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_122 = ProtoField.new("messages[122] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_122", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_123 = ProtoField.new("messages[123] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_123", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_124 = ProtoField.new("messages[124] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_124", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_125 = ProtoField.new("messages[125] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_125", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_126 = ProtoField.new("messages[126] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_126", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_127 = ProtoField.new("messages[127] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_127", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_128 = ProtoField.new("messages[128] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_128", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_129 = ProtoField.new("messages[129] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_129", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_130 = ProtoField.new("messages[130] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_130", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_131 = ProtoField.new("messages[131] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_131", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_132 = ProtoField.new("messages[132] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_132", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_133 = ProtoField.new("messages[133] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_133", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_134 = ProtoField.new("messages[134] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_134", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_135 = ProtoField.new("messages[135] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_135", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_136 = ProtoField.new("messages[136] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_136", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_137 = ProtoField.new("messages[137] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_137", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_138 = ProtoField.new("messages[138] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_138", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_139 = ProtoField.new("messages[139] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_139", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_140 = ProtoField.new("messages[140] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_140", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_141 = ProtoField.new("messages[141] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_141", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_142 = ProtoField.new("messages[142] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_142", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_143 = ProtoField.new("messages[143] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_143", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_144 = ProtoField.new("messages[144] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_144", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_145 = ProtoField.new("messages[145] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_145", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_146 = ProtoField.new("messages[146] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_146", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_147 = ProtoField.new("messages[147] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_147", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_148 = ProtoField.new("messages[148] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_148", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_149 = ProtoField.new("messages[149] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_149", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_150 = ProtoField.new("messages[150] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_150", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_151 = ProtoField.new("messages[151] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_151", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_152 = ProtoField.new("messages[152] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_152", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_153 = ProtoField.new("messages[153] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_153", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_154 = ProtoField.new("messages[154] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_154", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_155 = ProtoField.new("messages[155] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_155", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_156 = ProtoField.new("messages[156] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_156", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_157 = ProtoField.new("messages[157] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_157", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_158 = ProtoField.new("messages[158] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_158", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_159 = ProtoField.new("messages[159] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_159", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_160 = ProtoField.new("messages[160] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_160", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_161 = ProtoField.new("messages[161] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_161", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_162 = ProtoField.new("messages[162] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_162", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_163 = ProtoField.new("messages[163] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_163", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_164 = ProtoField.new("messages[164] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_164", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_165 = ProtoField.new("messages[165] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_165", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_166 = ProtoField.new("messages[166] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_166", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_167 = ProtoField.new("messages[167] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_167", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_168 = ProtoField.new("messages[168] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_168", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_169 = ProtoField.new("messages[169] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_169", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_170 = ProtoField.new("messages[170] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_170", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_171 = ProtoField.new("messages[171] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_171", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_172 = ProtoField.new("messages[172] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_172", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_173 = ProtoField.new("messages[173] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_173", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_174 = ProtoField.new("messages[174] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_174", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_175 = ProtoField.new("messages[175] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_175", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_176 = ProtoField.new("messages[176] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_176", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_177 = ProtoField.new("messages[177] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_177", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_178 = ProtoField.new("messages[178] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_178", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_179 = ProtoField.new("messages[179] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_179", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_180 = ProtoField.new("messages[180] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_180", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_181 = ProtoField.new("messages[181] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_181", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_182 = ProtoField.new("messages[182] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_182", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_183 = ProtoField.new("messages[183] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_183", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_184 = ProtoField.new("messages[184] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_184", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_185 = ProtoField.new("messages[185] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_185", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_186 = ProtoField.new("messages[186] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_186", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_187 = ProtoField.new("messages[187] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_187", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_188 = ProtoField.new("messages[188] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_188", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_189 = ProtoField.new("messages[189] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_189", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_190 = ProtoField.new("messages[190] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_190", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_191 = ProtoField.new("messages[191] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_191", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_192 = ProtoField.new("messages[192] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_192", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_193 = ProtoField.new("messages[193] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_193", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_194 = ProtoField.new("messages[194] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_194", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_195 = ProtoField.new("messages[195] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_195", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_196 = ProtoField.new("messages[196] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_196", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_197 = ProtoField.new("messages[197] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_197", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_198 = ProtoField.new("messages[198] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_198", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_199 = ProtoField.new("messages[199] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_199", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_200 = ProtoField.new("messages[200] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_200", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_201 = ProtoField.new("messages[201] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_201", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_202 = ProtoField.new("messages[202] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_202", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_203 = ProtoField.new("messages[203] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_203", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_204 = ProtoField.new("messages[204] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_204", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_205 = ProtoField.new("messages[205] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_205", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_206 = ProtoField.new("messages[206] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_206", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_207 = ProtoField.new("messages[207] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_207", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_208 = ProtoField.new("messages[208] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_208", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_209 = ProtoField.new("messages[209] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_209", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_210 = ProtoField.new("messages[210] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_210", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_211 = ProtoField.new("messages[211] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_211", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_212 = ProtoField.new("messages[212] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_212", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_213 = ProtoField.new("messages[213] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_213", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_214 = ProtoField.new("messages[214] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_214", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_215 = ProtoField.new("messages[215] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_215", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_216 = ProtoField.new("messages[216] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_216", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_217 = ProtoField.new("messages[217] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_217", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_218 = ProtoField.new("messages[218] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_218", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_219 = ProtoField.new("messages[219] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_219", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_220 = ProtoField.new("messages[220] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_220", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_221 = ProtoField.new("messages[221] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_221", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_222 = ProtoField.new("messages[222] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_222", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_223 = ProtoField.new("messages[223] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_223", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_224 = ProtoField.new("messages[224] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_224", ftypes.UINT8, nil)

f.OPEN_DRONE_ID_ARM_STATUS_status = ProtoField.new("status (MAV_ODID_ARM_STATUS)", "mavlink_proto.OPEN_DRONE_ID_ARM_STATUS_status", ftypes.UINT8, enumEntryName.MAV_ODID_ARM_STATUS)
f.OPEN_DRONE_ID_ARM_STATUS_error = ProtoField.new("error (char)", "mavlink_proto.OPEN_DRONE_ID_ARM_STATUS_error", ftypes.STRING, nil)

f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_latitude = ProtoField.new("operator_latitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_latitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_longitude = ProtoField.new("operator_longitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_longitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_altitude_geo = ProtoField.new("operator_altitude_geo (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_altitude_geo", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_timestamp", ftypes.UINT32, nil)

f.HYGROMETER_SENSOR_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HYGROMETER_SENSOR_id", ftypes.UINT8, nil)
f.HYGROMETER_SENSOR_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.HYGROMETER_SENSOR_temperature", ftypes.INT16, nil)
f.HYGROMETER_SENSOR_humidity = ProtoField.new("humidity (uint16_t)", "mavlink_proto.HYGROMETER_SENSOR_humidity", ftypes.UINT16, nil)

f.HEARTBEAT_type = ProtoField.new("type (MAV_TYPE)", "mavlink_proto.HEARTBEAT_type", ftypes.UINT8, enumEntryName.MAV_TYPE)
f.HEARTBEAT_autopilot = ProtoField.new("autopilot (MAV_AUTOPILOT)", "mavlink_proto.HEARTBEAT_autopilot", ftypes.UINT8, enumEntryName.MAV_AUTOPILOT)
f.HEARTBEAT_base_mode = ProtoField.new("base_mode (MAV_MODE_FLAG)", "mavlink_proto.HEARTBEAT_base_mode", ftypes.UINT8, nil)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED")
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_TEST_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_TEST_ENABLED", "MAV_MODE_FLAG_TEST_ENABLED")
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_AUTO_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_AUTO_ENABLED", "MAV_MODE_FLAG_AUTO_ENABLED")
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_GUIDED_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_GUIDED_ENABLED", "MAV_MODE_FLAG_GUIDED_ENABLED")
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_STABILIZE_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_STABILIZE_ENABLED", "MAV_MODE_FLAG_STABILIZE_ENABLED")
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_HIL_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_HIL_ENABLED", "MAV_MODE_FLAG_HIL_ENABLED")
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED")
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_SAFETY_ARMED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_SAFETY_ARMED", "MAV_MODE_FLAG_SAFETY_ARMED")
f.HEARTBEAT_custom_mode = ProtoField.new("custom_mode (uint32_t)", "mavlink_proto.HEARTBEAT_custom_mode", ftypes.UINT32, nil)
f.HEARTBEAT_system_status = ProtoField.new("system_status (MAV_STATE)", "mavlink_proto.HEARTBEAT_system_status", ftypes.UINT8, enumEntryName.MAV_STATE)
f.HEARTBEAT_mavlink_version = ProtoField.new("mavlink_version (uint8_t)", "mavlink_proto.HEARTBEAT_mavlink_version", ftypes.UINT8, nil)

f.PROTOCOL_VERSION_version = ProtoField.new("version (uint16_t)", "mavlink_proto.PROTOCOL_VERSION_version", ftypes.UINT16, nil)
f.PROTOCOL_VERSION_min_version = ProtoField.new("min_version (uint16_t)", "mavlink_proto.PROTOCOL_VERSION_min_version", ftypes.UINT16, nil)
f.PROTOCOL_VERSION_max_version = ProtoField.new("max_version (uint16_t)", "mavlink_proto.PROTOCOL_VERSION_max_version", ftypes.UINT16, nil)
f.PROTOCOL_VERSION_spec_version_hash_0 = ProtoField.new("spec_version_hash[0] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_0", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_spec_version_hash_1 = ProtoField.new("spec_version_hash[1] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_1", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_spec_version_hash_2 = ProtoField.new("spec_version_hash[2] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_2", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_spec_version_hash_3 = ProtoField.new("spec_version_hash[3] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_3", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_spec_version_hash_4 = ProtoField.new("spec_version_hash[4] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_4", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_spec_version_hash_5 = ProtoField.new("spec_version_hash[5] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_5", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_spec_version_hash_6 = ProtoField.new("spec_version_hash[6] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_6", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_spec_version_hash_7 = ProtoField.new("spec_version_hash[7] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_spec_version_hash_7", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_0 = ProtoField.new("library_version_hash[0] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_0", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_1 = ProtoField.new("library_version_hash[1] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_1", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_2 = ProtoField.new("library_version_hash[2] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_2", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_3 = ProtoField.new("library_version_hash[3] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_3", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_4 = ProtoField.new("library_version_hash[4] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_4", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_5 = ProtoField.new("library_version_hash[5] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_5", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_6 = ProtoField.new("library_version_hash[6] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_6", ftypes.UINT8, nil)
f.PROTOCOL_VERSION_library_version_hash_7 = ProtoField.new("library_version_hash[7] (uint8_t)", "mavlink_proto.PROTOCOL_VERSION_library_version_hash_7", ftypes.UINT8, nil)

-- dissect flag field
function dissect_flags_HL_FAILURE_FLAG(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_GPS"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " HL_FAILURE_FLAG_GPS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_ABSOLUTE_PRESSURE"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. HL_FAILURE_FLAG_ABSOLUTE_PRESSURE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_3D_ACCEL"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... HL_FAILURE_FLAG_3D_ACCEL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_3D_GYRO"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... HL_FAILURE_FLAG_3D_GYRO: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_3D_MAG"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... HL_FAILURE_FLAG_3D_MAG: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_TERRAIN"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... HL_FAILURE_FLAG_TERRAIN: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_BATTERY"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... HL_FAILURE_FLAG_BATTERY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_RC_RECEIVER"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... HL_FAILURE_FLAG_RC_RECEIVER: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_OFFBOARD_LINK"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... HL_FAILURE_FLAG_OFFBOARD_LINK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_ENGINE"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... HL_FAILURE_FLAG_ENGINE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_GEOFENCE"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... HL_FAILURE_FLAG_GEOFENCE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_ESTIMATOR"], bitval ~= 0, "..." .. tostring(bitval) .. " .... .... .... HL_FAILURE_FLAG_ESTIMATOR: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 13), 1)
    tree:add(f[name .. "_flagHL_FAILURE_FLAG_MISSION"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... .... .... HL_FAILURE_FLAG_MISSION: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_SYS_STATUS_SENSOR(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_GYRO"], bitval ~= 0, ".... .... .... .... .... .... .... ..." .. tostring(bitval) .. " MAV_SYS_STATUS_SENSOR_3D_GYRO: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL"], bitval ~= 0, ".... .... .... .... .... .... .... .." .. tostring(bitval) .. ". MAV_SYS_STATUS_SENSOR_3D_ACCEL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_MAG"], bitval ~= 0, ".... .... .... .... .... .... .... ." .. tostring(bitval) .. ".. MAV_SYS_STATUS_SENSOR_3D_MAG: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE"], bitval ~= 0, ".... .... .... .... .... .... .... " .. tostring(bitval) .. "... MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE"], bitval ~= 0, ".... .... .... .... .... .... ..." .. tostring(bitval) .. " .... MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_GPS"], bitval ~= 0, ".... .... .... .... .... .... .." .. tostring(bitval) .. ". .... MAV_SYS_STATUS_SENSOR_GPS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW"], bitval ~= 0, ".... .... .... .... .... .... ." .. tostring(bitval) .. ".. .... MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION"], bitval ~= 0, ".... .... .... .... .... .... " .. tostring(bitval) .. "... .... MAV_SYS_STATUS_SENSOR_VISION_POSITION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION"], bitval ~= 0, ".... .... .... .... .... ..." .. tostring(bitval) .. " .... .... MAV_SYS_STATUS_SENSOR_LASER_POSITION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH"], bitval ~= 0, ".... .... .... .... .... .." .. tostring(bitval) .. ". .... .... MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL"], bitval ~= 0, ".... .... .... .... .... ." .. tostring(bitval) .. ".. .... .... MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION"], bitval ~= 0, ".... .... .... .... .... " .. tostring(bitval) .. "... .... .... MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION"], bitval ~= 0, ".... .... .... .... ..." .. tostring(bitval) .. " .... .... .... MAV_SYS_STATUS_SENSOR_YAW_POSITION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 13), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL"], bitval ~= 0, ".... .... .... .... .." .. tostring(bitval) .. ". .... .... .... MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 14), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL"], bitval ~= 0, ".... .... .... .... ." .. tostring(bitval) .. ".. .... .... .... MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 15), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS"], bitval ~= 0, ".... .... .... .... " .. tostring(bitval) .. "... .... .... .... MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 16), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " .... .... .... .... MAV_SYS_STATUS_SENSOR_RC_RECEIVER: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 17), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". .... .... .... .... MAV_SYS_STATUS_SENSOR_3D_GYRO2: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 18), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. .... .... .... .... MAV_SYS_STATUS_SENSOR_3D_ACCEL2: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 19), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_MAG2"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... .... .... .... .... MAV_SYS_STATUS_SENSOR_3D_MAG2: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 20), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_GEOFENCE"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... .... .... .... .... MAV_SYS_STATUS_GEOFENCE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 21), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_AHRS"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... .... .... .... .... MAV_SYS_STATUS_AHRS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 22), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_TERRAIN"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... .... .... .... .... MAV_SYS_STATUS_TERRAIN: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 23), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_REVERSE_MOTOR"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... .... .... .... .... MAV_SYS_STATUS_REVERSE_MOTOR: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 24), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_LOGGING"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... .... .... .... .... MAV_SYS_STATUS_LOGGING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 25), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_BATTERY"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... .... .... .... .... MAV_SYS_STATUS_SENSOR_BATTERY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 26), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_PROXIMITY"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... .... .... .... .... MAV_SYS_STATUS_SENSOR_PROXIMITY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 27), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_SATCOM"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... .... .... .... .... MAV_SYS_STATUS_SENSOR_SATCOM: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 28), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_PREARM_CHECK"], bitval ~= 0, "..." .. tostring(bitval) .. " .... .... .... .... .... .... .... MAV_SYS_STATUS_PREARM_CHECK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 29), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... .... .... .... .... .... .... MAV_SYS_STATUS_OBSTACLE_AVOIDANCE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 30), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_SENSOR_PROPULSION"], bitval ~= 0, "." .. tostring(bitval) .. ".. .... .... .... .... .... .... .... MAV_SYS_STATUS_SENSOR_PROPULSION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 31), 1)
    tree:add(f[name .. "_flagMAV_SYS_STATUS_EXTENSION_USED"], bitval ~= 0, "" .. tostring(bitval) .. "... .... .... .... .... .... .... .... MAV_SYS_STATUS_EXTENSION_USED: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_GIMBAL_DEVICE_CAP_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME"], bitval ~= 0, "..." .. tostring(bitval) .. " .... .... .... GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 13), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... .... .... GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_GIMBAL_MANAGER_CAP_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT"], bitval ~= 0, ".... .... .... .... .... ..." .. tostring(bitval) .. " GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL"], bitval ~= 0, ".... .... .... .... .... .." .. tostring(bitval) .. ". GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS"], bitval ~= 0, ".... .... .... .... .... ." .. tostring(bitval) .. ".. GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW"], bitval ~= 0, ".... .... .... .... .... " .. tostring(bitval) .. "... GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK"], bitval ~= 0, ".... .... .... .... ..." .. tostring(bitval) .. " .... GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS"], bitval ~= 0, ".... .... .... .... .." .. tostring(bitval) .. ". .... GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW"], bitval ~= 0, ".... .... .... .... ." .. tostring(bitval) .. ".. .... GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK"], bitval ~= 0, ".... .... .... .... " .. tostring(bitval) .. "... .... GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " .... .... GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". .... .... GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. .... .... GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... .... .... GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... .... .... GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 13), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... .... .... GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 16), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... .... .... GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 17), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... .... .... GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_GIMBAL_DEVICE_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_RETRACT"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " GIMBAL_DEVICE_FLAGS_RETRACT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_NEUTRAL"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". GIMBAL_DEVICE_FLAGS_NEUTRAL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_ROLL_LOCK"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. GIMBAL_DEVICE_FLAGS_ROLL_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_PITCH_LOCK"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... GIMBAL_DEVICE_FLAGS_PITCH_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_YAW_LOCK"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... GIMBAL_DEVICE_FLAGS_YAW_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_FLAGS_RC_MIXED"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... GIMBAL_DEVICE_FLAGS_RC_MIXED: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_GIMBAL_MANAGER_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_RETRACT"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " GIMBAL_MANAGER_FLAGS_RETRACT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_NEUTRAL"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". GIMBAL_MANAGER_FLAGS_NEUTRAL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. GIMBAL_MANAGER_FLAGS_ROLL_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... GIMBAL_MANAGER_FLAGS_PITCH_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... GIMBAL_MANAGER_FLAGS_YAW_LOCK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagGIMBAL_MANAGER_FLAGS_RC_MIXED"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... GIMBAL_MANAGER_FLAGS_RC_MIXED: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_GIMBAL_DEVICE_ERROR_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_STORAGE_USAGE_FLAG(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagSTORAGE_USAGE_FLAG_SET"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " STORAGE_USAGE_FLAG_SET: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagSTORAGE_USAGE_FLAG_PHOTO"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". STORAGE_USAGE_FLAG_PHOTO: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagSTORAGE_USAGE_FLAG_VIDEO"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. STORAGE_USAGE_FLAG_VIDEO: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagSTORAGE_USAGE_FLAG_LOGS"], bitval ~= 0, ".... " .. tostring(bitval) .. "... STORAGE_USAGE_FLAG_LOGS: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_POWER_STATUS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_POWER_STATUS_BRICK_VALID"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " MAV_POWER_STATUS_BRICK_VALID: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_POWER_STATUS_SERVO_VALID"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". MAV_POWER_STATUS_SERVO_VALID: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_POWER_STATUS_USB_CONNECTED"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. MAV_POWER_STATUS_USB_CONNECTED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_POWER_STATUS_PERIPH_OVERCURRENT"], bitval ~= 0, ".... " .. tostring(bitval) .. "... MAV_POWER_STATUS_PERIPH_OVERCURRENT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT"], bitval ~= 0, "..." .. tostring(bitval) .. " .... MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_POWER_STATUS_CHANGED"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... MAV_POWER_STATUS_CHANGED: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_SERIAL_CONTROL_FLAG(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagSERIAL_CONTROL_FLAG_REPLY"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " SERIAL_CONTROL_FLAG_REPLY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagSERIAL_CONTROL_FLAG_RESPOND"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". SERIAL_CONTROL_FLAG_RESPOND: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagSERIAL_CONTROL_FLAG_EXCLUSIVE"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. SERIAL_CONTROL_FLAG_EXCLUSIVE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagSERIAL_CONTROL_FLAG_BLOCKING"], bitval ~= 0, ".... " .. tostring(bitval) .. "... SERIAL_CONTROL_FLAG_BLOCKING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagSERIAL_CONTROL_FLAG_MULTI"], bitval ~= 0, "..." .. tostring(bitval) .. " .... SERIAL_CONTROL_FLAG_MULTI: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_PROTOCOL_CAPABILITY(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_FLOAT"], bitval ~= 0, ".... .... .... .... .... ..." .. tostring(bitval) .. " MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_PARAM_FLOAT"], bitval ~= 0, ".... .... .... .... .... .." .. tostring(bitval) .. ". MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_INT"], bitval ~= 0, ".... .... .... .... .... ." .. tostring(bitval) .. ".. MAV_PROTOCOL_CAPABILITY_MISSION_INT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_COMMAND_INT"], bitval ~= 0, ".... .... .... .... .... " .. tostring(bitval) .. "... MAV_PROTOCOL_CAPABILITY_COMMAND_INT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE"], bitval ~= 0, ".... .... .... .... ..." .. tostring(bitval) .. " .... MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_FTP"], bitval ~= 0, ".... .... .... .... .." .. tostring(bitval) .. ". .... MAV_PROTOCOL_CAPABILITY_FTP: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET"], bitval ~= 0, ".... .... .... .... ." .. tostring(bitval) .. ".. .... MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED"], bitval ~= 0, ".... .... .... .... " .. tostring(bitval) .. "... .... MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " .... .... MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_TERRAIN"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". .... .... MAV_PROTOCOL_CAPABILITY_TERRAIN: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. .... .... MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... .... .... MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... .... .... MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 13), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MAVLINK2"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... .... .... MAV_PROTOCOL_CAPABILITY_MAVLINK2: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 14), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_FENCE"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... .... .... MAV_PROTOCOL_CAPABILITY_MISSION_FENCE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 15), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_RALLY"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... .... .... MAV_PROTOCOL_CAPABILITY_MISSION_RALLY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 16), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_RESERVED2"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... .... .... MAV_PROTOCOL_CAPABILITY_RESERVED2: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 17), 1)
    tree:add(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... .... .... MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_BATTERY_FAULT(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_DEEP_DISCHARGE"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " MAV_BATTERY_FAULT_DEEP_DISCHARGE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_SPIKES"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". MAV_BATTERY_FAULT_SPIKES: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_CELL_FAIL"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. MAV_BATTERY_FAULT_CELL_FAIL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_OVER_CURRENT"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... MAV_BATTERY_FAULT_OVER_CURRENT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_OVER_TEMPERATURE"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... MAV_BATTERY_FAULT_OVER_TEMPERATURE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_UNDER_TEMPERATURE"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... MAV_BATTERY_FAULT_UNDER_TEMPERATURE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagMAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagBATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_GENERATOR_STATUS_FLAG(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OFF"], bitval ~= 0, ".... .... .... .... .... ..." .. tostring(bitval) .. " MAV_GENERATOR_STATUS_FLAG_OFF: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_READY"], bitval ~= 0, ".... .... .... .... .... .." .. tostring(bitval) .. ". MAV_GENERATOR_STATUS_FLAG_READY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_GENERATING"], bitval ~= 0, ".... .... .... .... .... ." .. tostring(bitval) .. ".. MAV_GENERATOR_STATUS_FLAG_GENERATING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_CHARGING"], bitval ~= 0, ".... .... .... .... .... " .. tostring(bitval) .. "... MAV_GENERATOR_STATUS_FLAG_CHARGING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_REDUCED_POWER"], bitval ~= 0, ".... .... .... .... ..." .. tostring(bitval) .. " .... MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_MAXPOWER"], bitval ~= 0, ".... .... .... .... .." .. tostring(bitval) .. ". .... MAV_GENERATOR_STATUS_FLAG_MAXPOWER: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING"], bitval ~= 0, ".... .... .... .... ." .. tostring(bitval) .. ".. .... MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT"], bitval ~= 0, ".... .... .... .... " .. tostring(bitval) .. "... .... MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " .... .... MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". .... .... MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. .... .... MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... .... .... MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... .... .... MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 13), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_COOLING_WARNING"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... .... .... MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 14), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... .... .... MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 15), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... .... .... MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 16), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... .... .... MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 17), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... .... .... MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 18), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... .... .... MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 19), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_START_INHIBITED"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... .... .... MAV_GENERATOR_STATUS_FLAG_START_INHIBITED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 20), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED"], bitval ~= 0, "..." .. tostring(bitval) .. " .... .... .... .... .... MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 21), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_WARMING_UP"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... .... .... .... .... MAV_GENERATOR_STATUS_FLAG_WARMING_UP: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 22), 1)
    tree:add(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_IDLE"], bitval ~= 0, "." .. tostring(bitval) .. ".. .... .... .... .... .... MAV_GENERATOR_STATUS_FLAG_IDLE: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_ADSB_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_VALID_COORDS"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " ADSB_FLAGS_VALID_COORDS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_VALID_ALTITUDE"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". ADSB_FLAGS_VALID_ALTITUDE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_VALID_HEADING"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. ADSB_FLAGS_VALID_HEADING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_VALID_VELOCITY"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... ADSB_FLAGS_VALID_VELOCITY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_VALID_CALLSIGN"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... ADSB_FLAGS_VALID_CALLSIGN: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_VALID_SQUAWK"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... ADSB_FLAGS_VALID_SQUAWK: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_SIMULATED"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... ADSB_FLAGS_SIMULATED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_VERTICAL_VELOCITY_VALID"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... ADSB_FLAGS_VERTICAL_VELOCITY_VALID: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_BARO_VALID"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... ADSB_FLAGS_BARO_VALID: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 15), 1)
    tree:add(f[name .. "_flagADSB_FLAGS_SOURCE_UAT"], bitval ~= 0, "" .. tostring(bitval) .. "... .... .... .... ADSB_FLAGS_SOURCE_UAT: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_DO_REPOSITION_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_DO_REPOSITION_FLAGS_CHANGE_MODE"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " MAV_DO_REPOSITION_FLAGS_CHANGE_MODE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_DO_REPOSITION_FLAGS_ENUM_END"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". MAV_DO_REPOSITION_FLAGS_ENUM_END: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_ESTIMATOR_STATUS_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagESTIMATOR_ATTITUDE"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " ESTIMATOR_ATTITUDE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagESTIMATOR_VELOCITY_HORIZ"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". ESTIMATOR_VELOCITY_HORIZ: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagESTIMATOR_VELOCITY_VERT"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. ESTIMATOR_VELOCITY_VERT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagESTIMATOR_POS_HORIZ_REL"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... ESTIMATOR_POS_HORIZ_REL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagESTIMATOR_POS_HORIZ_ABS"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... ESTIMATOR_POS_HORIZ_ABS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagESTIMATOR_POS_VERT_ABS"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... ESTIMATOR_POS_VERT_ABS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagESTIMATOR_POS_VERT_AGL"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... ESTIMATOR_POS_VERT_AGL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagESTIMATOR_CONST_POS_MODE"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... ESTIMATOR_CONST_POS_MODE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagESTIMATOR_PRED_POS_HORIZ_REL"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... ESTIMATOR_PRED_POS_HORIZ_REL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagESTIMATOR_PRED_POS_HORIZ_ABS"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... ESTIMATOR_PRED_POS_HORIZ_ABS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagESTIMATOR_GPS_GLITCH"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... ESTIMATOR_GPS_GLITCH: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagESTIMATOR_ACCEL_ERROR"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... ESTIMATOR_ACCEL_ERROR: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_GPS_INPUT_IGNORE_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_ALT"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " GPS_INPUT_IGNORE_FLAG_ALT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_HDOP"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". GPS_INPUT_IGNORE_FLAG_HDOP: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VDOP"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. GPS_INPUT_IGNORE_FLAG_VDOP: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VEL_HORIZ"], bitval ~= 0, ".... " .. tostring(bitval) .. "... GPS_INPUT_IGNORE_FLAG_VEL_HORIZ: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VEL_VERT"], bitval ~= 0, "..." .. tostring(bitval) .. " .... GPS_INPUT_IGNORE_FLAG_VEL_VERT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY"], bitval ~= 0, "." .. tostring(bitval) .. ".. .... GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY"], bitval ~= 0, "" .. tostring(bitval) .. "... .... GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_CAMERA_CAP_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_CAPTURE_VIDEO"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " CAMERA_CAP_FLAGS_CAPTURE_VIDEO: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_CAPTURE_IMAGE"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". CAMERA_CAP_FLAGS_CAPTURE_IMAGE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_MODES"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. CAMERA_CAP_FLAGS_HAS_MODES: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_BASIC_ZOOM"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_BASIC_FOCUS"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_VIDEO_STREAM"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_TRACKING_POINT"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... CAMERA_CAP_FLAGS_HAS_TRACKING_POINT: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_VIDEO_STREAM_STATUS_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagVIDEO_STREAM_STATUS_FLAGS_RUNNING"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " VIDEO_STREAM_STATUS_FLAGS_RUNNING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagVIDEO_STREAM_STATUS_FLAGS_THERMAL"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". VIDEO_STREAM_STATUS_FLAGS_THERMAL: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_POSITION_TARGET_TYPEMASK(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_X_IGNORE"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " POSITION_TARGET_TYPEMASK_X_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". POSITION_TARGET_TYPEMASK_Y_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. POSITION_TARGET_TYPEMASK_Z_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... POSITION_TARGET_TYPEMASK_VX_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... POSITION_TARGET_TYPEMASK_VY_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... POSITION_TARGET_TYPEMASK_VZ_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... POSITION_TARGET_TYPEMASK_AX_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... POSITION_TARGET_TYPEMASK_AY_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... POSITION_TARGET_TYPEMASK_AZ_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_FORCE_SET"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... POSITION_TARGET_TYPEMASK_FORCE_SET: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... POSITION_TARGET_TYPEMASK_YAW_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_ATTITUDE_TARGET_TYPEMASK(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE"], bitval ~= 0, "." .. tostring(bitval) .. ".. .... ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE"], bitval ~= 0, "" .. tostring(bitval) .. "... .... ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_UTM_DATA_AVAIL_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_TIME_VALID"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " UTM_DATA_AVAIL_FLAGS_TIME_VALID: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE"], bitval ~= 0, ".... " .. tostring(bitval) .. "... UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE"], bitval ~= 0, "..." .. tostring(bitval) .. " .... UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE"], bitval ~= 0, "." .. tostring(bitval) .. ".. .... UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE"], bitval ~= 0, "" .. tostring(bitval) .. "... .... UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_AIS_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_POSITION_ACCURACY"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " AIS_FLAGS_POSITION_ACCURACY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_VALID_COG"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". AIS_FLAGS_VALID_COG: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_VALID_VELOCITY"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. AIS_FLAGS_VALID_VELOCITY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_HIGH_VELOCITY"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... AIS_FLAGS_HIGH_VELOCITY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_VALID_TURN_RATE"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... AIS_FLAGS_VALID_TURN_RATE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_TURN_RATE_SIGN_ONLY"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... AIS_FLAGS_TURN_RATE_SIGN_ONLY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_VALID_DIMENSIONS"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... AIS_FLAGS_VALID_DIMENSIONS: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_LARGE_BOW_DIMENSION"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... AIS_FLAGS_LARGE_BOW_DIMENSION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_LARGE_STERN_DIMENSION"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... AIS_FLAGS_LARGE_STERN_DIMENSION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_LARGE_PORT_DIMENSION"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... AIS_FLAGS_LARGE_PORT_DIMENSION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_LARGE_STARBOARD_DIMENSION"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... AIS_FLAGS_LARGE_STARBOARD_DIMENSION: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_VALID_CALLSIGN"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... AIS_FLAGS_VALID_CALLSIGN: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagAIS_FLAGS_VALID_NAME"], bitval ~= 0, "..." .. tostring(bitval) .. " .... .... .... AIS_FLAGS_VALID_NAME: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_WINCH_STATUS_FLAG(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_HEALTHY"], bitval ~= 0, ".... .... .... ..." .. tostring(bitval) .. " MAV_WINCH_STATUS_HEALTHY: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_FULLY_RETRACTED"], bitval ~= 0, ".... .... .... .." .. tostring(bitval) .. ". MAV_WINCH_STATUS_FULLY_RETRACTED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_MOVING"], bitval ~= 0, ".... .... .... ." .. tostring(bitval) .. ".. MAV_WINCH_STATUS_MOVING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_CLUTCH_ENGAGED"], bitval ~= 0, ".... .... .... " .. tostring(bitval) .. "... MAV_WINCH_STATUS_CLUTCH_ENGAGED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_LOCKED"], bitval ~= 0, ".... .... ..." .. tostring(bitval) .. " .... MAV_WINCH_STATUS_LOCKED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_DROPPING"], bitval ~= 0, ".... .... .." .. tostring(bitval) .. ". .... MAV_WINCH_STATUS_DROPPING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_ARRESTING"], bitval ~= 0, ".... .... ." .. tostring(bitval) .. ".. .... MAV_WINCH_STATUS_ARRESTING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_GROUND_SENSE"], bitval ~= 0, ".... .... " .. tostring(bitval) .. "... .... MAV_WINCH_STATUS_GROUND_SENSE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 8), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_RETRACTING"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " .... .... MAV_WINCH_STATUS_RETRACTING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 9), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_REDELIVER"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". .... .... MAV_WINCH_STATUS_REDELIVER: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 10), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_ABANDON_LINE"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. .... .... MAV_WINCH_STATUS_ABANDON_LINE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 11), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_LOCKING"], bitval ~= 0, ".... " .. tostring(bitval) .. "... .... .... MAV_WINCH_STATUS_LOCKING: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 12), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_LOAD_LINE"], bitval ~= 0, "..." .. tostring(bitval) .. " .... .... .... MAV_WINCH_STATUS_LOAD_LINE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 13), 1)
    tree:add(f[name .. "_flagMAV_WINCH_STATUS_LOAD_PAYLOAD"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... .... .... MAV_WINCH_STATUS_LOAD_PAYLOAD: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_EVENT_CURRENT_SEQUENCE_FLAGS(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_EVENT_CURRENT_SEQUENCE_FLAGS_ENUM_END"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". MAV_EVENT_CURRENT_SEQUENCE_FLAGS_ENUM_END: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_MODE_FLAG(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " MAV_MODE_FLAG_CUSTOM_MODE_ENABLED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_TEST_ENABLED"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". MAV_MODE_FLAG_TEST_ENABLED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_AUTO_ENABLED"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. MAV_MODE_FLAG_AUTO_ENABLED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_GUIDED_ENABLED"], bitval ~= 0, ".... " .. tostring(bitval) .. "... MAV_MODE_FLAG_GUIDED_ENABLED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_STABILIZE_ENABLED"], bitval ~= 0, "..." .. tostring(bitval) .. " .... MAV_MODE_FLAG_STABILIZE_ENABLED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_HIL_ENABLED"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... MAV_MODE_FLAG_HIL_ENABLED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED"], bitval ~= 0, "." .. tostring(bitval) .. ".. .... MAV_MODE_FLAG_MANUAL_INPUT_ENABLED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_SAFETY_ARMED"], bitval ~= 0, "" .. tostring(bitval) .. "... .... MAV_MODE_FLAG_SAFETY_ARMED: " .. tostring(bitval ~= 0))
end
-- dissect flag field
function dissect_flags_MAV_MODE_FLAG_DECODE_POSITION(tree, name, value)
    local bitval
    bitval = bit.band(bit.rshift(value, 0), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE"], bitval ~= 0, ".... ..." .. tostring(bitval) .. " MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 1), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_TEST"], bitval ~= 0, ".... .." .. tostring(bitval) .. ". MAV_MODE_FLAG_DECODE_POSITION_TEST: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 2), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_AUTO"], bitval ~= 0, ".... ." .. tostring(bitval) .. ".. MAV_MODE_FLAG_DECODE_POSITION_AUTO: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 3), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_GUIDED"], bitval ~= 0, ".... " .. tostring(bitval) .. "... MAV_MODE_FLAG_DECODE_POSITION_GUIDED: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 4), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_STABILIZE"], bitval ~= 0, "..." .. tostring(bitval) .. " .... MAV_MODE_FLAG_DECODE_POSITION_STABILIZE: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 5), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_HIL"], bitval ~= 0, ".." .. tostring(bitval) .. ". .... MAV_MODE_FLAG_DECODE_POSITION_HIL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 6), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_MANUAL"], bitval ~= 0, "." .. tostring(bitval) .. ".. .... MAV_MODE_FLAG_DECODE_POSITION_MANUAL: " .. tostring(bitval ~= 0))
    bitval = bit.band(bit.rshift(value, 7), 1)
    tree:add(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_SAFETY"], bitval ~= 0, "" .. tostring(bitval) .. "... .... MAV_MODE_FLAG_DECODE_POSITION_SAFETY: " .. tostring(bitval ~= 0))
end
-- dissect payload of message type SYS_STATUS
function payload_fns.payload_1(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 43 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 43)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SYS_STATUS_onboard_control_sensors_present, padded(field_offset, 4))
    dissect_flags_MAV_SYS_STATUS_SENSOR(subtree, "SYS_STATUS_onboard_control_sensors_present", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SYS_STATUS_onboard_control_sensors_enabled, padded(field_offset, 4))
    dissect_flags_MAV_SYS_STATUS_SENSOR(subtree, "SYS_STATUS_onboard_control_sensors_enabled", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SYS_STATUS_onboard_control_sensors_health, padded(field_offset, 4))
    dissect_flags_MAV_SYS_STATUS_SENSOR(subtree, "SYS_STATUS_onboard_control_sensors_health", value)
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SYS_STATUS_load, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SYS_STATUS_voltage_battery, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SYS_STATUS_current_battery, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.SYS_STATUS_battery_remaining, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SYS_STATUS_drop_rate_comm, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SYS_STATUS_errors_comm, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.SYS_STATUS_errors_count1, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SYS_STATUS_errors_count2, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.SYS_STATUS_errors_count3, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SYS_STATUS_errors_count4, padded(field_offset, 2))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.SYS_STATUS_onboard_control_sensors_present_extended, padded(field_offset, 4))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.SYS_STATUS_onboard_control_sensors_enabled_extended, padded(field_offset, 4))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.SYS_STATUS_onboard_control_sensors_health_extended, padded(field_offset, 4))
end
-- dissect payload of message type SYSTEM_TIME
function payload_fns.payload_2(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SYSTEM_TIME_time_unix_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SYSTEM_TIME_time_boot_ms, padded(field_offset, 4))
end
-- dissect payload of message type PING
function payload_fns.payload_4(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 14 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 14)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PING_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.PING_seq, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.PING_target_system, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.PING_target_component, padded(field_offset, 1))
end
-- dissect payload of message type CHANGE_OPERATOR_CONTROL
function payload_fns.payload_5(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CHANGE_OPERATOR_CONTROL_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.CHANGE_OPERATOR_CONTROL_control_request, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.CHANGE_OPERATOR_CONTROL_version, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.CHANGE_OPERATOR_CONTROL_passkey, padded(field_offset, 25))
end
-- dissect payload of message type CHANGE_OPERATOR_CONTROL_ACK
function payload_fns.payload_6(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CHANGE_OPERATOR_CONTROL_ACK_gcs_system_id, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.CHANGE_OPERATOR_CONTROL_ACK_control_request, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.CHANGE_OPERATOR_CONTROL_ACK_ack, padded(field_offset, 1))
end
-- dissect payload of message type AUTH_KEY
function payload_fns.payload_7(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.AUTH_KEY_key, padded(field_offset, 32))
end
-- dissect payload of message type LINK_NODE_STATUS
function payload_fns.payload_8(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 36 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 36)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_timestamp, padded(field_offset, 8))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_tx_buf, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_rx_buf, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_tx_rate, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_rx_rate, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_rx_parse_err, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_tx_overflows, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_rx_overflows, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_messages_sent, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_messages_received, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LINK_NODE_STATUS_messages_lost, padded(field_offset, 4))
end
-- dissect payload of message type SET_MODE
function payload_fns.payload_11(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SET_MODE_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.SET_MODE_base_mode, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SET_MODE_custom_mode, padded(field_offset, 4))
end
-- dissect payload of message type PARAM_REQUEST_READ
function payload_fns.payload_20(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.PARAM_REQUEST_READ_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.PARAM_REQUEST_READ_target_component, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PARAM_REQUEST_READ_param_id, padded(field_offset, 16))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_REQUEST_READ_param_index, padded(field_offset, 2))
end
-- dissect payload of message type PARAM_REQUEST_LIST
function payload_fns.payload_21(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_REQUEST_LIST_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.PARAM_REQUEST_LIST_target_component, padded(field_offset, 1))
end
-- dissect payload of message type PARAM_VALUE
function payload_fns.payload_22(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 25 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 25)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 8
    subtree, value = tree:add_le(f.PARAM_VALUE_param_id, padded(field_offset, 16))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_VALUE_param_value, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.PARAM_VALUE_param_type, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PARAM_VALUE_param_count, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.PARAM_VALUE_param_index, padded(field_offset, 2))
end
-- dissect payload of message type PARAM_SET
function payload_fns.payload_23(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 23 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 23)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PARAM_SET_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.PARAM_SET_target_component, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.PARAM_SET_param_id, padded(field_offset, 16))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_SET_param_value, padded(field_offset, 4))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.PARAM_SET_param_type, padded(field_offset, 1))
end
-- dissect payload of message type GPS_RAW_INT
function payload_fns.payload_24(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 52 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 52)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS_RAW_INT_time_usec, padded(field_offset, 8))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS_RAW_INT_fix_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS_RAW_INT_lat, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS_RAW_INT_lon, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS_RAW_INT_alt, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS_RAW_INT_eph, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.GPS_RAW_INT_epv, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS_RAW_INT_vel, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.GPS_RAW_INT_cog, padded(field_offset, 2))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.GPS_RAW_INT_satellites_visible, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GPS_RAW_INT_alt_ellipsoid, padded(field_offset, 4))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GPS_RAW_INT_h_acc, padded(field_offset, 4))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.GPS_RAW_INT_v_acc, padded(field_offset, 4))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.GPS_RAW_INT_vel_acc, padded(field_offset, 4))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.GPS_RAW_INT_hdg_acc, padded(field_offset, 4))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.GPS_RAW_INT_yaw, padded(field_offset, 2))
end
-- dissect payload of message type GPS_STATUS
function payload_fns.payload_25(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 101 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 101)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS_STATUS_satellites_visible, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_0, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_1, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_2, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_3, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_4, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_5, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_6, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_7, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_8, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_9, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_10, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_11, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_12, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_13, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_14, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_15, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_16, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_17, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_18, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_prn_19, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_0, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_1, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_2, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_3, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_4, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_5, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_6, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_7, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_8, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_9, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_10, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_11, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_12, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_13, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_14, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_15, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_16, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_17, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_18, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_used_19, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_0, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_1, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_2, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_3, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_4, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_5, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_6, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_7, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_8, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_9, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_10, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_11, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_12, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_13, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_14, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_15, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_16, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_17, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_18, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_elevation_19, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_0, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_1, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_2, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_3, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_4, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_5, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_6, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_7, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_8, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_9, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_10, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_11, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_12, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_13, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_14, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_15, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_16, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_17, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_18, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_azimuth_19, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_0, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_1, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_2, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_3, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_4, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_5, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_6, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_7, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_8, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_9, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_10, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_11, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_12, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_13, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_14, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_15, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_16, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_17, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_18, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.GPS_STATUS_satellite_snr_19, padded(field_offset, 1))
end
-- dissect payload of message type SCALED_IMU
function payload_fns.payload_26(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SCALED_IMU_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SCALED_IMU_xacc, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.SCALED_IMU_yacc, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SCALED_IMU_zacc, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.SCALED_IMU_xgyro, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SCALED_IMU_ygyro, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SCALED_IMU_zgyro, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SCALED_IMU_xmag, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SCALED_IMU_ymag, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SCALED_IMU_zmag, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.SCALED_IMU_temperature, padded(field_offset, 2))
end
-- dissect payload of message type RAW_IMU
function payload_fns.payload_27(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 29 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 29)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RAW_IMU_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RAW_IMU_xacc, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.RAW_IMU_yacc, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.RAW_IMU_zacc, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.RAW_IMU_xgyro, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.RAW_IMU_ygyro, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.RAW_IMU_zgyro, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.RAW_IMU_xmag, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.RAW_IMU_ymag, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.RAW_IMU_zmag, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.RAW_IMU_id, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.RAW_IMU_temperature, padded(field_offset, 2))
end
-- dissect payload of message type RAW_PRESSURE
function payload_fns.payload_28(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RAW_PRESSURE_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RAW_PRESSURE_press_abs, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.RAW_PRESSURE_press_diff1, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.RAW_PRESSURE_press_diff2, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.RAW_PRESSURE_temperature, padded(field_offset, 2))
end
-- dissect payload of message type SCALED_PRESSURE
function payload_fns.payload_29(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SCALED_PRESSURE_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SCALED_PRESSURE_press_abs, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SCALED_PRESSURE_press_diff, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SCALED_PRESSURE_temperature, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SCALED_PRESSURE_temperature_press_diff, padded(field_offset, 2))
end
-- dissect payload of message type ATTITUDE
function payload_fns.payload_30(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ATTITUDE_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.ATTITUDE_roll, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ATTITUDE_pitch, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ATTITUDE_yaw, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ATTITUDE_rollspeed, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ATTITUDE_pitchspeed, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ATTITUDE_yawspeed, padded(field_offset, 4))
end
-- dissect payload of message type ATTITUDE_QUATERNION
function payload_fns.payload_31(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 48 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 48)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_q1, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_q2, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_q3, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_q4, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_rollspeed, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_pitchspeed, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_yawspeed, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_0, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_1, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_2, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_3, padded(field_offset, 4))
end
-- dissect payload of message type LOCAL_POSITION_NED
function payload_fns.payload_32(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_x, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_y, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_z, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_vx, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_vy, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_vz, padded(field_offset, 4))
end
-- dissect payload of message type GLOBAL_POSITION_INT
function payload_fns.payload_33(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_lat, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_lon, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_alt, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_relative_alt, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_vx, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_vy, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_vz, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_hdg, padded(field_offset, 2))
end
-- dissect payload of message type RC_CHANNELS_SCALED
function payload_fns.payload_34(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_port, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan1_scaled, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan2_scaled, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan3_scaled, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan4_scaled, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan5_scaled, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan6_scaled, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan7_scaled, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_chan8_scaled, padded(field_offset, 2))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.RC_CHANNELS_SCALED_rssi, padded(field_offset, 1))
end
-- dissect payload of message type RC_CHANNELS_RAW
function payload_fns.payload_35(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_port, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan1_raw, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan2_raw, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan3_raw, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan4_raw, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan5_raw, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan6_raw, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan7_raw, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_chan8_raw, padded(field_offset, 2))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.RC_CHANNELS_RAW_rssi, padded(field_offset, 1))
end
-- dissect payload of message type SERVO_OUTPUT_RAW
function payload_fns.payload_36(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_time_usec, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_port, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo1_raw, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo2_raw, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo3_raw, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo4_raw, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo5_raw, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo6_raw, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo7_raw, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo8_raw, padded(field_offset, 2))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo9_raw, padded(field_offset, 2))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo10_raw, padded(field_offset, 2))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo11_raw, padded(field_offset, 2))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo12_raw, padded(field_offset, 2))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo13_raw, padded(field_offset, 2))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo14_raw, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo15_raw, padded(field_offset, 2))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.SERVO_OUTPUT_RAW_servo16_raw, padded(field_offset, 2))
end
-- dissect payload of message type MISSION_REQUEST_PARTIAL_LIST
function payload_fns.payload_37(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 7 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 7)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_start_index, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_end_index, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_WRITE_PARTIAL_LIST
function payload_fns.payload_38(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 7 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 7)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_start_index, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_end_index, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_ITEM
function payload_fns.payload_39(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 32
    subtree, value = tree:add_le(f.MISSION_ITEM_target_system, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.MISSION_ITEM_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.MISSION_ITEM_seq, padded(field_offset, 2))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.MISSION_ITEM_frame, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.MISSION_ITEM_command, padded(field_offset, 2))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.MISSION_ITEM_current, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.MISSION_ITEM_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_ITEM_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_ITEM_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.MISSION_ITEM_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.MISSION_ITEM_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.MISSION_ITEM_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.MISSION_ITEM_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.MISSION_ITEM_z, padded(field_offset, 4))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.MISSION_ITEM_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_REQUEST
function payload_fns.payload_40(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_REQUEST_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.MISSION_REQUEST_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_REQUEST_seq, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_REQUEST_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_SET_CURRENT
function payload_fns.payload_41(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_SET_CURRENT_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.MISSION_SET_CURRENT_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_SET_CURRENT_seq, padded(field_offset, 2))
end
-- dissect payload of message type MISSION_CURRENT
function payload_fns.payload_42(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_CURRENT_seq, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_CURRENT_total, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_CURRENT_mission_state, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.MISSION_CURRENT_mission_mode, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_REQUEST_LIST
function payload_fns.payload_43(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_REQUEST_LIST_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.MISSION_REQUEST_LIST_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_REQUEST_LIST_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_COUNT
function payload_fns.payload_44(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_COUNT_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.MISSION_COUNT_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_COUNT_count, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_COUNT_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_CLEAR_ALL
function payload_fns.payload_45(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_CLEAR_ALL_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.MISSION_CLEAR_ALL_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_CLEAR_ALL_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type MISSION_ITEM_REACHED
function payload_fns.payload_46(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_ITEM_REACHED_seq, padded(field_offset, 2))
end
-- dissect payload of message type MISSION_ACK
function payload_fns.payload_47(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_ACK_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.MISSION_ACK_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_ACK_type, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.MISSION_ACK_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type SET_GPS_GLOBAL_ORIGIN
function payload_fns.payload_48(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 21 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 21)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_target_system, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_latitude, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_longitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_altitude, padded(field_offset, 4))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_time_usec, padded(field_offset, 8))
end
-- dissect payload of message type GPS_GLOBAL_ORIGIN
function payload_fns.payload_49(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS_GLOBAL_ORIGIN_latitude, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GPS_GLOBAL_ORIGIN_longitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS_GLOBAL_ORIGIN_altitude, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS_GLOBAL_ORIGIN_time_usec, padded(field_offset, 8))
end
-- dissect payload of message type PARAM_MAP_RC
function payload_fns.payload_50(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 18
    subtree, value = tree:add_le(f.PARAM_MAP_RC_target_system, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.PARAM_MAP_RC_target_component, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.PARAM_MAP_RC_param_id, padded(field_offset, 16))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.PARAM_MAP_RC_param_index, padded(field_offset, 2))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.PARAM_MAP_RC_parameter_rc_channel_index, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_MAP_RC_param_value0, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PARAM_MAP_RC_scale, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.PARAM_MAP_RC_param_value_min, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.PARAM_MAP_RC_param_value_max, padded(field_offset, 4))
end
-- dissect payload of message type MISSION_REQUEST_INT
function payload_fns.payload_51(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MISSION_REQUEST_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.MISSION_REQUEST_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_REQUEST_INT_seq, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_REQUEST_INT_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type SAFETY_SET_ALLOWED_AREA
function payload_fns.payload_54(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 27 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 27)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_target_system, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_target_component, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_frame, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p1x, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p1y, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p1z, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p2x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p2y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p2z, padded(field_offset, 4))
end
-- dissect payload of message type SAFETY_ALLOWED_AREA
function payload_fns.payload_55(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 25 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 25)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SAFETY_ALLOWED_AREA_frame, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SAFETY_ALLOWED_AREA_p1x, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SAFETY_ALLOWED_AREA_p1y, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SAFETY_ALLOWED_AREA_p1z, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SAFETY_ALLOWED_AREA_p2x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SAFETY_ALLOWED_AREA_p2y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SAFETY_ALLOWED_AREA_p2z, padded(field_offset, 4))
end
-- dissect payload of message type ATTITUDE_QUATERNION_COV
function payload_fns.payload_61(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 72 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 72)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_rollspeed, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_pitchspeed, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_yawspeed, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_0, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_1, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_2, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_3, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_4, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_5, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_6, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_7, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_8, padded(field_offset, 4))
end
-- dissect payload of message type NAV_CONTROLLER_OUTPUT
function payload_fns.payload_62(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 26 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 26)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_nav_roll, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_nav_pitch, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_nav_bearing, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_target_bearing, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_wp_dist, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_alt_error, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_aspd_error, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.NAV_CONTROLLER_OUTPUT_xtrack_error, padded(field_offset, 4))
end
-- dissect payload of message type GLOBAL_POSITION_INT_COV
function payload_fns.payload_63(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 181 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 181)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_time_usec, padded(field_offset, 8))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_estimator_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_lat, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_lon, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_alt, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_relative_alt, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_vx, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_vy, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_vz, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_0, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_1, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_2, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_3, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_4, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_5, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_6, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_7, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_8, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_9, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_10, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_11, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_12, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_13, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_14, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_15, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_16, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_17, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_18, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_19, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_20, padded(field_offset, 4))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_21, padded(field_offset, 4))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_22, padded(field_offset, 4))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_23, padded(field_offset, 4))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_24, padded(field_offset, 4))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_25, padded(field_offset, 4))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_26, padded(field_offset, 4))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_27, padded(field_offset, 4))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_28, padded(field_offset, 4))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_29, padded(field_offset, 4))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_30, padded(field_offset, 4))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_31, padded(field_offset, 4))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_32, padded(field_offset, 4))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_33, padded(field_offset, 4))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_34, padded(field_offset, 4))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_35, padded(field_offset, 4))
end
-- dissect payload of message type LOCAL_POSITION_NED_COV
function payload_fns.payload_64(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 225 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 225)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_time_usec, padded(field_offset, 8))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_estimator_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_vx, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_vy, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_vz, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_ax, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_ay, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_az, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_0, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_1, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_2, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_3, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_4, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_5, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_6, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_7, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_8, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_9, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_10, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_11, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_12, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_13, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_14, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_15, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_16, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_17, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_18, padded(field_offset, 4))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_19, padded(field_offset, 4))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_20, padded(field_offset, 4))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_21, padded(field_offset, 4))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_22, padded(field_offset, 4))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_23, padded(field_offset, 4))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_24, padded(field_offset, 4))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_25, padded(field_offset, 4))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_26, padded(field_offset, 4))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_27, padded(field_offset, 4))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_28, padded(field_offset, 4))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_29, padded(field_offset, 4))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_30, padded(field_offset, 4))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_31, padded(field_offset, 4))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_32, padded(field_offset, 4))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_33, padded(field_offset, 4))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_34, padded(field_offset, 4))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_35, padded(field_offset, 4))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_36, padded(field_offset, 4))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_37, padded(field_offset, 4))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_38, padded(field_offset, 4))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_39, padded(field_offset, 4))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_40, padded(field_offset, 4))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_41, padded(field_offset, 4))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_42, padded(field_offset, 4))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_43, padded(field_offset, 4))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_44, padded(field_offset, 4))
end
-- dissect payload of message type RC_CHANNELS
function payload_fns.payload_65(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RC_CHANNELS_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.RC_CHANNELS_chancount, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RC_CHANNELS_chan1_raw, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.RC_CHANNELS_chan2_raw, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RC_CHANNELS_chan3_raw, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.RC_CHANNELS_chan4_raw, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.RC_CHANNELS_chan5_raw, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.RC_CHANNELS_chan6_raw, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.RC_CHANNELS_chan7_raw, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.RC_CHANNELS_chan8_raw, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.RC_CHANNELS_chan9_raw, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.RC_CHANNELS_chan10_raw, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.RC_CHANNELS_chan11_raw, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.RC_CHANNELS_chan12_raw, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.RC_CHANNELS_chan13_raw, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.RC_CHANNELS_chan14_raw, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.RC_CHANNELS_chan15_raw, padded(field_offset, 2))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.RC_CHANNELS_chan16_raw, padded(field_offset, 2))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.RC_CHANNELS_chan17_raw, padded(field_offset, 2))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.RC_CHANNELS_chan18_raw, padded(field_offset, 2))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.RC_CHANNELS_rssi, padded(field_offset, 1))
end
-- dissect payload of message type REQUEST_DATA_STREAM
function payload_fns.payload_66(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.REQUEST_DATA_STREAM_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.REQUEST_DATA_STREAM_target_component, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.REQUEST_DATA_STREAM_req_stream_id, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.REQUEST_DATA_STREAM_req_message_rate, padded(field_offset, 2))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.REQUEST_DATA_STREAM_start_stop, padded(field_offset, 1))
end
-- dissect payload of message type DATA_STREAM
function payload_fns.payload_67(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.DATA_STREAM_stream_id, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.DATA_STREAM_message_rate, padded(field_offset, 2))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.DATA_STREAM_on_off, padded(field_offset, 1))
end
-- dissect payload of message type MANUAL_CONTROL
function payload_fns.payload_69(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 10
    subtree, value = tree:add_le(f.MANUAL_CONTROL_target, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MANUAL_CONTROL_x, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MANUAL_CONTROL_y, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MANUAL_CONTROL_z, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.MANUAL_CONTROL_r, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.MANUAL_CONTROL_buttons, padded(field_offset, 2))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.MANUAL_CONTROL_buttons2, padded(field_offset, 2))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.MANUAL_CONTROL_enabled_extensions, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.MANUAL_CONTROL_s, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.MANUAL_CONTROL_t, padded(field_offset, 2))
end
-- dissect payload of message type RC_CHANNELS_OVERRIDE
function payload_fns.payload_70(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 16
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_target_system, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan1_raw, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan2_raw, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan3_raw, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan4_raw, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan5_raw, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan6_raw, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan7_raw, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan8_raw, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan9_raw, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan10_raw, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan11_raw, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan12_raw, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan13_raw, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan14_raw, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan15_raw, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan16_raw, padded(field_offset, 2))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan17_raw, padded(field_offset, 2))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan18_raw, padded(field_offset, 2))
end
-- dissect payload of message type MISSION_ITEM_INT
function payload_fns.payload_73(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 32
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_seq, padded(field_offset, 2))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_frame, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_command, padded(field_offset, 2))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_current, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_z, padded(field_offset, 4))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.MISSION_ITEM_INT_mission_type, padded(field_offset, 1))
end
-- dissect payload of message type VFR_HUD
function payload_fns.payload_74(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.VFR_HUD_airspeed, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.VFR_HUD_groundspeed, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.VFR_HUD_heading, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.VFR_HUD_throttle, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.VFR_HUD_alt, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.VFR_HUD_climb, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_WAYPOINT
function payload_fns.payload_75_cmd16(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_UNLIM
function payload_fns.payload_75_cmd17(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_TURNS
function payload_fns.payload_75_cmd18(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_TIME
function payload_fns.payload_75_cmd19(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_RETURN_TO_LAUNCH
function payload_fns.payload_75_cmd20(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LAND
function payload_fns.payload_75_cmd21(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_TAKEOFF
function payload_fns.payload_75_cmd22(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LAND_LOCAL
function payload_fns.payload_75_cmd23(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_TAKEOFF_LOCAL
function payload_fns.payload_75_cmd24(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FOLLOW
function payload_fns.payload_75_cmd25(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT
function payload_fns.payload_75_cmd30(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_TO_ALT
function payload_fns.payload_75_cmd31(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FOLLOW
function payload_fns.payload_75_cmd32(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FOLLOW_REPOSITION
function payload_fns.payload_75_cmd33(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_ORBIT
function payload_fns.payload_75_cmd34(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_ROI
function payload_fns.payload_75_cmd80(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_PATHPLANNING
function payload_fns.payload_75_cmd81(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_SPLINE_WAYPOINT
function payload_fns.payload_75_cmd82(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_VTOL_TAKEOFF
function payload_fns.payload_75_cmd84(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_VTOL_LAND
function payload_fns.payload_75_cmd85(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_GUIDED_ENABLE
function payload_fns.payload_75_cmd92(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_DELAY
function payload_fns.payload_75_cmd93(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_PAYLOAD_PLACE
function payload_fns.payload_75_cmd94(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LAST
function payload_fns.payload_75_cmd95(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_DELAY
function payload_fns.payload_75_cmd112(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_DELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_CHANGE_ALT
function payload_fns.payload_75_cmd113(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_DISTANCE
function payload_fns.payload_75_cmd114(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_DISTANCE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_YAW
function payload_fns.payload_75_cmd115(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_LAST
function payload_fns.payload_75_cmd159(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_MODE
function payload_fns.payload_75_cmd176(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_JUMP
function payload_fns.payload_75_cmd177(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_CHANGE_SPEED
function payload_fns.payload_75_cmd178(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_HOME
function payload_fns.payload_75_cmd179(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_PARAMETER
function payload_fns.payload_75_cmd180(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_RELAY
function payload_fns.payload_75_cmd181(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_REPEAT_RELAY
function payload_fns.payload_75_cmd182(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_SERVO
function payload_fns.payload_75_cmd183(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_REPEAT_SERVO
function payload_fns.payload_75_cmd184(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FLIGHTTERMINATION
function payload_fns.payload_75_cmd185(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_CHANGE_ALTITUDE
function payload_fns.payload_75_cmd186(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ACTUATOR
function payload_fns.payload_75_cmd187(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_LAND_START
function payload_fns.payload_75_cmd189(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_RALLY_LAND
function payload_fns.payload_75_cmd190(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GO_AROUND
function payload_fns.payload_75_cmd191(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GO_AROUND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_REPOSITION
function payload_fns.payload_75_cmd192(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param2, padded(field_offset, 4))
    dissect_flags_MAV_DO_REPOSITION_FLAGS(subtree, "cmd_MAV_CMD_DO_REPOSITION_param2", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_PAUSE_CONTINUE
function payload_fns.payload_75_cmd193(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_REVERSE
function payload_fns.payload_75_cmd194(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_REVERSE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_LOCATION
function payload_fns.payload_75_cmd195(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
function payload_fns.payload_75_cmd196(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_NONE
function payload_fns.payload_75_cmd197(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_NONE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_SYSID
function payload_fns.payload_75_cmd198(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_CONTROL_VIDEO
function payload_fns.payload_75_cmd200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI
function payload_fns.payload_75_cmd201(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_DIGICAM_CONFIGURE
function payload_fns.payload_75_cmd202(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_DIGICAM_CONTROL
function payload_fns.payload_75_cmd203(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOUNT_CONFIGURE
function payload_fns.payload_75_cmd204(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOUNT_CONTROL
function payload_fns.payload_75_cmd205(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_CAM_TRIGG_DIST
function payload_fns.payload_75_cmd206(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FENCE_ENABLE
function payload_fns.payload_75_cmd207(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FENCE_ENABLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_PARACHUTE
function payload_fns.payload_75_cmd208(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_PARACHUTE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOTOR_TEST
function payload_fns.payload_75_cmd209(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_INVERTED_FLIGHT
function payload_fns.payload_75_cmd210(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GRIPPER
function payload_fns.payload_75_cmd211(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_AUTOTUNE_ENABLE
function payload_fns.payload_75_cmd212(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_SET_YAW_SPEED
function payload_fns.payload_75_cmd213(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL
function payload_fns.payload_75_cmd214(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOUNT_CONTROL_QUAT
function payload_fns.payload_75_cmd220(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GUIDED_MASTER
function payload_fns.payload_75_cmd221(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GUIDED_LIMITS
function payload_fns.payload_75_cmd222(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_ENGINE_CONTROL
function payload_fns.payload_75_cmd223(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_MISSION_CURRENT
function payload_fns.payload_75_cmd224(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_LAST
function payload_fns.payload_75_cmd240(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_CALIBRATION
function payload_fns.payload_75_cmd241(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS
function payload_fns.payload_75_cmd242(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_UAVCAN
function payload_fns.payload_75_cmd243(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_STORAGE
function payload_fns.payload_75_cmd245(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN
function payload_fns.payload_75_cmd246(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_OVERRIDE_GOTO
function payload_fns.payload_75_cmd252(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_OBLIQUE_SURVEY
function payload_fns.payload_75_cmd260(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_MISSION_START
function payload_fns.payload_75_cmd300(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_ACTUATOR_TEST
function payload_fns.payload_75_cmd310(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ACTUATOR_TEST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ACTUATOR_TEST_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ACTUATOR_TEST_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONFIGURE_ACTUATOR
function payload_fns.payload_75_cmd311(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_COMPONENT_ARM_DISARM
function payload_fns.payload_75_cmd400(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_RUN_PREARM_CHECKS
function payload_fns.payload_75_cmd401(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_ILLUMINATOR_ON_OFF
function payload_fns.payload_75_cmd405(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ILLUMINATOR_ON_OFF_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GET_HOME_POSITION
function payload_fns.payload_75_cmd410(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_INJECT_FAILURE
function payload_fns.payload_75_cmd420(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_INJECT_FAILURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_INJECT_FAILURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_INJECT_FAILURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_START_RX_PAIR
function payload_fns.payload_75_cmd500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GET_MESSAGE_INTERVAL
function payload_fns.payload_75_cmd510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_MESSAGE_INTERVAL
function payload_fns.payload_75_cmd511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_MESSAGE
function payload_fns.payload_75_cmd512(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_PROTOCOL_VERSION
function payload_fns.payload_75_cmd519(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES
function payload_fns.payload_75_cmd520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_CAMERA_INFORMATION
function payload_fns.payload_75_cmd521(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_CAMERA_SETTINGS
function payload_fns.payload_75_cmd522(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_STORAGE_INFORMATION
function payload_fns.payload_75_cmd525(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_STORAGE_FORMAT
function payload_fns.payload_75_cmd526(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS
function payload_fns.payload_75_cmd527(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_FLIGHT_INFORMATION
function payload_fns.payload_75_cmd528(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_RESET_CAMERA_SETTINGS
function payload_fns.payload_75_cmd529(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_CAMERA_MODE
function payload_fns.payload_75_cmd530(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_MODE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_CAMERA_ZOOM
function payload_fns.payload_75_cmd531(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_CAMERA_FOCUS
function payload_fns.payload_75_cmd532(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_STORAGE_USAGE
function payload_fns.payload_75_cmd533(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_STORAGE_USAGE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_STORAGE_USAGE_param2, padded(field_offset, 4))
    dissect_flags_STORAGE_USAGE_FLAG(subtree, "cmd_MAV_CMD_SET_STORAGE_USAGE_param2", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_JUMP_TAG
function payload_fns.payload_75_cmd600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_JUMP_TAG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_JUMP_TAG
function payload_fns.payload_75_cmd601(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW
function payload_fns.payload_75_cmd1000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5, padded(field_offset, 4))
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5", value)
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
function payload_fns.payload_75_cmd1001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_IMAGE_START_CAPTURE
function payload_fns.payload_75_cmd2000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_IMAGE_STOP_CAPTURE
function payload_fns.payload_75_cmd2001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE
function payload_fns.payload_75_cmd2002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_TRIGGER_CONTROL
function payload_fns.payload_75_cmd2003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAMERA_TRACK_POINT
function payload_fns.payload_75_cmd2004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAMERA_TRACK_RECTANGLE
function payload_fns.payload_75_cmd2005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAMERA_STOP_TRACKING
function payload_fns.payload_75_cmd2010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_START_CAPTURE
function payload_fns.payload_75_cmd2500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_STOP_CAPTURE
function payload_fns.payload_75_cmd2501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_START_STREAMING
function payload_fns.payload_75_cmd2502(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_STREAMING_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_STOP_STREAMING
function payload_fns.payload_75_cmd2503(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION
function payload_fns.payload_75_cmd2504(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_VIDEO_STREAM_STATUS
function payload_fns.payload_75_cmd2505(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_LOGGING_START
function payload_fns.payload_75_cmd2510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_LOGGING_START_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_LOGGING_STOP
function payload_fns.payload_75_cmd2511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_AIRFRAME_CONFIGURATION
function payload_fns.payload_75_cmd2520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONTROL_HIGH_LATENCY
function payload_fns.payload_75_cmd2600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PANORAMA_CREATE
function payload_fns.payload_75_cmd2800(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_VTOL_TRANSITION
function payload_fns.payload_75_cmd3000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_ARM_AUTHORIZATION_REQUEST
function payload_fns.payload_75_cmd3001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_GUIDED_SUBMODE_STANDARD
function payload_fns.payload_75_cmd4000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE
function payload_fns.payload_75_cmd4001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_GATE
function payload_fns.payload_75_cmd4501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_RETURN_POINT
function payload_fns.payload_75_cmd5000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION
function payload_fns.payload_75_cmd5001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION
function payload_fns.payload_75_cmd5002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION
function payload_fns.payload_75_cmd5003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION
function payload_fns.payload_75_cmd5004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_RALLY_POINT
function payload_fns.payload_75_cmd5100(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_UAVCAN_GET_NODE_INFO
function payload_fns.payload_75_cmd5200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_ADSB_OUT_IDENT
function payload_fns.payload_75_cmd10001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PAYLOAD_PREPARE_DEPLOY
function payload_fns.payload_75_cmd30001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PAYLOAD_CONTROL_DEPLOY
function payload_fns.payload_75_cmd30002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_1
function payload_fns.payload_75_cmd31000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_2
function payload_fns.payload_75_cmd31001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_3
function payload_fns.payload_75_cmd31002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_4
function payload_fns.payload_75_cmd31003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_5
function payload_fns.payload_75_cmd31004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_1
function payload_fns.payload_75_cmd31005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_2
function payload_fns.payload_75_cmd31006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_3
function payload_fns.payload_75_cmd31007(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_4
function payload_fns.payload_75_cmd31008(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_5
function payload_fns.payload_75_cmd31009(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_1
function payload_fns.payload_75_cmd31010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_2
function payload_fns.payload_75_cmd31011(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_3
function payload_fns.payload_75_cmd31012(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_4
function payload_fns.payload_75_cmd31013(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_5
function payload_fns.payload_75_cmd31014(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAN_FORWARD
function payload_fns.payload_75_cmd32000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAN_FORWARD_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_FIXED_MAG_CAL_YAW
function payload_fns.payload_75_cmd42006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_WINCH
function payload_fns.payload_75_cmd42600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_ENUM_END
function payload_fns.payload_75_cmd42601(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_INT
function payload_fns.payload_75(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    local cmd_id = padded(offset + 28, 2):le_uint()
    local cmd_name = enumEntryName.MAV_CMD[cmd_id]
    if cmd_name ~= nil then
        pinfo.cols.info:append(": " .. cmd_name)
    end
    local cmd_fn = payload_fns["payload_75_cmd" .. tostring(cmd_id)]
    if cmd_fn ~= nil then
        cmd_fn(buffer, tree, msgid, offset, limit, pinfo)
        return
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_INT_frame, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_INT_command, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.COMMAND_INT_current, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.COMMAND_INT_autocontinue, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_INT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_INT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_INT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_INT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_INT_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_INT_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_INT_z, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_WAYPOINT
function payload_fns.payload_76_cmd16(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_UNLIM
function payload_fns.payload_76_cmd17(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_TURNS
function payload_fns.payload_76_cmd18(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_TIME
function payload_fns.payload_76_cmd19(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_RETURN_TO_LAUNCH
function payload_fns.payload_76_cmd20(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LAND
function payload_fns.payload_76_cmd21(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_TAKEOFF
function payload_fns.payload_76_cmd22(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LAND_LOCAL
function payload_fns.payload_76_cmd23(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_TAKEOFF_LOCAL
function payload_fns.payload_76_cmd24(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FOLLOW
function payload_fns.payload_76_cmd25(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT
function payload_fns.payload_76_cmd30(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_TO_ALT
function payload_fns.payload_76_cmd31(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FOLLOW
function payload_fns.payload_76_cmd32(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FOLLOW_REPOSITION
function payload_fns.payload_76_cmd33(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_ORBIT
function payload_fns.payload_76_cmd34(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ORBIT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_ROI
function payload_fns.payload_76_cmd80(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_PATHPLANNING
function payload_fns.payload_76_cmd81(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_SPLINE_WAYPOINT
function payload_fns.payload_76_cmd82(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_VTOL_TAKEOFF
function payload_fns.payload_76_cmd84(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_VTOL_LAND
function payload_fns.payload_76_cmd85(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_GUIDED_ENABLE
function payload_fns.payload_76_cmd92(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_DELAY
function payload_fns.payload_76_cmd93(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_PAYLOAD_PLACE
function payload_fns.payload_76_cmd94(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LAST
function payload_fns.payload_76_cmd95(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_DELAY
function payload_fns.payload_76_cmd112(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_DELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_CHANGE_ALT
function payload_fns.payload_76_cmd113(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_DISTANCE
function payload_fns.payload_76_cmd114(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_DISTANCE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_YAW
function payload_fns.payload_76_cmd115(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_LAST
function payload_fns.payload_76_cmd159(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_MODE
function payload_fns.payload_76_cmd176(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_JUMP
function payload_fns.payload_76_cmd177(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_CHANGE_SPEED
function payload_fns.payload_76_cmd178(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_HOME
function payload_fns.payload_76_cmd179(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_PARAMETER
function payload_fns.payload_76_cmd180(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_RELAY
function payload_fns.payload_76_cmd181(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_REPEAT_RELAY
function payload_fns.payload_76_cmd182(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_SERVO
function payload_fns.payload_76_cmd183(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_REPEAT_SERVO
function payload_fns.payload_76_cmd184(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FLIGHTTERMINATION
function payload_fns.payload_76_cmd185(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_CHANGE_ALTITUDE
function payload_fns.payload_76_cmd186(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ACTUATOR
function payload_fns.payload_76_cmd187(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ACTUATOR_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_LAND_START
function payload_fns.payload_76_cmd189(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_RALLY_LAND
function payload_fns.payload_76_cmd190(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GO_AROUND
function payload_fns.payload_76_cmd191(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GO_AROUND_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_REPOSITION
function payload_fns.payload_76_cmd192(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param2, padded(field_offset, 4))
    dissect_flags_MAV_DO_REPOSITION_FLAGS(subtree, "cmd_MAV_CMD_DO_REPOSITION_param2", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_PAUSE_CONTINUE
function payload_fns.payload_76_cmd193(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_REVERSE
function payload_fns.payload_76_cmd194(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_REVERSE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_LOCATION
function payload_fns.payload_76_cmd195(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
function payload_fns.payload_76_cmd196(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_NONE
function payload_fns.payload_76_cmd197(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_NONE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_SYSID
function payload_fns.payload_76_cmd198(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_CONTROL_VIDEO
function payload_fns.payload_76_cmd200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI
function payload_fns.payload_76_cmd201(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_DIGICAM_CONFIGURE
function payload_fns.payload_76_cmd202(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_DIGICAM_CONTROL
function payload_fns.payload_76_cmd203(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOUNT_CONFIGURE
function payload_fns.payload_76_cmd204(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOUNT_CONTROL
function payload_fns.payload_76_cmd205(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_CAM_TRIGG_DIST
function payload_fns.payload_76_cmd206(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FENCE_ENABLE
function payload_fns.payload_76_cmd207(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_FENCE_ENABLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_PARACHUTE
function payload_fns.payload_76_cmd208(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_PARACHUTE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOTOR_TEST
function payload_fns.payload_76_cmd209(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_INVERTED_FLIGHT
function payload_fns.payload_76_cmd210(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GRIPPER
function payload_fns.payload_76_cmd211(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_AUTOTUNE_ENABLE
function payload_fns.payload_76_cmd212(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_SET_YAW_SPEED
function payload_fns.payload_76_cmd213(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL
function payload_fns.payload_76_cmd214(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOUNT_CONTROL_QUAT
function payload_fns.payload_76_cmd220(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GUIDED_MASTER
function payload_fns.payload_76_cmd221(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GUIDED_LIMITS
function payload_fns.payload_76_cmd222(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_ENGINE_CONTROL
function payload_fns.payload_76_cmd223(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_MISSION_CURRENT
function payload_fns.payload_76_cmd224(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_LAST
function payload_fns.payload_76_cmd240(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_CALIBRATION
function payload_fns.payload_76_cmd241(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS
function payload_fns.payload_76_cmd242(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_UAVCAN
function payload_fns.payload_76_cmd243(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_STORAGE
function payload_fns.payload_76_cmd245(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN
function payload_fns.payload_76_cmd246(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_OVERRIDE_GOTO
function payload_fns.payload_76_cmd252(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_OBLIQUE_SURVEY
function payload_fns.payload_76_cmd260(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_MISSION_START
function payload_fns.payload_76_cmd300(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_ACTUATOR_TEST
function payload_fns.payload_76_cmd310(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ACTUATOR_TEST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ACTUATOR_TEST_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ACTUATOR_TEST_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONFIGURE_ACTUATOR
function payload_fns.payload_76_cmd311(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONFIGURE_ACTUATOR_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_COMPONENT_ARM_DISARM
function payload_fns.payload_76_cmd400(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_RUN_PREARM_CHECKS
function payload_fns.payload_76_cmd401(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_ILLUMINATOR_ON_OFF
function payload_fns.payload_76_cmd405(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ILLUMINATOR_ON_OFF_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GET_HOME_POSITION
function payload_fns.payload_76_cmd410(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_INJECT_FAILURE
function payload_fns.payload_76_cmd420(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_INJECT_FAILURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_INJECT_FAILURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_INJECT_FAILURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_START_RX_PAIR
function payload_fns.payload_76_cmd500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GET_MESSAGE_INTERVAL
function payload_fns.payload_76_cmd510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_MESSAGE_INTERVAL
function payload_fns.payload_76_cmd511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_MESSAGE
function payload_fns.payload_76_cmd512(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_PROTOCOL_VERSION
function payload_fns.payload_76_cmd519(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES
function payload_fns.payload_76_cmd520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_CAMERA_INFORMATION
function payload_fns.payload_76_cmd521(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_CAMERA_SETTINGS
function payload_fns.payload_76_cmd522(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_STORAGE_INFORMATION
function payload_fns.payload_76_cmd525(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_STORAGE_FORMAT
function payload_fns.payload_76_cmd526(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS
function payload_fns.payload_76_cmd527(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_FLIGHT_INFORMATION
function payload_fns.payload_76_cmd528(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_RESET_CAMERA_SETTINGS
function payload_fns.payload_76_cmd529(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_CAMERA_MODE
function payload_fns.payload_76_cmd530(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_MODE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_CAMERA_ZOOM
function payload_fns.payload_76_cmd531(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_CAMERA_FOCUS
function payload_fns.payload_76_cmd532(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_STORAGE_USAGE
function payload_fns.payload_76_cmd533(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_STORAGE_USAGE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_STORAGE_USAGE_param2, padded(field_offset, 4))
    dissect_flags_STORAGE_USAGE_FLAG(subtree, "cmd_MAV_CMD_SET_STORAGE_USAGE_param2", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_JUMP_TAG
function payload_fns.payload_76_cmd600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_JUMP_TAG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_JUMP_TAG
function payload_fns.payload_76_cmd601(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW
function payload_fns.payload_76_cmd1000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5, padded(field_offset, 4))
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5", value)
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
function payload_fns.payload_76_cmd1001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_IMAGE_START_CAPTURE
function payload_fns.payload_76_cmd2000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_IMAGE_STOP_CAPTURE
function payload_fns.payload_76_cmd2001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE
function payload_fns.payload_76_cmd2002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_TRIGGER_CONTROL
function payload_fns.payload_76_cmd2003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAMERA_TRACK_POINT
function payload_fns.payload_76_cmd2004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAMERA_TRACK_RECTANGLE
function payload_fns.payload_76_cmd2005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAMERA_STOP_TRACKING
function payload_fns.payload_76_cmd2010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_START_CAPTURE
function payload_fns.payload_76_cmd2500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_STOP_CAPTURE
function payload_fns.payload_76_cmd2501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_START_STREAMING
function payload_fns.payload_76_cmd2502(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_STREAMING_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_STOP_STREAMING
function payload_fns.payload_76_cmd2503(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION
function payload_fns.payload_76_cmd2504(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_VIDEO_STREAM_STATUS
function payload_fns.payload_76_cmd2505(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_LOGGING_START
function payload_fns.payload_76_cmd2510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_LOGGING_START_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_LOGGING_STOP
function payload_fns.payload_76_cmd2511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_AIRFRAME_CONFIGURATION
function payload_fns.payload_76_cmd2520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONTROL_HIGH_LATENCY
function payload_fns.payload_76_cmd2600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PANORAMA_CREATE
function payload_fns.payload_76_cmd2800(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_VTOL_TRANSITION
function payload_fns.payload_76_cmd3000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_ARM_AUTHORIZATION_REQUEST
function payload_fns.payload_76_cmd3001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_GUIDED_SUBMODE_STANDARD
function payload_fns.payload_76_cmd4000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE
function payload_fns.payload_76_cmd4001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_GATE
function payload_fns.payload_76_cmd4501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CONDITION_GATE_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_RETURN_POINT
function payload_fns.payload_76_cmd5000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION
function payload_fns.payload_76_cmd5001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION
function payload_fns.payload_76_cmd5002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION
function payload_fns.payload_76_cmd5003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION
function payload_fns.payload_76_cmd5004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_RALLY_POINT
function payload_fns.payload_76_cmd5100(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_UAVCAN_GET_NODE_INFO
function payload_fns.payload_76_cmd5200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_ADSB_OUT_IDENT
function payload_fns.payload_76_cmd10001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PAYLOAD_PREPARE_DEPLOY
function payload_fns.payload_76_cmd30001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PAYLOAD_CONTROL_DEPLOY
function payload_fns.payload_76_cmd30002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_1
function payload_fns.payload_76_cmd31000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_2
function payload_fns.payload_76_cmd31001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_3
function payload_fns.payload_76_cmd31002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_4
function payload_fns.payload_76_cmd31003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_5
function payload_fns.payload_76_cmd31004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_1
function payload_fns.payload_76_cmd31005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_2
function payload_fns.payload_76_cmd31006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_3
function payload_fns.payload_76_cmd31007(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_4
function payload_fns.payload_76_cmd31008(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_5
function payload_fns.payload_76_cmd31009(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_1
function payload_fns.payload_76_cmd31010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_2
function payload_fns.payload_76_cmd31011(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_3
function payload_fns.payload_76_cmd31012(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_4
function payload_fns.payload_76_cmd31013(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_5
function payload_fns.payload_76_cmd31014(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAN_FORWARD
function payload_fns.payload_76_cmd32000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_CAN_FORWARD_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_FIXED_MAG_CAL_YAW
function payload_fns.payload_76_cmd42006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_WINCH
function payload_fns.payload_76_cmd42600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_ENUM_END
function payload_fns.payload_76_cmd42601(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_LONG
function payload_fns.payload_76(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    local cmd_id = padded(offset + 28, 2):le_uint()
    local cmd_name = enumEntryName.MAV_CMD[cmd_id]
    if cmd_name ~= nil then
        pinfo.cols.info:append(": " .. cmd_name)
    end
    local cmd_fn = payload_fns["payload_76_cmd" .. tostring(cmd_id)]
    if cmd_fn ~= nil then
        cmd_fn(buffer, tree, msgid, offset, limit, pinfo)
        return
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.COMMAND_LONG_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.COMMAND_LONG_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.COMMAND_LONG_command, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.COMMAND_LONG_confirmation, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_LONG_param1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_LONG_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_LONG_param3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMMAND_LONG_param4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COMMAND_LONG_param5, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.COMMAND_LONG_param6, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.COMMAND_LONG_param7, padded(field_offset, 4))
end
-- dissect payload of message type COMMAND_ACK
function payload_fns.payload_77(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 10 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 10)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    local cmd_id = padded(offset + 0, 2):le_uint()
    local cmd_name = enumEntryName.MAV_CMD[cmd_id]
    if cmd_name ~= nil then
        pinfo.cols.info:append(": " .. cmd_name)
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_ACK_command, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.COMMAND_ACK_result, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.COMMAND_ACK_progress, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMMAND_ACK_result_param2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMMAND_ACK_target_system, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.COMMAND_ACK_target_component, padded(field_offset, 1))
end
-- dissect payload of message type COMMAND_CANCEL
function payload_fns.payload_80(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    local cmd_id = padded(offset + 0, 2):le_uint()
    local cmd_name = enumEntryName.MAV_CMD[cmd_id]
    if cmd_name ~= nil then
        pinfo.cols.info:append(": " .. cmd_name)
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.COMMAND_CANCEL_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.COMMAND_CANCEL_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMMAND_CANCEL_command, padded(field_offset, 2))
end
-- dissect payload of message type MANUAL_SETPOINT
function payload_fns.payload_81(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MANUAL_SETPOINT_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MANUAL_SETPOINT_roll, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.MANUAL_SETPOINT_pitch, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.MANUAL_SETPOINT_yaw, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.MANUAL_SETPOINT_thrust, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.MANUAL_SETPOINT_mode_switch, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.MANUAL_SETPOINT_manual_override_switch, padded(field_offset, 1))
end
-- dissect payload of message type SET_ATTITUDE_TARGET
function payload_fns.payload_82(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 51 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 51)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_target_system, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_target_component, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_type_mask, padded(field_offset, 1))
    dissect_flags_ATTITUDE_TARGET_TYPEMASK(subtree, "SET_ATTITUDE_TARGET_type_mask", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_q_0, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_q_1, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_q_2, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_q_3, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_body_roll_rate, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_body_pitch_rate, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_body_yaw_rate, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_thrust, padded(field_offset, 4))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_thrust_body_0, padded(field_offset, 4))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_thrust_body_1, padded(field_offset, 4))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.SET_ATTITUDE_TARGET_thrust_body_2, padded(field_offset, 4))
end
-- dissect payload of message type ATTITUDE_TARGET
function payload_fns.payload_83(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_type_mask, padded(field_offset, 1))
    dissect_flags_ATTITUDE_TARGET_TYPEMASK(subtree, "ATTITUDE_TARGET_type_mask", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_q_0, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_q_1, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_q_2, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_q_3, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_body_roll_rate, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_body_pitch_rate, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_body_yaw_rate, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ATTITUDE_TARGET_thrust, padded(field_offset, 4))
end
-- dissect payload of message type SET_POSITION_TARGET_LOCAL_NED
function payload_fns.payload_84(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_target_system, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_target_component, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_coordinate_frame, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_type_mask, padded(field_offset, 2))
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "SET_POSITION_TARGET_LOCAL_NED_type_mask", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_x, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_y, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_z, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_vx, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_vy, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_vz, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_afx, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_afy, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_afz, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_yaw, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_yaw_rate, padded(field_offset, 4))
end
-- dissect payload of message type POSITION_TARGET_LOCAL_NED
function payload_fns.payload_85(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 51 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 51)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_coordinate_frame, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_type_mask, padded(field_offset, 2))
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "POSITION_TARGET_LOCAL_NED_type_mask", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_x, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_y, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_z, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_vx, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_vy, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_vz, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_afx, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_afy, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_afz, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_yaw, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.POSITION_TARGET_LOCAL_NED_yaw_rate, padded(field_offset, 4))
end
-- dissect payload of message type SET_POSITION_TARGET_GLOBAL_INT
function payload_fns.payload_86(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_target_system, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_target_component, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_coordinate_frame, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_type_mask, padded(field_offset, 2))
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "SET_POSITION_TARGET_GLOBAL_INT_type_mask", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_lat_int, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_lon_int, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_alt, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_vx, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_vy, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_vz, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_afx, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_afy, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_afz, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_yaw, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_yaw_rate, padded(field_offset, 4))
end
-- dissect payload of message type POSITION_TARGET_GLOBAL_INT
function payload_fns.payload_87(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 51 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 51)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_coordinate_frame, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_type_mask, padded(field_offset, 2))
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "POSITION_TARGET_GLOBAL_INT_type_mask", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_lat_int, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_lon_int, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_alt, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_vx, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_vy, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_vz, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_afx, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_afy, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_afz, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_yaw, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_yaw_rate, padded(field_offset, 4))
end
-- dissect payload of message type LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
function payload_fns.payload_89(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_x, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_y, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_z, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_roll, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_pitch, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_yaw, padded(field_offset, 4))
end
-- dissect payload of message type HIL_STATE
function payload_fns.payload_90(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 56 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 56)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_STATE_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_STATE_roll, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIL_STATE_pitch, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_STATE_yaw, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_STATE_rollspeed, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_STATE_pitchspeed, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_STATE_yawspeed, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_STATE_lat, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIL_STATE_lon, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIL_STATE_alt, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.HIL_STATE_vx, padded(field_offset, 2))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.HIL_STATE_vy, padded(field_offset, 2))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.HIL_STATE_vz, padded(field_offset, 2))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.HIL_STATE_xacc, padded(field_offset, 2))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.HIL_STATE_yacc, padded(field_offset, 2))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.HIL_STATE_zacc, padded(field_offset, 2))
end
-- dissect payload of message type HIL_CONTROLS
function payload_fns.payload_91(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_CONTROLS_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_CONTROLS_roll_ailerons, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIL_CONTROLS_pitch_elevator, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_CONTROLS_yaw_rudder, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_CONTROLS_throttle, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_CONTROLS_aux1, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_CONTROLS_aux2, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_CONTROLS_aux3, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIL_CONTROLS_aux4, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIL_CONTROLS_mode, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.HIL_CONTROLS_nav_mode, padded(field_offset, 1))
end
-- dissect payload of message type HIL_RC_INPUTS_RAW
function payload_fns.payload_92(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan1_raw, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan2_raw, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan3_raw, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan4_raw, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan5_raw, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan6_raw, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan7_raw, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan8_raw, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan9_raw, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan10_raw, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan11_raw, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_chan12_raw, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_RC_INPUTS_RAW_rssi, padded(field_offset, 1))
end
-- dissect payload of message type HIL_ACTUATOR_CONTROLS
function payload_fns.payload_93(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 81 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 81)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_time_usec, padded(field_offset, 8))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_0, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_1, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_2, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_3, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_4, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_5, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_6, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_7, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_8, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_9, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_10, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_11, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_12, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_13, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_14, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_15, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_mode, padded(field_offset, 1))
    dissect_flags_MAV_MODE_FLAG(subtree, "HIL_ACTUATOR_CONTROLS_mode", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_ACTUATOR_CONTROLS_flags, padded(field_offset, 8))
end
-- dissect payload of message type OPTICAL_FLOW
function payload_fns.payload_100(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 34 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 34)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPTICAL_FLOW_time_usec, padded(field_offset, 8))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OPTICAL_FLOW_sensor_id, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPTICAL_FLOW_flow_x, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.OPTICAL_FLOW_flow_y, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPTICAL_FLOW_flow_comp_m_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPTICAL_FLOW_flow_comp_m_y, padded(field_offset, 4))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.OPTICAL_FLOW_quality, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPTICAL_FLOW_ground_distance, padded(field_offset, 4))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.OPTICAL_FLOW_flow_rate_x, padded(field_offset, 4))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.OPTICAL_FLOW_flow_rate_y, padded(field_offset, 4))
end
-- dissect payload of message type GLOBAL_VISION_POSITION_ESTIMATE
function payload_fns.payload_101(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 117 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 117)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_roll, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_pitch, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_yaw, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_0, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_1, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_2, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_3, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_4, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_5, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_6, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_7, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_8, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_9, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_10, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_11, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_12, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_13, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_14, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_15, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_16, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_17, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_18, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_19, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_20, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_reset_counter, padded(field_offset, 1))
end
-- dissect payload of message type VISION_POSITION_ESTIMATE
function payload_fns.payload_102(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 117 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 117)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_roll, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_pitch, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_yaw, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_0, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_1, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_2, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_3, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_4, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_5, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_6, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_7, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_8, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_9, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_10, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_11, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_12, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_13, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_14, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_15, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_16, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_17, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_18, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_19, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_20, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.VISION_POSITION_ESTIMATE_reset_counter, padded(field_offset, 1))
end
-- dissect payload of message type VISION_SPEED_ESTIMATE
function payload_fns.payload_103(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 57 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 57)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_0, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_1, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_2, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_3, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_4, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_5, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_6, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_7, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_8, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.VISION_SPEED_ESTIMATE_reset_counter, padded(field_offset, 1))
end
-- dissect payload of message type VICON_POSITION_ESTIMATE
function payload_fns.payload_104(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 116 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 116)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_roll, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_pitch, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_yaw, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_0, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_1, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_2, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_3, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_4, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_5, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_6, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_7, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_8, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_9, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_10, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_11, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_12, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_13, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_14, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_15, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_16, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_17, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_18, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_19, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_20, padded(field_offset, 4))
end
-- dissect payload of message type HIGHRES_IMU
function payload_fns.payload_105(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 63 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 63)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIGHRES_IMU_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIGHRES_IMU_xacc, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIGHRES_IMU_yacc, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIGHRES_IMU_zacc, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIGHRES_IMU_xgyro, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIGHRES_IMU_ygyro, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIGHRES_IMU_zgyro, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIGHRES_IMU_xmag, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIGHRES_IMU_ymag, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIGHRES_IMU_zmag, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.HIGHRES_IMU_abs_pressure, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.HIGHRES_IMU_diff_pressure, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.HIGHRES_IMU_pressure_alt, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.HIGHRES_IMU_temperature, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.HIGHRES_IMU_fields_updated, padded(field_offset, 2))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.HIGHRES_IMU_id, padded(field_offset, 1))
end
-- dissect payload of message type OPTICAL_FLOW_RAD
function payload_fns.payload_106(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_time_usec, padded(field_offset, 8))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_sensor_id, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_integration_time_us, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_xgyro, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_ygyro, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_zgyro, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_temperature, padded(field_offset, 2))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_quality, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_time_delta_distance_us, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.OPTICAL_FLOW_RAD_distance, padded(field_offset, 4))
end
-- dissect payload of message type HIL_SENSOR
function payload_fns.payload_107(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 65 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 65)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_SENSOR_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_SENSOR_xacc, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIL_SENSOR_yacc, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_SENSOR_zacc, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_SENSOR_xgyro, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_SENSOR_ygyro, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_SENSOR_zgyro, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_SENSOR_xmag, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIL_SENSOR_ymag, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIL_SENSOR_zmag, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.HIL_SENSOR_abs_pressure, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.HIL_SENSOR_diff_pressure, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.HIL_SENSOR_pressure_alt, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.HIL_SENSOR_temperature, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.HIL_SENSOR_fields_updated, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.HIL_SENSOR_id, padded(field_offset, 1))
end
-- dissect payload of message type SIM_STATE
function payload_fns.payload_108(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 92 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 92)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SIM_STATE_q1, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SIM_STATE_q2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SIM_STATE_q3, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SIM_STATE_q4, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SIM_STATE_roll, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SIM_STATE_pitch, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SIM_STATE_yaw, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SIM_STATE_xacc, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SIM_STATE_yacc, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SIM_STATE_zacc, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.SIM_STATE_xgyro, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.SIM_STATE_ygyro, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.SIM_STATE_zgyro, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.SIM_STATE_lat, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.SIM_STATE_lon, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.SIM_STATE_alt, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.SIM_STATE_std_dev_horz, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.SIM_STATE_std_dev_vert, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.SIM_STATE_vn, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.SIM_STATE_ve, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.SIM_STATE_vd, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.SIM_STATE_lat_int, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.SIM_STATE_lon_int, padded(field_offset, 4))
end
-- dissect payload of message type RADIO_STATUS
function payload_fns.payload_109(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RADIO_STATUS_rssi, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.RADIO_STATUS_remrssi, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.RADIO_STATUS_txbuf, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.RADIO_STATUS_noise, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RADIO_STATUS_remnoise, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RADIO_STATUS_rxerrors, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.RADIO_STATUS_fixed, padded(field_offset, 2))
end
-- dissect payload of message type FILE_TRANSFER_PROTOCOL
function payload_fns.payload_110(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 254 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 254)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_target_network, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_target_system, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_target_component, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_0, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_1, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_2, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_3, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_4, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_5, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_6, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_7, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_8, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_9, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_10, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_11, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_12, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_13, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_14, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_15, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_16, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_17, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_18, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_19, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_20, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_21, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_22, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_23, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_24, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_25, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_26, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_27, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_28, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_29, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_30, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_31, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_32, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_33, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_34, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_35, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_36, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_37, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_38, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_39, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_40, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_41, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_42, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_43, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_44, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_45, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_46, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_47, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_48, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_49, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_50, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_51, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_52, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_53, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_54, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_55, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_56, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_57, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_58, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_59, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_60, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_61, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_62, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_63, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_64, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_65, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_66, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_67, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_68, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_69, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_70, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_71, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_72, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_73, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_74, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_75, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_76, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_77, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_78, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_79, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_80, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_81, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_82, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_83, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_84, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_85, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_86, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_87, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_88, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_89, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_90, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_91, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_92, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_93, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_94, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_95, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_96, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_97, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_98, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_99, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_100, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_101, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_102, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_103, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_104, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_105, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_106, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_107, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_108, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_109, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_110, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_111, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_112, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_113, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_114, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_115, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_116, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_117, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_118, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_119, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_120, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_121, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_122, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_123, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_124, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_125, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_126, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_127, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_128, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_129, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_130, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_131, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_132, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_133, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_134, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_135, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_136, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_137, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_138, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_139, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_140, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_141, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_142, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_143, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_144, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_145, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_146, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_147, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_148, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_149, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_150, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_151, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_152, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_153, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_154, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_155, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_156, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_157, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_158, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_159, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_160, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_161, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_162, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_163, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_164, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_165, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_166, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_167, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_168, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_169, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_170, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_171, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_172, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_173, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_174, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_175, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_176, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_177, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_178, padded(field_offset, 1))
    field_offset = offset + 182
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_179, padded(field_offset, 1))
    field_offset = offset + 183
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_180, padded(field_offset, 1))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_181, padded(field_offset, 1))
    field_offset = offset + 185
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_182, padded(field_offset, 1))
    field_offset = offset + 186
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_183, padded(field_offset, 1))
    field_offset = offset + 187
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_184, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_185, padded(field_offset, 1))
    field_offset = offset + 189
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_186, padded(field_offset, 1))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_187, padded(field_offset, 1))
    field_offset = offset + 191
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_188, padded(field_offset, 1))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_189, padded(field_offset, 1))
    field_offset = offset + 193
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_190, padded(field_offset, 1))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_191, padded(field_offset, 1))
    field_offset = offset + 195
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_192, padded(field_offset, 1))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_193, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_194, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_195, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_196, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_197, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_198, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_199, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_200, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_201, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_202, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_203, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_204, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_205, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_206, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_207, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_208, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_209, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_210, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_211, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_212, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_213, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_214, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_215, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_216, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_217, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_218, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_219, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_220, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_221, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_222, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_223, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_224, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_225, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_226, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_227, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_228, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_229, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_230, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_231, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_232, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_233, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_234, padded(field_offset, 1))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_235, padded(field_offset, 1))
    field_offset = offset + 239
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_236, padded(field_offset, 1))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_237, padded(field_offset, 1))
    field_offset = offset + 241
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_238, padded(field_offset, 1))
    field_offset = offset + 242
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_239, padded(field_offset, 1))
    field_offset = offset + 243
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_240, padded(field_offset, 1))
    field_offset = offset + 244
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_241, padded(field_offset, 1))
    field_offset = offset + 245
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_242, padded(field_offset, 1))
    field_offset = offset + 246
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_243, padded(field_offset, 1))
    field_offset = offset + 247
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_244, padded(field_offset, 1))
    field_offset = offset + 248
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_245, padded(field_offset, 1))
    field_offset = offset + 249
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_246, padded(field_offset, 1))
    field_offset = offset + 250
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_247, padded(field_offset, 1))
    field_offset = offset + 251
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_248, padded(field_offset, 1))
    field_offset = offset + 252
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_249, padded(field_offset, 1))
    field_offset = offset + 253
    subtree, value = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_250, padded(field_offset, 1))
end
-- dissect payload of message type TIMESYNC
function payload_fns.payload_111(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TIMESYNC_tc1, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TIMESYNC_ts1, padded(field_offset, 8))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TIMESYNC_target_system, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.TIMESYNC_target_component, padded(field_offset, 1))
end
-- dissect payload of message type CAMERA_TRIGGER
function payload_fns.payload_112(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_TRIGGER_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAMERA_TRIGGER_seq, padded(field_offset, 4))
end
-- dissect payload of message type HIL_GPS
function payload_fns.payload_113(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 39 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 39)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_GPS_time_usec, padded(field_offset, 8))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.HIL_GPS_fix_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_GPS_lat, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIL_GPS_lon, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_GPS_alt, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_GPS_eph, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.HIL_GPS_epv, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_GPS_vel, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.HIL_GPS_vn, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_GPS_ve, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.HIL_GPS_vd, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_GPS_cog, padded(field_offset, 2))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.HIL_GPS_satellites_visible, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIL_GPS_id, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.HIL_GPS_yaw, padded(field_offset, 2))
end
-- dissect payload of message type HIL_OPTICAL_FLOW
function payload_fns.payload_114(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_time_usec, padded(field_offset, 8))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_sensor_id, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_integration_time_us, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_xgyro, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_ygyro, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_zgyro, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_temperature, padded(field_offset, 2))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_quality, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_time_delta_distance_us, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIL_OPTICAL_FLOW_distance, padded(field_offset, 4))
end
-- dissect payload of message type HIL_STATE_QUATERNION
function payload_fns.payload_115(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 64 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 64)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_rollspeed, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_pitchspeed, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_yawspeed, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_lat, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_lon, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_alt, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_vx, padded(field_offset, 2))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_vy, padded(field_offset, 2))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_vz, padded(field_offset, 2))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_ind_airspeed, padded(field_offset, 2))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_true_airspeed, padded(field_offset, 2))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_xacc, padded(field_offset, 2))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_yacc, padded(field_offset, 2))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.HIL_STATE_QUATERNION_zacc, padded(field_offset, 2))
end
-- dissect payload of message type SCALED_IMU2
function payload_fns.payload_116(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SCALED_IMU2_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SCALED_IMU2_xacc, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.SCALED_IMU2_yacc, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SCALED_IMU2_zacc, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.SCALED_IMU2_xgyro, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SCALED_IMU2_ygyro, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SCALED_IMU2_zgyro, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SCALED_IMU2_xmag, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SCALED_IMU2_ymag, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SCALED_IMU2_zmag, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.SCALED_IMU2_temperature, padded(field_offset, 2))
end
-- dissect payload of message type LOG_REQUEST_LIST
function payload_fns.payload_117(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOG_REQUEST_LIST_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.LOG_REQUEST_LIST_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOG_REQUEST_LIST_start, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.LOG_REQUEST_LIST_end, padded(field_offset, 2))
end
-- dissect payload of message type LOG_ENTRY
function payload_fns.payload_118(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 14 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 14)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOG_ENTRY_id, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.LOG_ENTRY_num_logs, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LOG_ENTRY_last_log_num, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOG_ENTRY_time_utc, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOG_ENTRY_size, padded(field_offset, 4))
end
-- dissect payload of message type LOG_REQUEST_DATA
function payload_fns.payload_119(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 10
    subtree, value = tree:add_le(f.LOG_REQUEST_DATA_target_system, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.LOG_REQUEST_DATA_target_component, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOG_REQUEST_DATA_id, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOG_REQUEST_DATA_ofs, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOG_REQUEST_DATA_count, padded(field_offset, 4))
end
-- dissect payload of message type LOG_DATA
function payload_fns.payload_120(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 97 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 97)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOG_DATA_id, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOG_DATA_ofs, padded(field_offset, 4))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.LOG_DATA_count, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.LOG_DATA_data_0, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOG_DATA_data_1, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.LOG_DATA_data_2, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.LOG_DATA_data_3, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.LOG_DATA_data_4, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LOG_DATA_data_5, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.LOG_DATA_data_6, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.LOG_DATA_data_7, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.LOG_DATA_data_8, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LOG_DATA_data_9, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.LOG_DATA_data_10, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.LOG_DATA_data_11, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.LOG_DATA_data_12, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LOG_DATA_data_13, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.LOG_DATA_data_14, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.LOG_DATA_data_15, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.LOG_DATA_data_16, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LOG_DATA_data_17, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.LOG_DATA_data_18, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.LOG_DATA_data_19, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.LOG_DATA_data_20, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.LOG_DATA_data_21, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.LOG_DATA_data_22, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.LOG_DATA_data_23, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.LOG_DATA_data_24, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.LOG_DATA_data_25, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.LOG_DATA_data_26, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.LOG_DATA_data_27, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.LOG_DATA_data_28, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.LOG_DATA_data_29, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.LOG_DATA_data_30, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.LOG_DATA_data_31, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.LOG_DATA_data_32, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.LOG_DATA_data_33, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.LOG_DATA_data_34, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.LOG_DATA_data_35, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.LOG_DATA_data_36, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.LOG_DATA_data_37, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.LOG_DATA_data_38, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.LOG_DATA_data_39, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.LOG_DATA_data_40, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.LOG_DATA_data_41, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.LOG_DATA_data_42, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.LOG_DATA_data_43, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.LOG_DATA_data_44, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.LOG_DATA_data_45, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.LOG_DATA_data_46, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.LOG_DATA_data_47, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.LOG_DATA_data_48, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.LOG_DATA_data_49, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.LOG_DATA_data_50, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.LOG_DATA_data_51, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.LOG_DATA_data_52, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.LOG_DATA_data_53, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.LOG_DATA_data_54, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.LOG_DATA_data_55, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.LOG_DATA_data_56, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.LOG_DATA_data_57, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.LOG_DATA_data_58, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.LOG_DATA_data_59, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.LOG_DATA_data_60, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.LOG_DATA_data_61, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.LOG_DATA_data_62, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.LOG_DATA_data_63, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.LOG_DATA_data_64, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.LOG_DATA_data_65, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.LOG_DATA_data_66, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.LOG_DATA_data_67, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.LOG_DATA_data_68, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.LOG_DATA_data_69, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.LOG_DATA_data_70, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.LOG_DATA_data_71, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.LOG_DATA_data_72, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.LOG_DATA_data_73, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.LOG_DATA_data_74, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.LOG_DATA_data_75, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.LOG_DATA_data_76, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.LOG_DATA_data_77, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.LOG_DATA_data_78, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.LOG_DATA_data_79, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.LOG_DATA_data_80, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.LOG_DATA_data_81, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.LOG_DATA_data_82, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.LOG_DATA_data_83, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.LOG_DATA_data_84, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.LOG_DATA_data_85, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.LOG_DATA_data_86, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.LOG_DATA_data_87, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.LOG_DATA_data_88, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.LOG_DATA_data_89, padded(field_offset, 1))
end
-- dissect payload of message type LOG_ERASE
function payload_fns.payload_121(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOG_ERASE_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.LOG_ERASE_target_component, padded(field_offset, 1))
end
-- dissect payload of message type LOG_REQUEST_END
function payload_fns.payload_122(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOG_REQUEST_END_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.LOG_REQUEST_END_target_component, padded(field_offset, 1))
end
-- dissect payload of message type GPS_INJECT_DATA
function payload_fns.payload_123(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 113 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 113)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_len, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_0, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_1, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_2, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_3, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_4, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_5, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_6, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_7, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_8, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_9, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_10, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_11, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_12, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_13, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_14, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_15, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_16, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_17, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_18, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_19, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_20, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_21, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_22, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_23, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_24, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_25, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_26, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_27, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_28, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_29, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_30, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_31, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_32, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_33, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_34, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_35, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_36, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_37, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_38, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_39, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_40, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_41, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_42, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_43, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_44, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_45, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_46, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_47, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_48, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_49, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_50, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_51, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_52, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_53, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_54, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_55, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_56, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_57, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_58, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_59, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_60, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_61, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_62, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_63, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_64, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_65, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_66, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_67, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_68, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_69, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_70, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_71, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_72, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_73, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_74, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_75, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_76, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_77, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_78, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_79, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_80, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_81, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_82, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_83, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_84, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_85, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_86, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_87, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_88, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_89, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_90, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_91, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_92, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_93, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_94, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_95, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_96, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_97, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_98, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_99, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_100, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_101, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_102, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_103, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_104, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_105, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_106, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_107, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_108, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.GPS_INJECT_DATA_data_109, padded(field_offset, 1))
end
-- dissect payload of message type GPS2_RAW
function payload_fns.payload_124(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 57 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 57)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS2_RAW_time_usec, padded(field_offset, 8))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GPS2_RAW_fix_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS2_RAW_lat, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS2_RAW_lon, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS2_RAW_alt, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS2_RAW_eph, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.GPS2_RAW_epv, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS2_RAW_vel, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GPS2_RAW_cog, padded(field_offset, 2))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.GPS2_RAW_satellites_visible, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GPS2_RAW_dgps_numch, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS2_RAW_dgps_age, padded(field_offset, 4))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.GPS2_RAW_yaw, padded(field_offset, 2))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.GPS2_RAW_alt_ellipsoid, padded(field_offset, 4))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.GPS2_RAW_h_acc, padded(field_offset, 4))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.GPS2_RAW_v_acc, padded(field_offset, 4))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.GPS2_RAW_vel_acc, padded(field_offset, 4))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.GPS2_RAW_hdg_acc, padded(field_offset, 4))
end
-- dissect payload of message type POWER_STATUS
function payload_fns.payload_125(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.POWER_STATUS_Vcc, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.POWER_STATUS_Vservo, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.POWER_STATUS_flags, padded(field_offset, 2))
    dissect_flags_MAV_POWER_STATUS(subtree, "POWER_STATUS_flags", value)
end
-- dissect payload of message type SERIAL_CONTROL
function payload_fns.payload_126(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 81 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 81)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 6
    subtree, value = tree:add_le(f.SERIAL_CONTROL_device, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.SERIAL_CONTROL_flags, padded(field_offset, 1))
    dissect_flags_SERIAL_CONTROL_FLAG(subtree, "SERIAL_CONTROL_flags", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SERIAL_CONTROL_timeout, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SERIAL_CONTROL_baudrate, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SERIAL_CONTROL_count, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_0, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_1, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_2, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_3, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_4, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_5, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_6, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_7, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_8, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_9, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_10, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_11, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_12, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_13, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_14, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_15, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_16, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_17, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_18, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_19, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_20, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_21, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_22, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_23, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_24, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_25, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_26, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_27, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_28, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_29, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_30, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_31, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_32, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_33, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_34, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_35, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_36, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_37, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_38, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_39, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_40, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_41, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_42, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_43, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_44, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_45, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_46, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_47, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_48, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_49, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_50, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_51, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_52, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_53, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_54, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_55, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_56, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_57, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_58, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_59, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_60, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_61, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_62, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_63, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_64, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_65, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_66, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_67, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_68, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.SERIAL_CONTROL_data_69, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.SERIAL_CONTROL_target_system, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.SERIAL_CONTROL_target_component, padded(field_offset, 1))
end
-- dissect payload of message type GPS_RTK
function payload_fns.payload_127(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS_RTK_time_last_baseline_ms, padded(field_offset, 4))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GPS_RTK_rtk_receiver_id, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS_RTK_wn, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GPS_RTK_tow, padded(field_offset, 4))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.GPS_RTK_rtk_health, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GPS_RTK_rtk_rate, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.GPS_RTK_nsats, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GPS_RTK_baseline_coords_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS_RTK_baseline_a_mm, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS_RTK_baseline_b_mm, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS_RTK_baseline_c_mm, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS_RTK_accuracy, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS_RTK_iar_num_hypotheses, padded(field_offset, 4))
end
-- dissect payload of message type GPS2_RTK
function payload_fns.payload_128(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS2_RTK_time_last_baseline_ms, padded(field_offset, 4))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GPS2_RTK_rtk_receiver_id, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS2_RTK_wn, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GPS2_RTK_tow, padded(field_offset, 4))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.GPS2_RTK_rtk_health, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GPS2_RTK_rtk_rate, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.GPS2_RTK_nsats, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GPS2_RTK_baseline_coords_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS2_RTK_baseline_a_mm, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS2_RTK_baseline_b_mm, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS2_RTK_baseline_c_mm, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS2_RTK_accuracy, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS2_RTK_iar_num_hypotheses, padded(field_offset, 4))
end
-- dissect payload of message type SCALED_IMU3
function payload_fns.payload_129(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SCALED_IMU3_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SCALED_IMU3_xacc, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.SCALED_IMU3_yacc, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SCALED_IMU3_zacc, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.SCALED_IMU3_xgyro, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SCALED_IMU3_ygyro, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SCALED_IMU3_zgyro, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SCALED_IMU3_xmag, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SCALED_IMU3_ymag, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SCALED_IMU3_zmag, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.SCALED_IMU3_temperature, padded(field_offset, 2))
end
-- dissect payload of message type DATA_TRANSMISSION_HANDSHAKE
function payload_fns.payload_130(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 13 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 13)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 10
    subtree, value = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_type, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_size, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_width, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_height, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_packets, padded(field_offset, 2))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_payload, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_jpg_quality, padded(field_offset, 1))
end
-- dissect payload of message type ENCAPSULATED_DATA
function payload_fns.payload_131(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_seqnr, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_0, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_1, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_2, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_3, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_4, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_5, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_6, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_7, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_8, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_9, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_10, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_11, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_12, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_13, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_14, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_15, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_16, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_17, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_18, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_19, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_20, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_21, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_22, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_23, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_24, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_25, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_26, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_27, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_28, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_29, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_30, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_31, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_32, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_33, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_34, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_35, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_36, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_37, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_38, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_39, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_40, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_41, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_42, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_43, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_44, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_45, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_46, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_47, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_48, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_49, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_50, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_51, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_52, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_53, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_54, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_55, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_56, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_57, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_58, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_59, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_60, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_61, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_62, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_63, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_64, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_65, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_66, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_67, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_68, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_69, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_70, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_71, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_72, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_73, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_74, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_75, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_76, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_77, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_78, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_79, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_80, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_81, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_82, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_83, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_84, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_85, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_86, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_87, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_88, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_89, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_90, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_91, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_92, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_93, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_94, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_95, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_96, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_97, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_98, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_99, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_100, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_101, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_102, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_103, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_104, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_105, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_106, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_107, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_108, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_109, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_110, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_111, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_112, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_113, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_114, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_115, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_116, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_117, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_118, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_119, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_120, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_121, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_122, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_123, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_124, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_125, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_126, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_127, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_128, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_129, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_130, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_131, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_132, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_133, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_134, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_135, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_136, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_137, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_138, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_139, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_140, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_141, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_142, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_143, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_144, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_145, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_146, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_147, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_148, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_149, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_150, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_151, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_152, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_153, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_154, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_155, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_156, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_157, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_158, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_159, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_160, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_161, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_162, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_163, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_164, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_165, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_166, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_167, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_168, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_169, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_170, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_171, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_172, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_173, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_174, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_175, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_176, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_177, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_178, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_179, padded(field_offset, 1))
    field_offset = offset + 182
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_180, padded(field_offset, 1))
    field_offset = offset + 183
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_181, padded(field_offset, 1))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_182, padded(field_offset, 1))
    field_offset = offset + 185
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_183, padded(field_offset, 1))
    field_offset = offset + 186
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_184, padded(field_offset, 1))
    field_offset = offset + 187
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_185, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_186, padded(field_offset, 1))
    field_offset = offset + 189
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_187, padded(field_offset, 1))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_188, padded(field_offset, 1))
    field_offset = offset + 191
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_189, padded(field_offset, 1))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_190, padded(field_offset, 1))
    field_offset = offset + 193
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_191, padded(field_offset, 1))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_192, padded(field_offset, 1))
    field_offset = offset + 195
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_193, padded(field_offset, 1))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_194, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_195, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_196, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_197, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_198, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_199, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_200, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_201, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_202, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_203, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_204, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_205, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_206, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_207, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_208, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_209, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_210, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_211, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_212, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_213, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_214, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_215, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_216, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_217, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_218, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_219, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_220, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_221, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_222, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_223, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_224, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_225, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_226, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_227, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_228, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_229, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_230, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_231, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_232, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_233, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_234, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_235, padded(field_offset, 1))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_236, padded(field_offset, 1))
    field_offset = offset + 239
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_237, padded(field_offset, 1))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_238, padded(field_offset, 1))
    field_offset = offset + 241
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_239, padded(field_offset, 1))
    field_offset = offset + 242
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_240, padded(field_offset, 1))
    field_offset = offset + 243
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_241, padded(field_offset, 1))
    field_offset = offset + 244
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_242, padded(field_offset, 1))
    field_offset = offset + 245
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_243, padded(field_offset, 1))
    field_offset = offset + 246
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_244, padded(field_offset, 1))
    field_offset = offset + 247
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_245, padded(field_offset, 1))
    field_offset = offset + 248
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_246, padded(field_offset, 1))
    field_offset = offset + 249
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_247, padded(field_offset, 1))
    field_offset = offset + 250
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_248, padded(field_offset, 1))
    field_offset = offset + 251
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_249, padded(field_offset, 1))
    field_offset = offset + 252
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_250, padded(field_offset, 1))
    field_offset = offset + 253
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_251, padded(field_offset, 1))
    field_offset = offset + 254
    subtree, value = tree:add_le(f.ENCAPSULATED_DATA_data_252, padded(field_offset, 1))
end
-- dissect payload of message type DISTANCE_SENSOR
function payload_fns.payload_132(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 39 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 39)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_min_distance, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_max_distance, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_current_distance, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_type, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_id, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_orientation, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_covariance, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_horizontal_fov, padded(field_offset, 4))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_vertical_fov, padded(field_offset, 4))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_quaternion_0, padded(field_offset, 4))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_quaternion_1, padded(field_offset, 4))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_quaternion_2, padded(field_offset, 4))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_quaternion_3, padded(field_offset, 4))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.DISTANCE_SENSOR_signal_quality, padded(field_offset, 1))
end
-- dissect payload of message type TERRAIN_REQUEST
function payload_fns.payload_133(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TERRAIN_REQUEST_lat, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.TERRAIN_REQUEST_lon, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TERRAIN_REQUEST_grid_spacing, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TERRAIN_REQUEST_mask, padded(field_offset, 8))
end
-- dissect payload of message type TERRAIN_DATA
function payload_fns.payload_134(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 43 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 43)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TERRAIN_DATA_lat, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.TERRAIN_DATA_lon, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TERRAIN_DATA_grid_spacing, padded(field_offset, 2))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.TERRAIN_DATA_gridbit, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_0, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_1, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_2, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_3, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_4, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_5, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_6, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_7, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_8, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_9, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_10, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_11, padded(field_offset, 2))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_12, padded(field_offset, 2))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_13, padded(field_offset, 2))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_14, padded(field_offset, 2))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.TERRAIN_DATA_data_15, padded(field_offset, 2))
end
-- dissect payload of message type TERRAIN_CHECK
function payload_fns.payload_135(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TERRAIN_CHECK_lat, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.TERRAIN_CHECK_lon, padded(field_offset, 4))
end
-- dissect payload of message type TERRAIN_REPORT
function payload_fns.payload_136(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TERRAIN_REPORT_lat, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.TERRAIN_REPORT_lon, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TERRAIN_REPORT_spacing, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TERRAIN_REPORT_terrain_height, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.TERRAIN_REPORT_current_height, padded(field_offset, 4))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.TERRAIN_REPORT_pending, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.TERRAIN_REPORT_loaded, padded(field_offset, 2))
end
-- dissect payload of message type SCALED_PRESSURE2
function payload_fns.payload_137(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SCALED_PRESSURE2_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SCALED_PRESSURE2_press_abs, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SCALED_PRESSURE2_press_diff, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SCALED_PRESSURE2_temperature, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SCALED_PRESSURE2_temperature_press_diff, padded(field_offset, 2))
end
-- dissect payload of message type ATT_POS_MOCAP
function payload_fns.payload_138(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 120 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 120)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_q_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_q_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_q_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_q_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_x, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_y, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_z, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_0, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_1, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_2, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_3, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_4, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_5, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_6, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_7, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_8, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_9, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_10, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_11, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_12, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_13, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_14, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_15, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_16, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_17, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_18, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_19, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.ATT_POS_MOCAP_covariance_20, padded(field_offset, 4))
end
-- dissect payload of message type SET_ACTUATOR_CONTROL_TARGET
function payload_fns.payload_139(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 43 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 43)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_time_usec, padded(field_offset, 8))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_group_mlx, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_target_system, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_target_component, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_4, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_5, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_6, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_7, padded(field_offset, 4))
end
-- dissect payload of message type ACTUATOR_CONTROL_TARGET
function payload_fns.payload_140(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 41 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 41)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_time_usec, padded(field_offset, 8))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_group_mlx, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_4, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_5, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_6, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_7, padded(field_offset, 4))
end
-- dissect payload of message type ALTITUDE
function payload_fns.payload_141(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ALTITUDE_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ALTITUDE_altitude_monotonic, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ALTITUDE_altitude_amsl, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ALTITUDE_altitude_local, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ALTITUDE_altitude_relative, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ALTITUDE_altitude_terrain, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ALTITUDE_bottom_clearance, padded(field_offset, 4))
end
-- dissect payload of message type RESOURCE_REQUEST
function payload_fns.payload_142(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 243 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 243)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_request_id, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_type, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_0, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_1, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_2, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_3, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_4, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_5, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_6, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_7, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_8, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_9, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_10, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_11, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_12, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_13, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_14, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_15, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_16, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_17, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_18, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_19, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_20, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_21, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_22, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_23, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_24, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_25, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_26, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_27, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_28, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_29, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_30, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_31, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_32, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_33, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_34, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_35, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_36, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_37, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_38, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_39, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_40, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_41, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_42, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_43, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_44, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_45, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_46, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_47, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_48, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_49, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_50, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_51, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_52, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_53, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_54, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_55, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_56, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_57, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_58, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_59, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_60, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_61, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_62, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_63, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_64, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_65, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_66, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_67, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_68, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_69, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_70, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_71, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_72, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_73, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_74, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_75, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_76, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_77, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_78, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_79, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_80, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_81, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_82, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_83, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_84, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_85, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_86, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_87, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_88, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_89, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_90, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_91, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_92, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_93, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_94, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_95, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_96, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_97, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_98, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_99, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_100, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_101, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_102, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_103, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_104, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_105, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_106, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_107, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_108, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_109, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_110, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_111, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_112, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_113, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_114, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_115, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_116, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_117, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_118, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_uri_119, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_transfer_type, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_0, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_1, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_2, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_3, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_4, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_5, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_6, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_7, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_8, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_9, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_10, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_11, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_12, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_13, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_14, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_15, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_16, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_17, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_18, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_19, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_20, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_21, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_22, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_23, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_24, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_25, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_26, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_27, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_28, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_29, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_30, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_31, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_32, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_33, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_34, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_35, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_36, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_37, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_38, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_39, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_40, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_41, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_42, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_43, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_44, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_45, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_46, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_47, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_48, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_49, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_50, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_51, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_52, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_53, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_54, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_55, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_56, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_57, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_58, padded(field_offset, 1))
    field_offset = offset + 182
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_59, padded(field_offset, 1))
    field_offset = offset + 183
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_60, padded(field_offset, 1))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_61, padded(field_offset, 1))
    field_offset = offset + 185
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_62, padded(field_offset, 1))
    field_offset = offset + 186
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_63, padded(field_offset, 1))
    field_offset = offset + 187
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_64, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_65, padded(field_offset, 1))
    field_offset = offset + 189
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_66, padded(field_offset, 1))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_67, padded(field_offset, 1))
    field_offset = offset + 191
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_68, padded(field_offset, 1))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_69, padded(field_offset, 1))
    field_offset = offset + 193
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_70, padded(field_offset, 1))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_71, padded(field_offset, 1))
    field_offset = offset + 195
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_72, padded(field_offset, 1))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_73, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_74, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_75, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_76, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_77, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_78, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_79, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_80, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_81, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_82, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_83, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_84, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_85, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_86, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_87, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_88, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_89, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_90, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_91, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_92, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_93, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_94, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_95, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_96, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_97, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_98, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_99, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_100, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_101, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_102, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_103, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_104, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_105, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_106, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_107, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_108, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_109, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_110, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_111, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_112, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_113, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_114, padded(field_offset, 1))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_115, padded(field_offset, 1))
    field_offset = offset + 239
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_116, padded(field_offset, 1))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_117, padded(field_offset, 1))
    field_offset = offset + 241
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_118, padded(field_offset, 1))
    field_offset = offset + 242
    subtree, value = tree:add_le(f.RESOURCE_REQUEST_storage_119, padded(field_offset, 1))
end
-- dissect payload of message type SCALED_PRESSURE3
function payload_fns.payload_143(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SCALED_PRESSURE3_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SCALED_PRESSURE3_press_abs, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SCALED_PRESSURE3_press_diff, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SCALED_PRESSURE3_temperature, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SCALED_PRESSURE3_temperature_press_diff, padded(field_offset, 2))
end
-- dissect payload of message type FOLLOW_TARGET
function payload_fns.payload_144(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 93 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 93)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.FOLLOW_TARGET_timestamp, padded(field_offset, 8))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.FOLLOW_TARGET_est_capabilities, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.FOLLOW_TARGET_lat, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.FOLLOW_TARGET_lon, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.FOLLOW_TARGET_alt, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.FOLLOW_TARGET_vel_0, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.FOLLOW_TARGET_vel_1, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.FOLLOW_TARGET_vel_2, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.FOLLOW_TARGET_acc_0, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.FOLLOW_TARGET_acc_1, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.FOLLOW_TARGET_acc_2, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.FOLLOW_TARGET_attitude_q_0, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.FOLLOW_TARGET_attitude_q_1, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.FOLLOW_TARGET_attitude_q_2, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.FOLLOW_TARGET_attitude_q_3, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.FOLLOW_TARGET_rates_0, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.FOLLOW_TARGET_rates_1, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.FOLLOW_TARGET_rates_2, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.FOLLOW_TARGET_position_cov_0, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.FOLLOW_TARGET_position_cov_1, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.FOLLOW_TARGET_position_cov_2, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.FOLLOW_TARGET_custom_state, padded(field_offset, 8))
end
-- dissect payload of message type CONTROL_SYSTEM_STATE
function payload_fns.payload_146(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 100 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 100)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_x_acc, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_y_acc, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_z_acc, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_x_vel, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_y_vel, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_z_vel, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_x_pos, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_y_pos, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_z_pos, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_airspeed, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_vel_variance_0, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_vel_variance_1, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_vel_variance_2, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_pos_variance_0, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_pos_variance_1, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_pos_variance_2, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_q_0, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_q_1, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_q_2, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_q_3, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_roll_rate, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_pitch_rate, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.CONTROL_SYSTEM_STATE_yaw_rate, padded(field_offset, 4))
end
-- dissect payload of message type BATTERY_STATUS
function payload_fns.payload_147(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 32
    subtree, value = tree:add_le(f.BATTERY_STATUS_id, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.BATTERY_STATUS_battery_function, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.BATTERY_STATUS_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.BATTERY_STATUS_temperature, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_0, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_1, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_2, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_3, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_4, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_5, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_6, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_7, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_8, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_9, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.BATTERY_STATUS_current_battery, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.BATTERY_STATUS_current_consumed, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.BATTERY_STATUS_energy_consumed, padded(field_offset, 4))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.BATTERY_STATUS_battery_remaining, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.BATTERY_STATUS_time_remaining, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.BATTERY_STATUS_charge_state, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_ext_0, padded(field_offset, 2))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_ext_1, padded(field_offset, 2))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_ext_2, padded(field_offset, 2))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.BATTERY_STATUS_voltages_ext_3, padded(field_offset, 2))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.BATTERY_STATUS_mode, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.BATTERY_STATUS_fault_bitmask, padded(field_offset, 4))
    dissect_flags_MAV_BATTERY_FAULT(subtree, "BATTERY_STATUS_fault_bitmask", value)
end
-- dissect payload of message type AUTOPILOT_VERSION
function payload_fns.payload_148(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 78 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 78)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_capabilities, padded(field_offset, 8))
    dissect_flags_MAV_PROTOCOL_CAPABILITY(subtree, "AUTOPILOT_VERSION_capabilities", value)
    field_offset = offset + 16
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_sw_version, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_sw_version, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_sw_version, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_board_version, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_0, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_1, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_2, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_3, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_4, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_5, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_6, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_7, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_0, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_1, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_2, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_3, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_4, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_5, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_6, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_7, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_0, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_1, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_2, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_3, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_4, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_5, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_6, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_7, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_vendor_id, padded(field_offset, 2))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_product_id, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid, padded(field_offset, 8))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_0, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_1, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_2, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_3, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_4, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_5, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_6, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_7, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_8, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_9, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_10, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_11, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_12, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_13, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_14, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_15, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_16, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.AUTOPILOT_VERSION_uid2_17, padded(field_offset, 1))
end
-- dissect payload of message type LANDING_TARGET
function payload_fns.payload_149(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 60 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 60)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LANDING_TARGET_time_usec, padded(field_offset, 8))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.LANDING_TARGET_target_num, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.LANDING_TARGET_frame, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LANDING_TARGET_angle_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LANDING_TARGET_angle_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LANDING_TARGET_distance, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LANDING_TARGET_size_x, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LANDING_TARGET_size_y, padded(field_offset, 4))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.LANDING_TARGET_x, padded(field_offset, 4))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.LANDING_TARGET_y, padded(field_offset, 4))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.LANDING_TARGET_z, padded(field_offset, 4))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.LANDING_TARGET_q_0, padded(field_offset, 4))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.LANDING_TARGET_q_1, padded(field_offset, 4))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.LANDING_TARGET_q_2, padded(field_offset, 4))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.LANDING_TARGET_q_3, padded(field_offset, 4))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.LANDING_TARGET_type, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.LANDING_TARGET_position_valid, padded(field_offset, 1))
end
-- dissect payload of message type FENCE_STATUS
function payload_fns.payload_162(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 6
    subtree, value = tree:add_le(f.FENCE_STATUS_breach_status, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.FENCE_STATUS_breach_count, padded(field_offset, 2))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.FENCE_STATUS_breach_type, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.FENCE_STATUS_breach_time, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.FENCE_STATUS_breach_mitigation, padded(field_offset, 1))
end
-- dissect payload of message type MAG_CAL_REPORT
function payload_fns.payload_192(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 40
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_compass_id, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_cal_mask, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_cal_status, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_autosaved, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_fitness, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_ofs_x, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_ofs_y, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_ofs_z, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_diag_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_diag_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_diag_z, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_offdiag_x, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_offdiag_y, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_offdiag_z, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_orientation_confidence, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_old_orientation, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_new_orientation, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.MAG_CAL_REPORT_scale_factor, padded(field_offset, 4))
end
-- dissect payload of message type EFI_STATUS
function payload_fns.payload_225(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 73 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 73)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 64
    subtree, value = tree:add_le(f.EFI_STATUS_health, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.EFI_STATUS_ecu_index, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.EFI_STATUS_rpm, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.EFI_STATUS_fuel_consumed, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.EFI_STATUS_fuel_flow, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.EFI_STATUS_engine_load, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.EFI_STATUS_throttle_position, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.EFI_STATUS_spark_dwell_time, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.EFI_STATUS_barometric_pressure, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.EFI_STATUS_intake_manifold_pressure, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.EFI_STATUS_intake_manifold_temperature, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.EFI_STATUS_cylinder_head_temperature, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.EFI_STATUS_ignition_timing, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.EFI_STATUS_injection_time, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.EFI_STATUS_exhaust_gas_temperature, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.EFI_STATUS_throttle_out, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.EFI_STATUS_pt_compensation, padded(field_offset, 4))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.EFI_STATUS_ignition_voltage, padded(field_offset, 4))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.EFI_STATUS_fuel_pressure, padded(field_offset, 4))
end
-- dissect payload of message type ESTIMATOR_STATUS
function payload_fns.payload_230(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_time_usec, padded(field_offset, 8))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_flags, padded(field_offset, 2))
    dissect_flags_ESTIMATOR_STATUS_FLAGS(subtree, "ESTIMATOR_STATUS_flags", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_vel_ratio, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_pos_horiz_ratio, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_pos_vert_ratio, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_mag_ratio, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_hagl_ratio, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_tas_ratio, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_pos_horiz_accuracy, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ESTIMATOR_STATUS_pos_vert_accuracy, padded(field_offset, 4))
end
-- dissect payload of message type WIND_COV
function payload_fns.payload_231(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 40 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 40)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.WIND_COV_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.WIND_COV_wind_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.WIND_COV_wind_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.WIND_COV_wind_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.WIND_COV_var_horiz, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.WIND_COV_var_vert, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.WIND_COV_wind_alt, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.WIND_COV_horiz_accuracy, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.WIND_COV_vert_accuracy, padded(field_offset, 4))
end
-- dissect payload of message type GPS_INPUT
function payload_fns.payload_232(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 65 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 65)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS_INPUT_time_usec, padded(field_offset, 8))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.GPS_INPUT_gps_id, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.GPS_INPUT_ignore_flags, padded(field_offset, 2))
    dissect_flags_GPS_INPUT_IGNORE_FLAGS(subtree, "GPS_INPUT_ignore_flags", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS_INPUT_time_week_ms, padded(field_offset, 4))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.GPS_INPUT_time_week, padded(field_offset, 2))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.GPS_INPUT_fix_type, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS_INPUT_lat, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS_INPUT_lon, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS_INPUT_alt, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS_INPUT_hdop, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS_INPUT_vdop, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GPS_INPUT_vn, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GPS_INPUT_ve, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GPS_INPUT_vd, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GPS_INPUT_speed_accuracy, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.GPS_INPUT_horiz_accuracy, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.GPS_INPUT_vert_accuracy, padded(field_offset, 4))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.GPS_INPUT_satellites_visible, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.GPS_INPUT_yaw, padded(field_offset, 2))
end
-- dissect payload of message type GPS_RTCM_DATA
function payload_fns.payload_233(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 182 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 182)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_flags, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_len, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_0, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_1, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_2, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_3, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_4, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_5, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_6, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_7, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_8, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_9, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_10, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_11, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_12, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_13, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_14, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_15, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_16, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_17, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_18, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_19, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_20, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_21, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_22, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_23, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_24, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_25, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_26, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_27, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_28, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_29, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_30, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_31, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_32, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_33, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_34, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_35, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_36, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_37, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_38, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_39, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_40, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_41, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_42, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_43, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_44, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_45, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_46, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_47, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_48, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_49, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_50, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_51, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_52, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_53, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_54, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_55, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_56, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_57, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_58, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_59, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_60, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_61, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_62, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_63, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_64, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_65, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_66, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_67, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_68, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_69, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_70, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_71, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_72, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_73, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_74, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_75, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_76, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_77, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_78, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_79, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_80, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_81, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_82, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_83, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_84, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_85, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_86, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_87, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_88, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_89, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_90, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_91, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_92, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_93, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_94, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_95, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_96, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_97, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_98, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_99, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_100, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_101, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_102, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_103, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_104, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_105, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_106, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_107, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_108, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_109, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_110, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_111, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_112, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_113, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_114, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_115, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_116, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_117, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_118, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_119, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_120, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_121, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_122, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_123, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_124, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_125, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_126, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_127, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_128, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_129, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_130, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_131, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_132, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_133, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_134, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_135, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_136, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_137, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_138, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_139, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_140, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_141, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_142, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_143, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_144, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_145, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_146, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_147, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_148, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_149, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_150, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_151, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_152, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_153, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_154, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_155, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_156, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_157, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_158, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_159, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_160, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_161, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_162, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_163, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_164, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_165, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_166, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_167, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_168, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_169, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_170, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_171, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_172, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_173, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_174, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_175, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_176, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_177, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_178, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.GPS_RTCM_DATA_data_179, padded(field_offset, 1))
end
-- dissect payload of message type HIGH_LATENCY
function payload_fns.payload_234(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 40 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 40)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 26
    subtree, value = tree:add_le(f.HIGH_LATENCY_base_mode, padded(field_offset, 1))
    dissect_flags_MAV_MODE_FLAG(subtree, "HIGH_LATENCY_base_mode", value)
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIGH_LATENCY_custom_mode, padded(field_offset, 4))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.HIGH_LATENCY_landed_state, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIGH_LATENCY_roll, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.HIGH_LATENCY_pitch, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIGH_LATENCY_heading, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIGH_LATENCY_throttle, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.HIGH_LATENCY_heading_sp, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.HIGH_LATENCY_latitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIGH_LATENCY_longitude, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIGH_LATENCY_altitude_amsl, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.HIGH_LATENCY_altitude_sp, padded(field_offset, 2))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.HIGH_LATENCY_airspeed, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.HIGH_LATENCY_airspeed_sp, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.HIGH_LATENCY_groundspeed, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIGH_LATENCY_climb_rate, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.HIGH_LATENCY_gps_nsat, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.HIGH_LATENCY_gps_fix_type, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.HIGH_LATENCY_battery_remaining, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIGH_LATENCY_temperature, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.HIGH_LATENCY_temperature_air, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.HIGH_LATENCY_failsafe, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.HIGH_LATENCY_wp_num, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIGH_LATENCY_wp_distance, padded(field_offset, 2))
end
-- dissect payload of message type HIGH_LATENCY2
function payload_fns.payload_235(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HIGH_LATENCY2_timestamp, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HIGH_LATENCY2_type, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.HIGH_LATENCY2_autopilot, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HIGH_LATENCY2_custom_mode, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.HIGH_LATENCY2_latitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HIGH_LATENCY2_longitude, padded(field_offset, 4))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.HIGH_LATENCY2_altitude, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HIGH_LATENCY2_target_altitude, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.HIGH_LATENCY2_heading, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.HIGH_LATENCY2_target_heading, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.HIGH_LATENCY2_target_distance, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HIGH_LATENCY2_throttle, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.HIGH_LATENCY2_airspeed, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.HIGH_LATENCY2_airspeed_sp, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.HIGH_LATENCY2_groundspeed, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HIGH_LATENCY2_windspeed, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.HIGH_LATENCY2_wind_heading, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.HIGH_LATENCY2_eph, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.HIGH_LATENCY2_epv, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HIGH_LATENCY2_temperature_air, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.HIGH_LATENCY2_climb_rate, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.HIGH_LATENCY2_battery, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HIGH_LATENCY2_wp_num, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.HIGH_LATENCY2_failure_flags, padded(field_offset, 2))
    dissect_flags_HL_FAILURE_FLAG(subtree, "HIGH_LATENCY2_failure_flags", value)
    field_offset = offset + 39
    subtree, value = tree:add_le(f.HIGH_LATENCY2_custom0, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HIGH_LATENCY2_custom1, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.HIGH_LATENCY2_custom2, padded(field_offset, 1))
end
-- dissect payload of message type VIBRATION
function payload_fns.payload_241(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.VIBRATION_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.VIBRATION_vibration_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.VIBRATION_vibration_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.VIBRATION_vibration_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.VIBRATION_clipping_0, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.VIBRATION_clipping_1, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.VIBRATION_clipping_2, padded(field_offset, 4))
end
-- dissect payload of message type HOME_POSITION
function payload_fns.payload_242(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 60 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 60)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HOME_POSITION_latitude, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.HOME_POSITION_longitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HOME_POSITION_altitude, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.HOME_POSITION_x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.HOME_POSITION_y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.HOME_POSITION_z, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.HOME_POSITION_q_0, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.HOME_POSITION_q_1, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.HOME_POSITION_q_2, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.HOME_POSITION_q_3, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.HOME_POSITION_approach_x, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.HOME_POSITION_approach_y, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.HOME_POSITION_approach_z, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.HOME_POSITION_time_usec, padded(field_offset, 8))
end
-- dissect payload of message type SET_HOME_POSITION
function payload_fns.payload_243(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 61 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 61)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 52
    subtree, value = tree:add_le(f.SET_HOME_POSITION_target_system, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SET_HOME_POSITION_latitude, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SET_HOME_POSITION_longitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SET_HOME_POSITION_altitude, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SET_HOME_POSITION_x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SET_HOME_POSITION_y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SET_HOME_POSITION_z, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SET_HOME_POSITION_q_0, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SET_HOME_POSITION_q_1, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SET_HOME_POSITION_q_2, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SET_HOME_POSITION_q_3, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.SET_HOME_POSITION_approach_x, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.SET_HOME_POSITION_approach_y, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.SET_HOME_POSITION_approach_z, padded(field_offset, 4))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.SET_HOME_POSITION_time_usec, padded(field_offset, 8))
end
-- dissect payload of message type MESSAGE_INTERVAL
function payload_fns.payload_244(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MESSAGE_INTERVAL_message_id, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MESSAGE_INTERVAL_interval_us, padded(field_offset, 4))
end
-- dissect payload of message type EXTENDED_SYS_STATE
function payload_fns.payload_245(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.EXTENDED_SYS_STATE_vtol_state, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.EXTENDED_SYS_STATE_landed_state, padded(field_offset, 1))
end
-- dissect payload of message type ADSB_VEHICLE
function payload_fns.payload_246(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ADSB_VEHICLE_ICAO_address, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.ADSB_VEHICLE_lat, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ADSB_VEHICLE_lon, padded(field_offset, 4))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.ADSB_VEHICLE_altitude_type, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ADSB_VEHICLE_altitude, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ADSB_VEHICLE_heading, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.ADSB_VEHICLE_hor_velocity, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ADSB_VEHICLE_ver_velocity, padded(field_offset, 2))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.ADSB_VEHICLE_callsign, padded(field_offset, 9))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ADSB_VEHICLE_emitter_type, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.ADSB_VEHICLE_tslc, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.ADSB_VEHICLE_flags, padded(field_offset, 2))
    dissect_flags_ADSB_FLAGS(subtree, "ADSB_VEHICLE_flags", value)
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ADSB_VEHICLE_squawk, padded(field_offset, 2))
end
-- dissect payload of message type COLLISION
function payload_fns.payload_247(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 19 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 19)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 16
    subtree, value = tree:add_le(f.COLLISION_src, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COLLISION_id, padded(field_offset, 4))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.COLLISION_action, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.COLLISION_threat_level, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COLLISION_time_to_minimum_delta, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COLLISION_altitude_minimum_delta, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COLLISION_horizontal_minimum_delta, padded(field_offset, 4))
end
-- dissect payload of message type V2_EXTENSION
function payload_fns.payload_248(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 254 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 254)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.V2_EXTENSION_target_network, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.V2_EXTENSION_target_system, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.V2_EXTENSION_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.V2_EXTENSION_message_type, padded(field_offset, 2))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_0, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_1, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_2, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_3, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_4, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_5, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_6, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_7, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_8, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_9, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_10, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_11, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_12, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_13, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_14, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_15, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_16, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_17, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_18, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_19, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_20, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_21, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_22, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_23, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_24, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_25, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_26, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_27, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_28, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_29, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_30, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_31, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_32, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_33, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_34, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_35, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_36, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_37, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_38, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_39, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_40, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_41, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_42, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_43, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_44, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_45, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_46, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_47, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_48, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_49, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_50, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_51, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_52, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_53, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_54, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_55, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_56, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_57, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_58, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_59, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_60, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_61, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_62, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_63, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_64, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_65, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_66, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_67, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_68, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_69, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_70, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_71, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_72, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_73, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_74, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_75, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_76, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_77, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_78, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_79, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_80, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_81, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_82, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_83, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_84, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_85, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_86, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_87, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_88, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_89, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_90, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_91, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_92, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_93, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_94, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_95, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_96, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_97, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_98, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_99, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_100, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_101, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_102, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_103, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_104, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_105, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_106, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_107, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_108, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_109, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_110, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_111, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_112, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_113, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_114, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_115, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_116, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_117, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_118, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_119, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_120, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_121, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_122, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_123, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_124, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_125, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_126, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_127, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_128, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_129, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_130, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_131, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_132, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_133, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_134, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_135, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_136, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_137, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_138, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_139, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_140, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_141, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_142, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_143, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_144, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_145, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_146, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_147, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_148, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_149, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_150, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_151, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_152, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_153, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_154, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_155, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_156, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_157, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_158, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_159, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_160, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_161, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_162, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_163, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_164, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_165, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_166, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_167, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_168, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_169, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_170, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_171, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_172, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_173, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_174, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_175, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_176, padded(field_offset, 1))
    field_offset = offset + 182
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_177, padded(field_offset, 1))
    field_offset = offset + 183
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_178, padded(field_offset, 1))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_179, padded(field_offset, 1))
    field_offset = offset + 185
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_180, padded(field_offset, 1))
    field_offset = offset + 186
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_181, padded(field_offset, 1))
    field_offset = offset + 187
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_182, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_183, padded(field_offset, 1))
    field_offset = offset + 189
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_184, padded(field_offset, 1))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_185, padded(field_offset, 1))
    field_offset = offset + 191
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_186, padded(field_offset, 1))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_187, padded(field_offset, 1))
    field_offset = offset + 193
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_188, padded(field_offset, 1))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_189, padded(field_offset, 1))
    field_offset = offset + 195
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_190, padded(field_offset, 1))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_191, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_192, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_193, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_194, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_195, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_196, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_197, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_198, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_199, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_200, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_201, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_202, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_203, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_204, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_205, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_206, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_207, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_208, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_209, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_210, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_211, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_212, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_213, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_214, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_215, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_216, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_217, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_218, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_219, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_220, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_221, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_222, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_223, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_224, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_225, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_226, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_227, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_228, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_229, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_230, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_231, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_232, padded(field_offset, 1))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_233, padded(field_offset, 1))
    field_offset = offset + 239
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_234, padded(field_offset, 1))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_235, padded(field_offset, 1))
    field_offset = offset + 241
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_236, padded(field_offset, 1))
    field_offset = offset + 242
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_237, padded(field_offset, 1))
    field_offset = offset + 243
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_238, padded(field_offset, 1))
    field_offset = offset + 244
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_239, padded(field_offset, 1))
    field_offset = offset + 245
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_240, padded(field_offset, 1))
    field_offset = offset + 246
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_241, padded(field_offset, 1))
    field_offset = offset + 247
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_242, padded(field_offset, 1))
    field_offset = offset + 248
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_243, padded(field_offset, 1))
    field_offset = offset + 249
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_244, padded(field_offset, 1))
    field_offset = offset + 250
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_245, padded(field_offset, 1))
    field_offset = offset + 251
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_246, padded(field_offset, 1))
    field_offset = offset + 252
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_247, padded(field_offset, 1))
    field_offset = offset + 253
    subtree, value = tree:add_le(f.V2_EXTENSION_payload_248, padded(field_offset, 1))
end
-- dissect payload of message type MEMORY_VECT
function payload_fns.payload_249(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 36 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 36)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MEMORY_VECT_address, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.MEMORY_VECT_ver, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.MEMORY_VECT_type, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MEMORY_VECT_value_0, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.MEMORY_VECT_value_1, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.MEMORY_VECT_value_2, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.MEMORY_VECT_value_3, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.MEMORY_VECT_value_4, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.MEMORY_VECT_value_5, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.MEMORY_VECT_value_6, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.MEMORY_VECT_value_7, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.MEMORY_VECT_value_8, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.MEMORY_VECT_value_9, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.MEMORY_VECT_value_10, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.MEMORY_VECT_value_11, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.MEMORY_VECT_value_12, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.MEMORY_VECT_value_13, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.MEMORY_VECT_value_14, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.MEMORY_VECT_value_15, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.MEMORY_VECT_value_16, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.MEMORY_VECT_value_17, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.MEMORY_VECT_value_18, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.MEMORY_VECT_value_19, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.MEMORY_VECT_value_20, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.MEMORY_VECT_value_21, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.MEMORY_VECT_value_22, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.MEMORY_VECT_value_23, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.MEMORY_VECT_value_24, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.MEMORY_VECT_value_25, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.MEMORY_VECT_value_26, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.MEMORY_VECT_value_27, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.MEMORY_VECT_value_28, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.MEMORY_VECT_value_29, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.MEMORY_VECT_value_30, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.MEMORY_VECT_value_31, padded(field_offset, 1))
end
-- dissect payload of message type DEBUG_VECT
function payload_fns.payload_250(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 30 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 30)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 20
    subtree, value = tree:add_le(f.DEBUG_VECT_name, padded(field_offset, 10))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.DEBUG_VECT_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.DEBUG_VECT_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.DEBUG_VECT_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.DEBUG_VECT_z, padded(field_offset, 4))
end
-- dissect payload of message type NAMED_VALUE_FLOAT
function payload_fns.payload_251(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.NAMED_VALUE_FLOAT_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.NAMED_VALUE_FLOAT_name, padded(field_offset, 10))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.NAMED_VALUE_FLOAT_value, padded(field_offset, 4))
end
-- dissect payload of message type NAMED_VALUE_INT
function payload_fns.payload_252(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.NAMED_VALUE_INT_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.NAMED_VALUE_INT_name, padded(field_offset, 10))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.NAMED_VALUE_INT_value, padded(field_offset, 4))
end
-- dissect payload of message type STATUSTEXT
function payload_fns.payload_253(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.STATUSTEXT_severity, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.STATUSTEXT_text, padded(field_offset, 50))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.STATUSTEXT_id, padded(field_offset, 2))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.STATUSTEXT_chunk_seq, padded(field_offset, 1))
end
-- dissect payload of message type DEBUG
function payload_fns.payload_254(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.DEBUG_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.DEBUG_ind, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.DEBUG_value, padded(field_offset, 4))
end
-- dissect payload of message type SETUP_SIGNING
function payload_fns.payload_256(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SETUP_SIGNING_target_system, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.SETUP_SIGNING_target_component, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_0, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_1, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_2, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_3, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_4, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_5, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_6, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_7, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_8, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_9, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_10, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_11, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_12, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_13, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_14, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_15, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_16, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_17, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_18, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_19, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_20, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_21, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_22, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_23, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_24, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_25, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_26, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_27, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_28, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_29, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_30, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.SETUP_SIGNING_secret_key_31, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SETUP_SIGNING_initial_timestamp, padded(field_offset, 8))
end
-- dissect payload of message type BUTTON_CHANGE
function payload_fns.payload_257(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.BUTTON_CHANGE_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.BUTTON_CHANGE_last_change_ms, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.BUTTON_CHANGE_state, padded(field_offset, 1))
end
-- dissect payload of message type PLAY_TUNE
function payload_fns.payload_258(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 232 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 232)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PLAY_TUNE_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.PLAY_TUNE_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.PLAY_TUNE_tune, padded(field_offset, 30))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.PLAY_TUNE_tune2, padded(field_offset, 200))
end
-- dissect payload of message type CAMERA_INFORMATION
function payload_fns.payload_259(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 235 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 235)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_0, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_1, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_2, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_3, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_4, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_5, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_6, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_7, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_8, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_9, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_10, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_11, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_12, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_13, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_14, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_15, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_16, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_17, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_18, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_19, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_20, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_21, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_22, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_23, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_24, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_25, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_26, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_27, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_28, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_29, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_30, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_vendor_name_31, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_0, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_1, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_2, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_3, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_4, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_5, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_6, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_7, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_8, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_9, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_10, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_11, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_12, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_13, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_14, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_15, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_16, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_17, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_18, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_19, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_20, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_21, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_22, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_23, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_24, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_25, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_26, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_27, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_28, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_29, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_30, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_model_name_31, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_firmware_version, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_focal_length, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_sensor_size_h, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_sensor_size_v, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_resolution_h, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_resolution_v, padded(field_offset, 2))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_lens_id, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_flags, padded(field_offset, 4))
    dissect_flags_CAMERA_CAP_FLAGS(subtree, "CAMERA_INFORMATION_flags", value)
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_cam_definition_version, padded(field_offset, 2))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.CAMERA_INFORMATION_cam_definition_uri, padded(field_offset, 140))
end
-- dissect payload of message type CAMERA_SETTINGS
function payload_fns.payload_260(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 13 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 13)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_SETTINGS_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAMERA_SETTINGS_mode_id, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.CAMERA_SETTINGS_zoomLevel, padded(field_offset, 4))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.CAMERA_SETTINGS_focusLevel, padded(field_offset, 4))
end
-- dissect payload of message type STORAGE_INFORMATION
function payload_fns.payload_261(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 61 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 61)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_storage_id, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_storage_count, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_status, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_total_capacity, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_used_capacity, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_available_capacity, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_read_speed, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_write_speed, padded(field_offset, 4))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_type, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_name, padded(field_offset, 32))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.STORAGE_INFORMATION_storage_usage, padded(field_offset, 1))
    dissect_flags_STORAGE_USAGE_FLAG(subtree, "STORAGE_INFORMATION_storage_usage", value)
end
-- dissect payload of message type CAMERA_CAPTURE_STATUS
function payload_fns.payload_262(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_CAPTURE_STATUS_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CAMERA_CAPTURE_STATUS_image_status, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.CAMERA_CAPTURE_STATUS_video_status, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAMERA_CAPTURE_STATUS_image_interval, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAMERA_CAPTURE_STATUS_recording_time_ms, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAMERA_CAPTURE_STATUS_available_capacity, padded(field_offset, 4))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.CAMERA_CAPTURE_STATUS_image_count, padded(field_offset, 4))
end
-- dissect payload of message type CAMERA_IMAGE_CAPTURED
function payload_fns.payload_263(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_time_utc, padded(field_offset, 8))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_camera_id, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_lat, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_lon, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_alt, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_relative_alt, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_0, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_1, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_2, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_3, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_image_index, padded(field_offset, 4))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_capture_result, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.CAMERA_IMAGE_CAPTURED_file_url, padded(field_offset, 205))
end
-- dissect payload of message type FLIGHT_INFORMATION
function payload_fns.payload_264(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 24
    subtree, value = tree:add_le(f.FLIGHT_INFORMATION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.FLIGHT_INFORMATION_arming_time_utc, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.FLIGHT_INFORMATION_takeoff_time_utc, padded(field_offset, 8))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.FLIGHT_INFORMATION_flight_uuid, padded(field_offset, 8))
end
-- dissect payload of message type MOUNT_ORIENTATION
function payload_fns.payload_265(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.MOUNT_ORIENTATION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.MOUNT_ORIENTATION_roll, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.MOUNT_ORIENTATION_pitch, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.MOUNT_ORIENTATION_yaw, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.MOUNT_ORIENTATION_yaw_absolute, padded(field_offset, 4))
end
-- dissect payload of message type LOGGING_DATA
function payload_fns.payload_266(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.LOGGING_DATA_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.LOGGING_DATA_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOGGING_DATA_sequence, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOGGING_DATA_length, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.LOGGING_DATA_first_message_offset, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.LOGGING_DATA_data_0, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.LOGGING_DATA_data_1, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOGGING_DATA_data_2, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.LOGGING_DATA_data_3, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.LOGGING_DATA_data_4, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.LOGGING_DATA_data_5, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LOGGING_DATA_data_6, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.LOGGING_DATA_data_7, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.LOGGING_DATA_data_8, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.LOGGING_DATA_data_9, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LOGGING_DATA_data_10, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.LOGGING_DATA_data_11, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.LOGGING_DATA_data_12, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.LOGGING_DATA_data_13, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LOGGING_DATA_data_14, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.LOGGING_DATA_data_15, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.LOGGING_DATA_data_16, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.LOGGING_DATA_data_17, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LOGGING_DATA_data_18, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.LOGGING_DATA_data_19, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.LOGGING_DATA_data_20, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.LOGGING_DATA_data_21, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.LOGGING_DATA_data_22, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.LOGGING_DATA_data_23, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.LOGGING_DATA_data_24, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.LOGGING_DATA_data_25, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.LOGGING_DATA_data_26, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.LOGGING_DATA_data_27, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.LOGGING_DATA_data_28, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.LOGGING_DATA_data_29, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.LOGGING_DATA_data_30, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.LOGGING_DATA_data_31, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.LOGGING_DATA_data_32, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.LOGGING_DATA_data_33, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.LOGGING_DATA_data_34, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.LOGGING_DATA_data_35, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.LOGGING_DATA_data_36, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.LOGGING_DATA_data_37, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.LOGGING_DATA_data_38, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.LOGGING_DATA_data_39, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.LOGGING_DATA_data_40, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.LOGGING_DATA_data_41, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.LOGGING_DATA_data_42, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.LOGGING_DATA_data_43, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.LOGGING_DATA_data_44, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.LOGGING_DATA_data_45, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.LOGGING_DATA_data_46, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.LOGGING_DATA_data_47, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.LOGGING_DATA_data_48, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.LOGGING_DATA_data_49, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.LOGGING_DATA_data_50, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.LOGGING_DATA_data_51, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.LOGGING_DATA_data_52, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.LOGGING_DATA_data_53, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.LOGGING_DATA_data_54, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.LOGGING_DATA_data_55, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.LOGGING_DATA_data_56, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.LOGGING_DATA_data_57, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.LOGGING_DATA_data_58, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.LOGGING_DATA_data_59, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.LOGGING_DATA_data_60, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.LOGGING_DATA_data_61, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.LOGGING_DATA_data_62, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.LOGGING_DATA_data_63, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.LOGGING_DATA_data_64, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.LOGGING_DATA_data_65, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.LOGGING_DATA_data_66, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.LOGGING_DATA_data_67, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.LOGGING_DATA_data_68, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.LOGGING_DATA_data_69, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.LOGGING_DATA_data_70, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.LOGGING_DATA_data_71, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.LOGGING_DATA_data_72, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.LOGGING_DATA_data_73, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.LOGGING_DATA_data_74, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.LOGGING_DATA_data_75, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.LOGGING_DATA_data_76, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.LOGGING_DATA_data_77, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.LOGGING_DATA_data_78, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.LOGGING_DATA_data_79, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.LOGGING_DATA_data_80, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.LOGGING_DATA_data_81, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.LOGGING_DATA_data_82, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.LOGGING_DATA_data_83, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.LOGGING_DATA_data_84, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.LOGGING_DATA_data_85, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.LOGGING_DATA_data_86, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.LOGGING_DATA_data_87, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.LOGGING_DATA_data_88, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.LOGGING_DATA_data_89, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.LOGGING_DATA_data_90, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.LOGGING_DATA_data_91, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.LOGGING_DATA_data_92, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.LOGGING_DATA_data_93, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.LOGGING_DATA_data_94, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.LOGGING_DATA_data_95, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.LOGGING_DATA_data_96, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.LOGGING_DATA_data_97, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.LOGGING_DATA_data_98, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.LOGGING_DATA_data_99, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.LOGGING_DATA_data_100, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.LOGGING_DATA_data_101, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.LOGGING_DATA_data_102, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.LOGGING_DATA_data_103, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.LOGGING_DATA_data_104, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.LOGGING_DATA_data_105, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.LOGGING_DATA_data_106, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.LOGGING_DATA_data_107, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.LOGGING_DATA_data_108, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.LOGGING_DATA_data_109, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.LOGGING_DATA_data_110, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.LOGGING_DATA_data_111, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.LOGGING_DATA_data_112, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.LOGGING_DATA_data_113, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.LOGGING_DATA_data_114, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.LOGGING_DATA_data_115, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.LOGGING_DATA_data_116, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.LOGGING_DATA_data_117, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.LOGGING_DATA_data_118, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.LOGGING_DATA_data_119, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.LOGGING_DATA_data_120, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.LOGGING_DATA_data_121, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.LOGGING_DATA_data_122, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.LOGGING_DATA_data_123, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.LOGGING_DATA_data_124, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.LOGGING_DATA_data_125, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.LOGGING_DATA_data_126, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.LOGGING_DATA_data_127, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.LOGGING_DATA_data_128, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.LOGGING_DATA_data_129, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.LOGGING_DATA_data_130, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.LOGGING_DATA_data_131, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.LOGGING_DATA_data_132, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.LOGGING_DATA_data_133, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.LOGGING_DATA_data_134, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.LOGGING_DATA_data_135, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.LOGGING_DATA_data_136, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.LOGGING_DATA_data_137, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.LOGGING_DATA_data_138, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.LOGGING_DATA_data_139, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.LOGGING_DATA_data_140, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.LOGGING_DATA_data_141, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.LOGGING_DATA_data_142, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.LOGGING_DATA_data_143, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.LOGGING_DATA_data_144, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.LOGGING_DATA_data_145, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.LOGGING_DATA_data_146, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.LOGGING_DATA_data_147, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.LOGGING_DATA_data_148, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.LOGGING_DATA_data_149, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.LOGGING_DATA_data_150, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.LOGGING_DATA_data_151, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.LOGGING_DATA_data_152, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.LOGGING_DATA_data_153, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.LOGGING_DATA_data_154, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.LOGGING_DATA_data_155, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.LOGGING_DATA_data_156, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.LOGGING_DATA_data_157, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.LOGGING_DATA_data_158, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.LOGGING_DATA_data_159, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.LOGGING_DATA_data_160, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.LOGGING_DATA_data_161, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.LOGGING_DATA_data_162, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.LOGGING_DATA_data_163, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.LOGGING_DATA_data_164, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.LOGGING_DATA_data_165, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.LOGGING_DATA_data_166, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.LOGGING_DATA_data_167, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.LOGGING_DATA_data_168, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.LOGGING_DATA_data_169, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.LOGGING_DATA_data_170, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.LOGGING_DATA_data_171, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.LOGGING_DATA_data_172, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.LOGGING_DATA_data_173, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.LOGGING_DATA_data_174, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.LOGGING_DATA_data_175, padded(field_offset, 1))
    field_offset = offset + 182
    subtree, value = tree:add_le(f.LOGGING_DATA_data_176, padded(field_offset, 1))
    field_offset = offset + 183
    subtree, value = tree:add_le(f.LOGGING_DATA_data_177, padded(field_offset, 1))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.LOGGING_DATA_data_178, padded(field_offset, 1))
    field_offset = offset + 185
    subtree, value = tree:add_le(f.LOGGING_DATA_data_179, padded(field_offset, 1))
    field_offset = offset + 186
    subtree, value = tree:add_le(f.LOGGING_DATA_data_180, padded(field_offset, 1))
    field_offset = offset + 187
    subtree, value = tree:add_le(f.LOGGING_DATA_data_181, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.LOGGING_DATA_data_182, padded(field_offset, 1))
    field_offset = offset + 189
    subtree, value = tree:add_le(f.LOGGING_DATA_data_183, padded(field_offset, 1))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.LOGGING_DATA_data_184, padded(field_offset, 1))
    field_offset = offset + 191
    subtree, value = tree:add_le(f.LOGGING_DATA_data_185, padded(field_offset, 1))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.LOGGING_DATA_data_186, padded(field_offset, 1))
    field_offset = offset + 193
    subtree, value = tree:add_le(f.LOGGING_DATA_data_187, padded(field_offset, 1))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.LOGGING_DATA_data_188, padded(field_offset, 1))
    field_offset = offset + 195
    subtree, value = tree:add_le(f.LOGGING_DATA_data_189, padded(field_offset, 1))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.LOGGING_DATA_data_190, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.LOGGING_DATA_data_191, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.LOGGING_DATA_data_192, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.LOGGING_DATA_data_193, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.LOGGING_DATA_data_194, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.LOGGING_DATA_data_195, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.LOGGING_DATA_data_196, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.LOGGING_DATA_data_197, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.LOGGING_DATA_data_198, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.LOGGING_DATA_data_199, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.LOGGING_DATA_data_200, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.LOGGING_DATA_data_201, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.LOGGING_DATA_data_202, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.LOGGING_DATA_data_203, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.LOGGING_DATA_data_204, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.LOGGING_DATA_data_205, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.LOGGING_DATA_data_206, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.LOGGING_DATA_data_207, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.LOGGING_DATA_data_208, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.LOGGING_DATA_data_209, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.LOGGING_DATA_data_210, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.LOGGING_DATA_data_211, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.LOGGING_DATA_data_212, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.LOGGING_DATA_data_213, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.LOGGING_DATA_data_214, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.LOGGING_DATA_data_215, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.LOGGING_DATA_data_216, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.LOGGING_DATA_data_217, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.LOGGING_DATA_data_218, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.LOGGING_DATA_data_219, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.LOGGING_DATA_data_220, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.LOGGING_DATA_data_221, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.LOGGING_DATA_data_222, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.LOGGING_DATA_data_223, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.LOGGING_DATA_data_224, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.LOGGING_DATA_data_225, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.LOGGING_DATA_data_226, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.LOGGING_DATA_data_227, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.LOGGING_DATA_data_228, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.LOGGING_DATA_data_229, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.LOGGING_DATA_data_230, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.LOGGING_DATA_data_231, padded(field_offset, 1))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.LOGGING_DATA_data_232, padded(field_offset, 1))
    field_offset = offset + 239
    subtree, value = tree:add_le(f.LOGGING_DATA_data_233, padded(field_offset, 1))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.LOGGING_DATA_data_234, padded(field_offset, 1))
    field_offset = offset + 241
    subtree, value = tree:add_le(f.LOGGING_DATA_data_235, padded(field_offset, 1))
    field_offset = offset + 242
    subtree, value = tree:add_le(f.LOGGING_DATA_data_236, padded(field_offset, 1))
    field_offset = offset + 243
    subtree, value = tree:add_le(f.LOGGING_DATA_data_237, padded(field_offset, 1))
    field_offset = offset + 244
    subtree, value = tree:add_le(f.LOGGING_DATA_data_238, padded(field_offset, 1))
    field_offset = offset + 245
    subtree, value = tree:add_le(f.LOGGING_DATA_data_239, padded(field_offset, 1))
    field_offset = offset + 246
    subtree, value = tree:add_le(f.LOGGING_DATA_data_240, padded(field_offset, 1))
    field_offset = offset + 247
    subtree, value = tree:add_le(f.LOGGING_DATA_data_241, padded(field_offset, 1))
    field_offset = offset + 248
    subtree, value = tree:add_le(f.LOGGING_DATA_data_242, padded(field_offset, 1))
    field_offset = offset + 249
    subtree, value = tree:add_le(f.LOGGING_DATA_data_243, padded(field_offset, 1))
    field_offset = offset + 250
    subtree, value = tree:add_le(f.LOGGING_DATA_data_244, padded(field_offset, 1))
    field_offset = offset + 251
    subtree, value = tree:add_le(f.LOGGING_DATA_data_245, padded(field_offset, 1))
    field_offset = offset + 252
    subtree, value = tree:add_le(f.LOGGING_DATA_data_246, padded(field_offset, 1))
    field_offset = offset + 253
    subtree, value = tree:add_le(f.LOGGING_DATA_data_247, padded(field_offset, 1))
    field_offset = offset + 254
    subtree, value = tree:add_le(f.LOGGING_DATA_data_248, padded(field_offset, 1))
end
-- dissect payload of message type LOGGING_DATA_ACKED
function payload_fns.payload_267(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_sequence, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_length, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_first_message_offset, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_0, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_1, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_2, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_3, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_4, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_5, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_6, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_7, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_8, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_9, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_10, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_11, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_12, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_13, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_14, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_15, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_16, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_17, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_18, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_19, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_20, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_21, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_22, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_23, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_24, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_25, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_26, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_27, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_28, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_29, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_30, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_31, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_32, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_33, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_34, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_35, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_36, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_37, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_38, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_39, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_40, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_41, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_42, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_43, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_44, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_45, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_46, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_47, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_48, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_49, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_50, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_51, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_52, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_53, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_54, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_55, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_56, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_57, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_58, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_59, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_60, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_61, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_62, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_63, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_64, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_65, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_66, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_67, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_68, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_69, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_70, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_71, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_72, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_73, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_74, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_75, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_76, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_77, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_78, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_79, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_80, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_81, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_82, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_83, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_84, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_85, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_86, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_87, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_88, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_89, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_90, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_91, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_92, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_93, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_94, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_95, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_96, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_97, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_98, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_99, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_100, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_101, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_102, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_103, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_104, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_105, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_106, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_107, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_108, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_109, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_110, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_111, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_112, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_113, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_114, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_115, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_116, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_117, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_118, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_119, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_120, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_121, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_122, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_123, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_124, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_125, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_126, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_127, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_128, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_129, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_130, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_131, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_132, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_133, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_134, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_135, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_136, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_137, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_138, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_139, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_140, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_141, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_142, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_143, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_144, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_145, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_146, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_147, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_148, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_149, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_150, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_151, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_152, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_153, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_154, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_155, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_156, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_157, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_158, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_159, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_160, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_161, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_162, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_163, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_164, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_165, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_166, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_167, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_168, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_169, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_170, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_171, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_172, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_173, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_174, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_175, padded(field_offset, 1))
    field_offset = offset + 182
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_176, padded(field_offset, 1))
    field_offset = offset + 183
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_177, padded(field_offset, 1))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_178, padded(field_offset, 1))
    field_offset = offset + 185
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_179, padded(field_offset, 1))
    field_offset = offset + 186
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_180, padded(field_offset, 1))
    field_offset = offset + 187
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_181, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_182, padded(field_offset, 1))
    field_offset = offset + 189
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_183, padded(field_offset, 1))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_184, padded(field_offset, 1))
    field_offset = offset + 191
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_185, padded(field_offset, 1))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_186, padded(field_offset, 1))
    field_offset = offset + 193
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_187, padded(field_offset, 1))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_188, padded(field_offset, 1))
    field_offset = offset + 195
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_189, padded(field_offset, 1))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_190, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_191, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_192, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_193, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_194, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_195, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_196, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_197, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_198, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_199, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_200, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_201, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_202, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_203, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_204, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_205, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_206, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_207, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_208, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_209, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_210, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_211, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_212, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_213, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_214, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_215, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_216, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_217, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_218, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_219, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_220, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_221, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_222, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_223, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_224, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_225, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_226, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_227, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_228, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_229, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_230, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_231, padded(field_offset, 1))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_232, padded(field_offset, 1))
    field_offset = offset + 239
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_233, padded(field_offset, 1))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_234, padded(field_offset, 1))
    field_offset = offset + 241
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_235, padded(field_offset, 1))
    field_offset = offset + 242
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_236, padded(field_offset, 1))
    field_offset = offset + 243
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_237, padded(field_offset, 1))
    field_offset = offset + 244
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_238, padded(field_offset, 1))
    field_offset = offset + 245
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_239, padded(field_offset, 1))
    field_offset = offset + 246
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_240, padded(field_offset, 1))
    field_offset = offset + 247
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_241, padded(field_offset, 1))
    field_offset = offset + 248
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_242, padded(field_offset, 1))
    field_offset = offset + 249
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_243, padded(field_offset, 1))
    field_offset = offset + 250
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_244, padded(field_offset, 1))
    field_offset = offset + 251
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_245, padded(field_offset, 1))
    field_offset = offset + 252
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_246, padded(field_offset, 1))
    field_offset = offset + 253
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_247, padded(field_offset, 1))
    field_offset = offset + 254
    subtree, value = tree:add_le(f.LOGGING_DATA_ACKED_data_248, padded(field_offset, 1))
end
-- dissect payload of message type LOGGING_ACK
function payload_fns.payload_268(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.LOGGING_ACK_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.LOGGING_ACK_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.LOGGING_ACK_sequence, padded(field_offset, 2))
end
-- dissect payload of message type VIDEO_STREAM_INFORMATION
function payload_fns.payload_269(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 213 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 213)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 18
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_stream_id, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_count, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_flags, padded(field_offset, 2))
    dissect_flags_VIDEO_STREAM_STATUS_FLAGS(subtree, "VIDEO_STREAM_INFORMATION_flags", value)
    field_offset = offset + 0
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_framerate, padded(field_offset, 4))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_resolution_h, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_resolution_v, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_bitrate, padded(field_offset, 4))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_rotation, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_hfov, padded(field_offset, 2))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_name, padded(field_offset, 32))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.VIDEO_STREAM_INFORMATION_uri, padded(field_offset, 160))
end
-- dissect payload of message type VIDEO_STREAM_STATUS
function payload_fns.payload_270(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 19 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 19)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 18
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_stream_id, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_flags, padded(field_offset, 2))
    dissect_flags_VIDEO_STREAM_STATUS_FLAGS(subtree, "VIDEO_STREAM_STATUS_flags", value)
    field_offset = offset + 0
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_framerate, padded(field_offset, 4))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_resolution_h, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_resolution_v, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_bitrate, padded(field_offset, 4))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_rotation, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.VIDEO_STREAM_STATUS_hfov, padded(field_offset, 2))
end
-- dissect payload of message type CAMERA_FOV_STATUS
function payload_fns.payload_271(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 52 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 52)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_lat_camera, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_lon_camera, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_alt_camera, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_lat_image, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_lon_image, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_alt_image, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_q_0, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_q_1, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_q_2, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_q_3, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_hfov, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.CAMERA_FOV_STATUS_vfov, padded(field_offset, 4))
end
-- dissect payload of message type CAMERA_TRACKING_IMAGE_STATUS
function payload_fns.payload_275(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 31 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 31)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_tracking_status, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_tracking_mode, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_target_data, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_point_x, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_point_y, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_radius, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_x, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_y, padded(field_offset, 4))
end
-- dissect payload of message type CAMERA_TRACKING_GEO_STATUS
function payload_fns.payload_276(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 49 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 49)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 48
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_tracking_status, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_lat, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_lon, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_alt, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_h_acc, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_v_acc, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_n, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_e, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_d, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_acc, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_dist, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_hdg, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_hdg_acc, padded(field_offset, 4))
end
-- dissect payload of message type GIMBAL_MANAGER_INFORMATION
function payload_fns.payload_280(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_cap_flags, padded(field_offset, 4))
    dissect_flags_GIMBAL_MANAGER_CAP_FLAGS(subtree, "GIMBAL_MANAGER_INFORMATION_cap_flags", value)
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_gimbal_device_id, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_roll_min, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_roll_max, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_pitch_min, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_pitch_max, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_yaw_min, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_yaw_max, padded(field_offset, 4))
end
-- dissect payload of message type GIMBAL_MANAGER_STATUS
function payload_fns.payload_281(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 13 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 13)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_STATUS_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_STATUS_flags, padded(field_offset, 4))
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "GIMBAL_MANAGER_STATUS_flags", value)
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_STATUS_gimbal_device_id, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_STATUS_primary_control_sysid, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_STATUS_primary_control_compid, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_STATUS_secondary_control_sysid, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_STATUS_secondary_control_compid, padded(field_offset, 1))
end
-- dissect payload of message type GIMBAL_MANAGER_SET_ATTITUDE
function payload_fns.payload_282(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_target_system, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_flags, padded(field_offset, 4))
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "GIMBAL_MANAGER_SET_ATTITUDE_flags", value)
    field_offset = offset + 34
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_gimbal_device_id, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_0, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_1, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_2, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_3, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_x, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_y, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_z, padded(field_offset, 4))
end
-- dissect payload of message type GIMBAL_DEVICE_INFORMATION
function payload_fns.payload_283(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 144 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 144)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_vendor_name, padded(field_offset, 32))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_model_name, padded(field_offset, 32))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_custom_name, padded(field_offset, 32))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_firmware_version, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_hardware_version, padded(field_offset, 4))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_uid, padded(field_offset, 8))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_cap_flags, padded(field_offset, 2))
    dissect_flags_GIMBAL_DEVICE_CAP_FLAGS(subtree, "GIMBAL_DEVICE_INFORMATION_cap_flags", value)
    field_offset = offset + 46
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_custom_cap_flags, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_roll_min, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_roll_max, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_pitch_min, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_pitch_max, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_yaw_min, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_yaw_max, padded(field_offset, 4))
end
-- dissect payload of message type GIMBAL_DEVICE_SET_ATTITUDE
function payload_fns.payload_284(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_target_component, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_flags, padded(field_offset, 2))
    dissect_flags_GIMBAL_DEVICE_FLAGS(subtree, "GIMBAL_DEVICE_SET_ATTITUDE_flags", value)
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_0, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_1, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_2, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_3, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_x, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_y, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_z, padded(field_offset, 4))
end
-- dissect payload of message type GIMBAL_DEVICE_ATTITUDE_STATUS
function payload_fns.payload_285(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 48 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 48)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 38
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_system, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags, padded(field_offset, 2))
    dissect_flags_GIMBAL_DEVICE_FLAGS(subtree, "GIMBAL_DEVICE_ATTITUDE_STATUS_flags", value)
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_0, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_1, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_2, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_3, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_x, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_y, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_z, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags, padded(field_offset, 4))
    dissect_flags_GIMBAL_DEVICE_ERROR_FLAGS(subtree, "GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags", value)
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_delta_yaw, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_delta_yaw_velocity, padded(field_offset, 4))
end
-- dissect payload of message type AUTOPILOT_STATE_FOR_GIMBAL_DEVICE
function payload_fns.payload_286(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 57 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 57)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 50
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_system, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_time_boot_us, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_estimated_delay_us, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vx, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vy, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vz, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_v_estimated_delay_us, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_feed_forward_angular_velocity_z, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status, padded(field_offset, 2))
    dissect_flags_ESTIMATOR_STATUS_FLAGS(subtree, "AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status", value)
    field_offset = offset + 52
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_landed_state, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_angular_velocity_z, padded(field_offset, 4))
end
-- dissect payload of message type GIMBAL_MANAGER_SET_PITCHYAW
function payload_fns.payload_287(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 23 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 23)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_target_system, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_flags, padded(field_offset, 4))
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "GIMBAL_MANAGER_SET_PITCHYAW_flags", value)
    field_offset = offset + 22
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_gimbal_device_id, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_pitch, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_yaw, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_pitch_rate, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_yaw_rate, padded(field_offset, 4))
end
-- dissect payload of message type GIMBAL_MANAGER_SET_MANUAL_CONTROL
function payload_fns.payload_288(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 23 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 23)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_target_system, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags, padded(field_offset, 4))
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "GIMBAL_MANAGER_SET_MANUAL_CONTROL_flags", value)
    field_offset = offset + 22
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_gimbal_device_id, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_pitch, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_yaw, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_pitch_rate, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GIMBAL_MANAGER_SET_MANUAL_CONTROL_yaw_rate, padded(field_offset, 4))
end
-- dissect payload of message type ESC_INFO
function payload_fns.payload_290(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 46 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 46)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 42
    subtree, value = tree:add_le(f.ESC_INFO_index, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ESC_INFO_time_usec, padded(field_offset, 8))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ESC_INFO_counter, padded(field_offset, 2))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.ESC_INFO_count, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ESC_INFO_connection_type, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.ESC_INFO_info, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.ESC_INFO_failure_flags_0, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ESC_INFO_failure_flags_1, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.ESC_INFO_failure_flags_2, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ESC_INFO_failure_flags_3, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ESC_INFO_error_count_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ESC_INFO_error_count_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ESC_INFO_error_count_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ESC_INFO_error_count_3, padded(field_offset, 4))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.ESC_INFO_temperature_0, padded(field_offset, 2))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ESC_INFO_temperature_1, padded(field_offset, 2))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.ESC_INFO_temperature_2, padded(field_offset, 2))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ESC_INFO_temperature_3, padded(field_offset, 2))
end
-- dissect payload of message type ESC_STATUS
function payload_fns.payload_291(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 57 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 57)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 56
    subtree, value = tree:add_le(f.ESC_STATUS_index, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ESC_STATUS_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ESC_STATUS_rpm_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ESC_STATUS_rpm_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ESC_STATUS_rpm_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ESC_STATUS_rpm_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ESC_STATUS_voltage_0, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ESC_STATUS_voltage_1, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ESC_STATUS_voltage_2, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ESC_STATUS_voltage_3, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ESC_STATUS_current_0, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ESC_STATUS_current_1, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.ESC_STATUS_current_2, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.ESC_STATUS_current_3, padded(field_offset, 4))
end
-- dissect payload of message type WIFI_CONFIG_AP
function payload_fns.payload_299(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 98 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 98)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.WIFI_CONFIG_AP_ssid, padded(field_offset, 32))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.WIFI_CONFIG_AP_password, padded(field_offset, 64))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.WIFI_CONFIG_AP_mode, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.WIFI_CONFIG_AP_response, padded(field_offset, 1))
end
-- dissect payload of message type AIS_VESSEL
function payload_fns.payload_301(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 58 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 58)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.AIS_VESSEL_MMSI, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.AIS_VESSEL_lat, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.AIS_VESSEL_lon, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.AIS_VESSEL_COG, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.AIS_VESSEL_heading, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.AIS_VESSEL_velocity, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.AIS_VESSEL_turn_rate, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.AIS_VESSEL_navigational_status, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.AIS_VESSEL_type, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.AIS_VESSEL_dimension_bow, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.AIS_VESSEL_dimension_stern, padded(field_offset, 2))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.AIS_VESSEL_dimension_port, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.AIS_VESSEL_dimension_starboard, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.AIS_VESSEL_callsign, padded(field_offset, 7))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.AIS_VESSEL_name, padded(field_offset, 20))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.AIS_VESSEL_tslc, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.AIS_VESSEL_flags, padded(field_offset, 2))
    dissect_flags_AIS_FLAGS(subtree, "AIS_VESSEL_flags", value)
end
-- dissect payload of message type UAVCAN_NODE_STATUS
function payload_fns.payload_310(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 17 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 17)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.UAVCAN_NODE_STATUS_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.UAVCAN_NODE_STATUS_uptime_sec, padded(field_offset, 4))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.UAVCAN_NODE_STATUS_health, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.UAVCAN_NODE_STATUS_mode, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.UAVCAN_NODE_STATUS_sub_mode, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.UAVCAN_NODE_STATUS_vendor_specific_status_code, padded(field_offset, 2))
end
-- dissect payload of message type UAVCAN_NODE_INFO
function payload_fns.payload_311(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 116 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 116)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_uptime_sec, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_name, padded(field_offset, 80))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_version_major, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_version_minor, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_0, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_1, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_2, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_3, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_4, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_5, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_6, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_7, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_8, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_9, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_10, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_11, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_12, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_13, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_14, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_15, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_sw_version_major, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_sw_version_minor, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.UAVCAN_NODE_INFO_sw_vcs_commit, padded(field_offset, 4))
end
-- dissect payload of message type PARAM_EXT_REQUEST_READ
function payload_fns.payload_320(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.PARAM_EXT_REQUEST_READ_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.PARAM_EXT_REQUEST_READ_target_component, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PARAM_EXT_REQUEST_READ_param_id, padded(field_offset, 16))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_EXT_REQUEST_READ_param_index, padded(field_offset, 2))
end
-- dissect payload of message type PARAM_EXT_REQUEST_LIST
function payload_fns.payload_321(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_EXT_REQUEST_LIST_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.PARAM_EXT_REQUEST_LIST_target_component, padded(field_offset, 1))
end
-- dissect payload of message type PARAM_EXT_VALUE
function payload_fns.payload_322(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 149 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 149)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PARAM_EXT_VALUE_param_id, padded(field_offset, 16))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.PARAM_EXT_VALUE_param_value, padded(field_offset, 128))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.PARAM_EXT_VALUE_param_type, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_EXT_VALUE_param_count, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.PARAM_EXT_VALUE_param_index, padded(field_offset, 2))
end
-- dissect payload of message type PARAM_EXT_SET
function payload_fns.payload_323(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 147 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 147)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_EXT_SET_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.PARAM_EXT_SET_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.PARAM_EXT_SET_param_id, padded(field_offset, 16))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.PARAM_EXT_SET_param_value, padded(field_offset, 128))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.PARAM_EXT_SET_param_type, padded(field_offset, 1))
end
-- dissect payload of message type PARAM_EXT_ACK
function payload_fns.payload_324(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 146 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 146)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PARAM_EXT_ACK_param_id, padded(field_offset, 16))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.PARAM_EXT_ACK_param_value, padded(field_offset, 128))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.PARAM_EXT_ACK_param_type, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.PARAM_EXT_ACK_param_result, padded(field_offset, 1))
end
-- dissect payload of message type OBSTACLE_DISTANCE
function payload_fns.payload_330(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 167 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 167)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_time_usec, padded(field_offset, 8))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_sensor_type, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_0, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_1, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_2, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_3, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_4, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_5, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_6, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_7, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_8, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_9, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_10, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_11, padded(field_offset, 2))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_12, padded(field_offset, 2))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_13, padded(field_offset, 2))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_14, padded(field_offset, 2))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_15, padded(field_offset, 2))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_16, padded(field_offset, 2))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_17, padded(field_offset, 2))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_18, padded(field_offset, 2))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_19, padded(field_offset, 2))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_20, padded(field_offset, 2))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_21, padded(field_offset, 2))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_22, padded(field_offset, 2))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_23, padded(field_offset, 2))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_24, padded(field_offset, 2))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_25, padded(field_offset, 2))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_26, padded(field_offset, 2))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_27, padded(field_offset, 2))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_28, padded(field_offset, 2))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_29, padded(field_offset, 2))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_30, padded(field_offset, 2))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_31, padded(field_offset, 2))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_32, padded(field_offset, 2))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_33, padded(field_offset, 2))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_34, padded(field_offset, 2))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_35, padded(field_offset, 2))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_36, padded(field_offset, 2))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_37, padded(field_offset, 2))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_38, padded(field_offset, 2))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_39, padded(field_offset, 2))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_40, padded(field_offset, 2))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_41, padded(field_offset, 2))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_42, padded(field_offset, 2))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_43, padded(field_offset, 2))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_44, padded(field_offset, 2))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_45, padded(field_offset, 2))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_46, padded(field_offset, 2))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_47, padded(field_offset, 2))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_48, padded(field_offset, 2))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_49, padded(field_offset, 2))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_50, padded(field_offset, 2))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_51, padded(field_offset, 2))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_52, padded(field_offset, 2))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_53, padded(field_offset, 2))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_54, padded(field_offset, 2))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_55, padded(field_offset, 2))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_56, padded(field_offset, 2))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_57, padded(field_offset, 2))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_58, padded(field_offset, 2))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_59, padded(field_offset, 2))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_60, padded(field_offset, 2))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_61, padded(field_offset, 2))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_62, padded(field_offset, 2))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_63, padded(field_offset, 2))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_64, padded(field_offset, 2))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_65, padded(field_offset, 2))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_66, padded(field_offset, 2))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_67, padded(field_offset, 2))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_68, padded(field_offset, 2))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_69, padded(field_offset, 2))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_70, padded(field_offset, 2))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_distances_71, padded(field_offset, 2))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_increment, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_min_distance, padded(field_offset, 2))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_max_distance, padded(field_offset, 2))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_increment_f, padded(field_offset, 4))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_angle_offset, padded(field_offset, 4))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.OBSTACLE_DISTANCE_frame, padded(field_offset, 1))
end
-- dissect payload of message type ODOMETRY
function payload_fns.payload_331(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 233 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 233)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ODOMETRY_time_usec, padded(field_offset, 8))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.ODOMETRY_frame_id, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.ODOMETRY_child_frame_id, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ODOMETRY_x, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ODOMETRY_y, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ODOMETRY_z, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ODOMETRY_q_0, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ODOMETRY_q_1, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ODOMETRY_q_2, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ODOMETRY_q_3, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ODOMETRY_vx, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ODOMETRY_vy, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ODOMETRY_vz, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.ODOMETRY_rollspeed, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.ODOMETRY_pitchspeed, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.ODOMETRY_yawspeed, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_0, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_1, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_2, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_3, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_4, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_5, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_6, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_7, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_8, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_9, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_10, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_11, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_12, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_13, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_14, padded(field_offset, 4))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_15, padded(field_offset, 4))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_16, padded(field_offset, 4))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_17, padded(field_offset, 4))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_18, padded(field_offset, 4))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_19, padded(field_offset, 4))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.ODOMETRY_pose_covariance_20, padded(field_offset, 4))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_0, padded(field_offset, 4))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_1, padded(field_offset, 4))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_2, padded(field_offset, 4))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_3, padded(field_offset, 4))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_4, padded(field_offset, 4))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_5, padded(field_offset, 4))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_6, padded(field_offset, 4))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_7, padded(field_offset, 4))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_8, padded(field_offset, 4))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_9, padded(field_offset, 4))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_10, padded(field_offset, 4))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_11, padded(field_offset, 4))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_12, padded(field_offset, 4))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_13, padded(field_offset, 4))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_14, padded(field_offset, 4))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_15, padded(field_offset, 4))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_16, padded(field_offset, 4))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_17, padded(field_offset, 4))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_18, padded(field_offset, 4))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_19, padded(field_offset, 4))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.ODOMETRY_velocity_covariance_20, padded(field_offset, 4))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.ODOMETRY_reset_counter, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.ODOMETRY_estimator_type, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.ODOMETRY_quality, padded(field_offset, 1))
end
-- dissect payload of message type TRAJECTORY_REPRESENTATION_WAYPOINTS
function payload_fns.payload_332(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 239 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 239)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_time_usec, padded(field_offset, 8))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_valid_points, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_x_4, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_0, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_1, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_2, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_3, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_y_4, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_0, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_1, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_2, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_3, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_z_4, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_0, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_1, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_2, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_3, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_x_4, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_0, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_1, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_2, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_3, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_y_4, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_0, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_1, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_2, padded(field_offset, 4))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_3, padded(field_offset, 4))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_z_4, padded(field_offset, 4))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_0, padded(field_offset, 4))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_1, padded(field_offset, 4))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_2, padded(field_offset, 4))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_3, padded(field_offset, 4))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_x_4, padded(field_offset, 4))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_0, padded(field_offset, 4))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_1, padded(field_offset, 4))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_2, padded(field_offset, 4))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_3, padded(field_offset, 4))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_y_4, padded(field_offset, 4))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_0, padded(field_offset, 4))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_1, padded(field_offset, 4))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_2, padded(field_offset, 4))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_3, padded(field_offset, 4))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_acc_z_4, padded(field_offset, 4))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_0, padded(field_offset, 4))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_1, padded(field_offset, 4))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_2, padded(field_offset, 4))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_3, padded(field_offset, 4))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_pos_yaw_4, padded(field_offset, 4))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_0, padded(field_offset, 4))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_1, padded(field_offset, 4))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_2, padded(field_offset, 4))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_3, padded(field_offset, 4))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_vel_yaw_4, padded(field_offset, 4))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_0, padded(field_offset, 2))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_1, padded(field_offset, 2))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_2, padded(field_offset, 2))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_3, padded(field_offset, 2))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_WAYPOINTS_command_4, padded(field_offset, 2))
end
-- dissect payload of message type TRAJECTORY_REPRESENTATION_BEZIER
function payload_fns.payload_333(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 109 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 109)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_time_usec, padded(field_offset, 8))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_valid_points, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_0, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_1, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_2, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_3, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_x_4, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_0, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_1, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_2, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_3, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_y_4, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_0, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_1, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_2, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_3, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_z_4, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_delta_0, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_delta_1, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_delta_2, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_delta_3, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_delta_4, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_0, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_1, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_2, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_3, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.TRAJECTORY_REPRESENTATION_BEZIER_pos_yaw_4, padded(field_offset, 4))
end
-- dissect payload of message type CELLULAR_STATUS
function payload_fns.payload_334(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 10 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 10)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 6
    subtree, value = tree:add_le(f.CELLULAR_STATUS_status, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.CELLULAR_STATUS_failure_reason, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CELLULAR_STATUS_type, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.CELLULAR_STATUS_quality, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CELLULAR_STATUS_mcc, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.CELLULAR_STATUS_mnc, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CELLULAR_STATUS_lac, padded(field_offset, 2))
end
-- dissect payload of message type ISBD_LINK_STATUS
function payload_fns.payload_335(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_timestamp, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_last_heartbeat, padded(field_offset, 8))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_failed_sessions, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_successful_sessions, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_signal_quality, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_ring_pending, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_tx_session_pending, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.ISBD_LINK_STATUS_rx_session_pending, padded(field_offset, 1))
end
-- dissect payload of message type CELLULAR_CONFIG
function payload_fns.payload_336(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 84 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 84)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_enable_lte, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_enable_pin, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_pin, padded(field_offset, 16))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_new_pin, padded(field_offset, 16))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_apn, padded(field_offset, 32))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_puk, padded(field_offset, 16))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_roaming, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.CELLULAR_CONFIG_response, padded(field_offset, 1))
end
-- dissect payload of message type RAW_RPM
function payload_fns.payload_339(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RAW_RPM_index, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RAW_RPM_frequency, padded(field_offset, 4))
end
-- dissect payload of message type UTM_GLOBAL_POSITION
function payload_fns.payload_340(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 70 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 70)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_time, padded(field_offset, 8))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_0, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_1, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_2, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_3, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_4, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_5, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_6, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_7, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_8, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_9, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_10, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_11, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_12, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_13, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_14, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_15, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_16, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_17, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_lat, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_lon, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_alt, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_relative_alt, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_vx, padded(field_offset, 2))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_vy, padded(field_offset, 2))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_vz, padded(field_offset, 2))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_h_acc, padded(field_offset, 2))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_v_acc, padded(field_offset, 2))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_vel_acc, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_next_lat, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_next_lon, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_next_alt, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_update_rate, padded(field_offset, 2))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_flight_state, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.UTM_GLOBAL_POSITION_flags, padded(field_offset, 1))
    dissect_flags_UTM_DATA_AVAIL_FLAGS(subtree, "UTM_GLOBAL_POSITION_flags", value)
end
-- dissect payload of message type DEBUG_FLOAT_ARRAY
function payload_fns.payload_350(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 252 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 252)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_time_usec, padded(field_offset, 8))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_name, padded(field_offset, 10))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_array_id, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_0, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_1, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_2, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_3, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_4, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_5, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_6, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_7, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_8, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_9, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_10, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_11, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_12, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_13, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_14, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_15, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_16, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_17, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_18, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_19, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_20, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_21, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_22, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_23, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_24, padded(field_offset, 4))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_25, padded(field_offset, 4))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_26, padded(field_offset, 4))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_27, padded(field_offset, 4))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_28, padded(field_offset, 4))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_29, padded(field_offset, 4))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_30, padded(field_offset, 4))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_31, padded(field_offset, 4))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_32, padded(field_offset, 4))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_33, padded(field_offset, 4))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_34, padded(field_offset, 4))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_35, padded(field_offset, 4))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_36, padded(field_offset, 4))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_37, padded(field_offset, 4))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_38, padded(field_offset, 4))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_39, padded(field_offset, 4))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_40, padded(field_offset, 4))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_41, padded(field_offset, 4))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_42, padded(field_offset, 4))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_43, padded(field_offset, 4))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_44, padded(field_offset, 4))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_45, padded(field_offset, 4))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_46, padded(field_offset, 4))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_47, padded(field_offset, 4))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_48, padded(field_offset, 4))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_49, padded(field_offset, 4))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_50, padded(field_offset, 4))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_51, padded(field_offset, 4))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_52, padded(field_offset, 4))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_53, padded(field_offset, 4))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_54, padded(field_offset, 4))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_55, padded(field_offset, 4))
    field_offset = offset + 244
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_56, padded(field_offset, 4))
    field_offset = offset + 248
    subtree, value = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_57, padded(field_offset, 4))
end
-- dissect payload of message type ORBIT_EXECUTION_STATUS
function payload_fns.payload_360(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 25 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 25)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ORBIT_EXECUTION_STATUS_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ORBIT_EXECUTION_STATUS_radius, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ORBIT_EXECUTION_STATUS_frame, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ORBIT_EXECUTION_STATUS_x, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ORBIT_EXECUTION_STATUS_y, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ORBIT_EXECUTION_STATUS_z, padded(field_offset, 4))
end
-- dissect payload of message type SMART_BATTERY_INFO
function payload_fns.payload_370(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 109 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 109)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 18
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_id, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_battery_function, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_type, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_capacity_full_specification, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_capacity_full, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_cycle_count, padded(field_offset, 2))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_serial_number, padded(field_offset, 16))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_device_name, padded(field_offset, 50))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_weight, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_discharge_minimum_voltage, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_charging_minimum_voltage, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_resting_minimum_voltage, padded(field_offset, 2))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_charging_maximum_voltage, padded(field_offset, 2))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_cells_in_series, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_discharge_maximum_current, padded(field_offset, 4))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_discharge_maximum_burst_current, padded(field_offset, 4))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.SMART_BATTERY_INFO_manufacture_date, padded(field_offset, 11))
end
-- dissect payload of message type GENERATOR_STATUS
function payload_fns.payload_373(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.GENERATOR_STATUS_status, padded(field_offset, 8))
    dissect_flags_MAV_GENERATOR_STATUS_FLAG(subtree, "GENERATOR_STATUS_status", value)
    field_offset = offset + 36
    subtree, value = tree:add_le(f.GENERATOR_STATUS_generator_speed, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.GENERATOR_STATUS_battery_current, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.GENERATOR_STATUS_load_current, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.GENERATOR_STATUS_power_generated, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.GENERATOR_STATUS_bus_voltage, padded(field_offset, 4))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.GENERATOR_STATUS_rectifier_temperature, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.GENERATOR_STATUS_bat_current_setpoint, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.GENERATOR_STATUS_generator_temperature, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.GENERATOR_STATUS_runtime, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.GENERATOR_STATUS_time_until_maintenance, padded(field_offset, 4))
end
-- dissect payload of message type ACTUATOR_OUTPUT_STATUS
function payload_fns.payload_375(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 140 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 140)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_active, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_0, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_1, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_2, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_3, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_4, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_5, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_6, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_7, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_8, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_9, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_10, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_11, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_12, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_13, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_14, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_15, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_16, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_17, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_18, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_19, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_20, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_21, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_22, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_23, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_24, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_25, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_26, padded(field_offset, 4))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_27, padded(field_offset, 4))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_28, padded(field_offset, 4))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_29, padded(field_offset, 4))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_30, padded(field_offset, 4))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_31, padded(field_offset, 4))
end
-- dissect payload of message type TIME_ESTIMATE_TO_TARGET
function payload_fns.payload_380(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TIME_ESTIMATE_TO_TARGET_safe_return, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.TIME_ESTIMATE_TO_TARGET_land, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TIME_ESTIMATE_TO_TARGET_mission_next_item, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.TIME_ESTIMATE_TO_TARGET_mission_end, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TIME_ESTIMATE_TO_TARGET_commanded_action, padded(field_offset, 4))
end
-- dissect payload of message type TUNNEL
function payload_fns.payload_385(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 133 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 133)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 2
    subtree, value = tree:add_le(f.TUNNEL_target_system, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.TUNNEL_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.TUNNEL_payload_type, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.TUNNEL_payload_length, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.TUNNEL_payload_0, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.TUNNEL_payload_1, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.TUNNEL_payload_2, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.TUNNEL_payload_3, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.TUNNEL_payload_4, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.TUNNEL_payload_5, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.TUNNEL_payload_6, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.TUNNEL_payload_7, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.TUNNEL_payload_8, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.TUNNEL_payload_9, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.TUNNEL_payload_10, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.TUNNEL_payload_11, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.TUNNEL_payload_12, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.TUNNEL_payload_13, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.TUNNEL_payload_14, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.TUNNEL_payload_15, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.TUNNEL_payload_16, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.TUNNEL_payload_17, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.TUNNEL_payload_18, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.TUNNEL_payload_19, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.TUNNEL_payload_20, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.TUNNEL_payload_21, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.TUNNEL_payload_22, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.TUNNEL_payload_23, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.TUNNEL_payload_24, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.TUNNEL_payload_25, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.TUNNEL_payload_26, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.TUNNEL_payload_27, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.TUNNEL_payload_28, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.TUNNEL_payload_29, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.TUNNEL_payload_30, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.TUNNEL_payload_31, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.TUNNEL_payload_32, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.TUNNEL_payload_33, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.TUNNEL_payload_34, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.TUNNEL_payload_35, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.TUNNEL_payload_36, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.TUNNEL_payload_37, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.TUNNEL_payload_38, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.TUNNEL_payload_39, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.TUNNEL_payload_40, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.TUNNEL_payload_41, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.TUNNEL_payload_42, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.TUNNEL_payload_43, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.TUNNEL_payload_44, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.TUNNEL_payload_45, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.TUNNEL_payload_46, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.TUNNEL_payload_47, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.TUNNEL_payload_48, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.TUNNEL_payload_49, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.TUNNEL_payload_50, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.TUNNEL_payload_51, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.TUNNEL_payload_52, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.TUNNEL_payload_53, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.TUNNEL_payload_54, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.TUNNEL_payload_55, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.TUNNEL_payload_56, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.TUNNEL_payload_57, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.TUNNEL_payload_58, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.TUNNEL_payload_59, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.TUNNEL_payload_60, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.TUNNEL_payload_61, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.TUNNEL_payload_62, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.TUNNEL_payload_63, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.TUNNEL_payload_64, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.TUNNEL_payload_65, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.TUNNEL_payload_66, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.TUNNEL_payload_67, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.TUNNEL_payload_68, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.TUNNEL_payload_69, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.TUNNEL_payload_70, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.TUNNEL_payload_71, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.TUNNEL_payload_72, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.TUNNEL_payload_73, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.TUNNEL_payload_74, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.TUNNEL_payload_75, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.TUNNEL_payload_76, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.TUNNEL_payload_77, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.TUNNEL_payload_78, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.TUNNEL_payload_79, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.TUNNEL_payload_80, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.TUNNEL_payload_81, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.TUNNEL_payload_82, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.TUNNEL_payload_83, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.TUNNEL_payload_84, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.TUNNEL_payload_85, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.TUNNEL_payload_86, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.TUNNEL_payload_87, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.TUNNEL_payload_88, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.TUNNEL_payload_89, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.TUNNEL_payload_90, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.TUNNEL_payload_91, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.TUNNEL_payload_92, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.TUNNEL_payload_93, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.TUNNEL_payload_94, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.TUNNEL_payload_95, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.TUNNEL_payload_96, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.TUNNEL_payload_97, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.TUNNEL_payload_98, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.TUNNEL_payload_99, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.TUNNEL_payload_100, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.TUNNEL_payload_101, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.TUNNEL_payload_102, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.TUNNEL_payload_103, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.TUNNEL_payload_104, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.TUNNEL_payload_105, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.TUNNEL_payload_106, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.TUNNEL_payload_107, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.TUNNEL_payload_108, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.TUNNEL_payload_109, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.TUNNEL_payload_110, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.TUNNEL_payload_111, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.TUNNEL_payload_112, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.TUNNEL_payload_113, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.TUNNEL_payload_114, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.TUNNEL_payload_115, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.TUNNEL_payload_116, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.TUNNEL_payload_117, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.TUNNEL_payload_118, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.TUNNEL_payload_119, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.TUNNEL_payload_120, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.TUNNEL_payload_121, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.TUNNEL_payload_122, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.TUNNEL_payload_123, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.TUNNEL_payload_124, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.TUNNEL_payload_125, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.TUNNEL_payload_126, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.TUNNEL_payload_127, padded(field_offset, 1))
end
-- dissect payload of message type CAN_FRAME
function payload_fns.payload_386(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAN_FRAME_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.CAN_FRAME_target_component, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.CAN_FRAME_bus, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.CAN_FRAME_len, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAN_FRAME_id, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAN_FRAME_data_0, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.CAN_FRAME_data_1, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.CAN_FRAME_data_2, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.CAN_FRAME_data_3, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAN_FRAME_data_4, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.CAN_FRAME_data_5, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.CAN_FRAME_data_6, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.CAN_FRAME_data_7, padded(field_offset, 1))
end
-- dissect payload of message type ONBOARD_COMPUTER_STATUS
function payload_fns.payload_390(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 238 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 238)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_uptime, padded(field_offset, 4))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_type, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_0, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_1, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_2, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_3, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_4, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_5, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_6, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_cores_7, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_0, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_1, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_2, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_3, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_4, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_5, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_6, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_7, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_8, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_cpu_combined_9, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_cores_0, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_cores_1, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_cores_2, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_cores_3, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_0, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_1, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_2, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_3, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_4, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_5, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_6, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_7, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_8, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_gpu_combined_9, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_board, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_0, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_1, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_2, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_3, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_4, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_5, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_6, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_temperature_core_7, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_fan_speed_0, padded(field_offset, 2))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_fan_speed_1, padded(field_offset, 2))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_fan_speed_2, padded(field_offset, 2))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_fan_speed_3, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_ram_usage, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_ram_total, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_type_0, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_type_1, padded(field_offset, 4))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_type_2, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_type_3, padded(field_offset, 4))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_usage_0, padded(field_offset, 4))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_usage_1, padded(field_offset, 4))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_usage_2, padded(field_offset, 4))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_usage_3, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_total_0, padded(field_offset, 4))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_total_1, padded(field_offset, 4))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_total_2, padded(field_offset, 4))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_storage_total_3, padded(field_offset, 4))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_type_0, padded(field_offset, 4))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_type_1, padded(field_offset, 4))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_type_2, padded(field_offset, 4))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_type_3, padded(field_offset, 4))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_type_4, padded(field_offset, 4))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_type_5, padded(field_offset, 4))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_rate_0, padded(field_offset, 4))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_rate_1, padded(field_offset, 4))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_rate_2, padded(field_offset, 4))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_rate_3, padded(field_offset, 4))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_rate_4, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_rate_5, padded(field_offset, 4))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_rate_0, padded(field_offset, 4))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_rate_1, padded(field_offset, 4))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_rate_2, padded(field_offset, 4))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_rate_3, padded(field_offset, 4))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_rate_4, padded(field_offset, 4))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_rate_5, padded(field_offset, 4))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_max_0, padded(field_offset, 4))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_max_1, padded(field_offset, 4))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_max_2, padded(field_offset, 4))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_max_3, padded(field_offset, 4))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_max_4, padded(field_offset, 4))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_tx_max_5, padded(field_offset, 4))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_max_0, padded(field_offset, 4))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_max_1, padded(field_offset, 4))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_max_2, padded(field_offset, 4))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_max_3, padded(field_offset, 4))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_max_4, padded(field_offset, 4))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.ONBOARD_COMPUTER_STATUS_link_rx_max_5, padded(field_offset, 4))
end
-- dissect payload of message type COMPONENT_INFORMATION
function payload_fns.payload_395(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 212 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 212)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMPONENT_INFORMATION_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMPONENT_INFORMATION_general_metadata_file_crc, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.COMPONENT_INFORMATION_general_metadata_uri, padded(field_offset, 100))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMPONENT_INFORMATION_peripherals_metadata_file_crc, padded(field_offset, 4))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.COMPONENT_INFORMATION_peripherals_metadata_uri, padded(field_offset, 100))
end
-- dissect payload of message type COMPONENT_METADATA
function payload_fns.payload_397(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 108 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 108)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.COMPONENT_METADATA_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.COMPONENT_METADATA_file_crc, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.COMPONENT_METADATA_uri, padded(field_offset, 100))
end
-- dissect payload of message type PLAY_TUNE_V2
function payload_fns.payload_400(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 254 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 254)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PLAY_TUNE_V2_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.PLAY_TUNE_V2_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PLAY_TUNE_V2_format, padded(field_offset, 4))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.PLAY_TUNE_V2_tune, padded(field_offset, 248))
end
-- dissect payload of message type SUPPORTED_TUNES
function payload_fns.payload_401(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.SUPPORTED_TUNES_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.SUPPORTED_TUNES_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.SUPPORTED_TUNES_format, padded(field_offset, 4))
end
-- dissect payload of message type EVENT
function payload_fns.payload_410(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 10
    subtree, value = tree:add_le(f.EVENT_destination_component, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.EVENT_destination_system, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.EVENT_id, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.EVENT_event_time_boot_ms, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.EVENT_sequence, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.EVENT_log_levels, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.EVENT_arguments_0, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.EVENT_arguments_1, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.EVENT_arguments_2, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.EVENT_arguments_3, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.EVENT_arguments_4, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.EVENT_arguments_5, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.EVENT_arguments_6, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.EVENT_arguments_7, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.EVENT_arguments_8, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.EVENT_arguments_9, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.EVENT_arguments_10, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.EVENT_arguments_11, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.EVENT_arguments_12, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.EVENT_arguments_13, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.EVENT_arguments_14, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.EVENT_arguments_15, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.EVENT_arguments_16, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.EVENT_arguments_17, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.EVENT_arguments_18, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.EVENT_arguments_19, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.EVENT_arguments_20, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.EVENT_arguments_21, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.EVENT_arguments_22, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.EVENT_arguments_23, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.EVENT_arguments_24, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.EVENT_arguments_25, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.EVENT_arguments_26, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.EVENT_arguments_27, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.EVENT_arguments_28, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.EVENT_arguments_29, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.EVENT_arguments_30, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.EVENT_arguments_31, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.EVENT_arguments_32, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.EVENT_arguments_33, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.EVENT_arguments_34, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.EVENT_arguments_35, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.EVENT_arguments_36, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.EVENT_arguments_37, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.EVENT_arguments_38, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.EVENT_arguments_39, padded(field_offset, 1))
end
-- dissect payload of message type CURRENT_EVENT_SEQUENCE
function payload_fns.payload_411(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CURRENT_EVENT_SEQUENCE_sequence, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.CURRENT_EVENT_SEQUENCE_flags, padded(field_offset, 1))
    dissect_flags_MAV_EVENT_CURRENT_SEQUENCE_FLAGS(subtree, "CURRENT_EVENT_SEQUENCE_flags", value)
end
-- dissect payload of message type REQUEST_EVENT
function payload_fns.payload_412(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.REQUEST_EVENT_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.REQUEST_EVENT_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.REQUEST_EVENT_first_sequence, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.REQUEST_EVENT_last_sequence, padded(field_offset, 2))
end
-- dissect payload of message type RESPONSE_EVENT_ERROR
function payload_fns.payload_413(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 7 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 7)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.RESPONSE_EVENT_ERROR_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.RESPONSE_EVENT_ERROR_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.RESPONSE_EVENT_ERROR_sequence, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.RESPONSE_EVENT_ERROR_sequence_oldest_available, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.RESPONSE_EVENT_ERROR_reason, padded(field_offset, 1))
end
-- dissect payload of message type CANFD_FRAME
function payload_fns.payload_387(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 72 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 72)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CANFD_FRAME_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.CANFD_FRAME_target_component, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.CANFD_FRAME_bus, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.CANFD_FRAME_len, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CANFD_FRAME_id, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CANFD_FRAME_data_0, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.CANFD_FRAME_data_1, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.CANFD_FRAME_data_2, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.CANFD_FRAME_data_3, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CANFD_FRAME_data_4, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.CANFD_FRAME_data_5, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.CANFD_FRAME_data_6, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.CANFD_FRAME_data_7, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CANFD_FRAME_data_8, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.CANFD_FRAME_data_9, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.CANFD_FRAME_data_10, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.CANFD_FRAME_data_11, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CANFD_FRAME_data_12, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.CANFD_FRAME_data_13, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.CANFD_FRAME_data_14, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.CANFD_FRAME_data_15, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CANFD_FRAME_data_16, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.CANFD_FRAME_data_17, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.CANFD_FRAME_data_18, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.CANFD_FRAME_data_19, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CANFD_FRAME_data_20, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.CANFD_FRAME_data_21, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.CANFD_FRAME_data_22, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.CANFD_FRAME_data_23, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.CANFD_FRAME_data_24, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.CANFD_FRAME_data_25, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.CANFD_FRAME_data_26, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.CANFD_FRAME_data_27, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.CANFD_FRAME_data_28, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.CANFD_FRAME_data_29, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.CANFD_FRAME_data_30, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.CANFD_FRAME_data_31, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.CANFD_FRAME_data_32, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.CANFD_FRAME_data_33, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.CANFD_FRAME_data_34, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.CANFD_FRAME_data_35, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.CANFD_FRAME_data_36, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.CANFD_FRAME_data_37, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.CANFD_FRAME_data_38, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.CANFD_FRAME_data_39, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.CANFD_FRAME_data_40, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.CANFD_FRAME_data_41, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.CANFD_FRAME_data_42, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.CANFD_FRAME_data_43, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.CANFD_FRAME_data_44, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.CANFD_FRAME_data_45, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.CANFD_FRAME_data_46, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.CANFD_FRAME_data_47, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.CANFD_FRAME_data_48, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.CANFD_FRAME_data_49, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.CANFD_FRAME_data_50, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.CANFD_FRAME_data_51, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.CANFD_FRAME_data_52, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.CANFD_FRAME_data_53, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.CANFD_FRAME_data_54, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.CANFD_FRAME_data_55, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.CANFD_FRAME_data_56, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.CANFD_FRAME_data_57, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.CANFD_FRAME_data_58, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.CANFD_FRAME_data_59, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.CANFD_FRAME_data_60, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.CANFD_FRAME_data_61, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.CANFD_FRAME_data_62, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.CANFD_FRAME_data_63, padded(field_offset, 1))
end
-- dissect payload of message type CAN_FILTER_MODIFY
function payload_fns.payload_388(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 32
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_target_system, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_target_component, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_bus, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_operation, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_num_ids, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_0, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_1, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_2, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_3, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_4, padded(field_offset, 2))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_5, padded(field_offset, 2))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_6, padded(field_offset, 2))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_7, padded(field_offset, 2))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_8, padded(field_offset, 2))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_9, padded(field_offset, 2))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_10, padded(field_offset, 2))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_11, padded(field_offset, 2))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_12, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_13, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_14, padded(field_offset, 2))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.CAN_FILTER_MODIFY_ids_15, padded(field_offset, 2))
end
-- dissect payload of message type WHEEL_DISTANCE
function payload_fns.payload_9000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 137 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 137)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_time_usec, padded(field_offset, 8))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_count, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_0, padded(field_offset, 8))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_1, padded(field_offset, 8))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_2, padded(field_offset, 8))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_3, padded(field_offset, 8))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_4, padded(field_offset, 8))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_5, padded(field_offset, 8))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_6, padded(field_offset, 8))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_7, padded(field_offset, 8))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_8, padded(field_offset, 8))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_9, padded(field_offset, 8))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_10, padded(field_offset, 8))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_11, padded(field_offset, 8))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_12, padded(field_offset, 8))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_13, padded(field_offset, 8))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_14, padded(field_offset, 8))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.WHEEL_DISTANCE_distance_15, padded(field_offset, 8))
end
-- dissect payload of message type WINCH_STATUS
function payload_fns.payload_9005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 34 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 34)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.WINCH_STATUS_time_usec, padded(field_offset, 8))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.WINCH_STATUS_line_length, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.WINCH_STATUS_speed, padded(field_offset, 4))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.WINCH_STATUS_tension, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.WINCH_STATUS_voltage, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.WINCH_STATUS_current, padded(field_offset, 4))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.WINCH_STATUS_temperature, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.WINCH_STATUS_status, padded(field_offset, 4))
    dissect_flags_MAV_WINCH_STATUS_FLAG(subtree, "WINCH_STATUS_status", value)
end
-- dissect payload of message type OPEN_DRONE_ID_BASIC_ID
function payload_fns.payload_12900(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_0, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_1, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_2, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_3, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_4, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_5, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_6, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_7, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_8, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_9, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_10, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_11, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_12, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_13, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_14, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_15, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_16, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_17, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_18, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_19, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_type, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_ua_type, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_0, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_1, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_2, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_3, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_4, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_5, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_6, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_7, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_8, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_9, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_10, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_11, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_12, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_13, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_14, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_15, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_16, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_17, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_18, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_19, padded(field_offset, 1))
end
-- dissect payload of message type OPEN_DRONE_ID_LOCATION
function payload_fns.payload_12901(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 59 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 59)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 30
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_target_system, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_target_component, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_0, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_1, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_2, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_3, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_4, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_5, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_6, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_7, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_8, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_9, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_10, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_11, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_12, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_13, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_14, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_15, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_16, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_17, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_18, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_19, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_status, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_direction, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_speed_horizontal, padded(field_offset, 2))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_speed_vertical, padded(field_offset, 2))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_latitude, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_longitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_altitude_barometric, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_altitude_geodetic, padded(field_offset, 4))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_height_reference, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_height, padded(field_offset, 4))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_horizontal_accuracy, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_vertical_accuracy, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_barometer_accuracy, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_speed_accuracy, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_timestamp, padded(field_offset, 4))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_LOCATION_timestamp_accuracy, padded(field_offset, 1))
end
-- dissect payload of message type OPEN_DRONE_ID_AUTHENTICATION
function payload_fns.payload_12902(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_target_system, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_target_component, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_0, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_1, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_2, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_3, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_4, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_5, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_6, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_7, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_8, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_9, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_10, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_11, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_12, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_13, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_14, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_15, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_16, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_17, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_18, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_19, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_type, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_data_page, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_last_page_index, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_length, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_timestamp, padded(field_offset, 4))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_0, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_1, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_2, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_3, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_4, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_5, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_6, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_7, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_8, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_9, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_10, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_11, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_12, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_13, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_14, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_15, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_16, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_17, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_18, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_19, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_20, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_21, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_22, padded(field_offset, 1))
end
-- dissect payload of message type OPEN_DRONE_ID_SELF_ID
function payload_fns.payload_12903(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 46 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 46)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_0, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_1, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_2, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_3, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_4, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_5, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_6, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_7, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_8, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_9, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_10, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_11, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_12, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_13, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_14, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_15, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_16, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_17, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_18, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_19, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_description_type, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_description, padded(field_offset, 23))
end
-- dissect payload of message type OPEN_DRONE_ID_SYSTEM
function payload_fns.payload_12904(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 28
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_target_system, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_target_component, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_0, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_1, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_2, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_3, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_4, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_5, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_6, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_7, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_8, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_9, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_10, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_11, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_12, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_13, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_14, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_15, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_16, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_17, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_18, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_19, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_location_type, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_classification_type, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_latitude, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_longitude, padded(field_offset, 4))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_count, padded(field_offset, 2))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_radius, padded(field_offset, 2))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_ceiling, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_floor, padded(field_offset, 4))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_category_eu, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_class_eu, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_altitude_geo, padded(field_offset, 4))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_timestamp, padded(field_offset, 4))
end
-- dissect payload of message type OPEN_DRONE_ID_OPERATOR_ID
function payload_fns.payload_12905(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 43 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 43)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_0, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_1, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_2, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_3, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_4, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_5, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_6, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_7, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_8, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_9, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_10, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_11, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_12, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_13, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_14, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_15, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_16, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_17, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_18, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_19, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_operator_id_type, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_operator_id, padded(field_offset, 20))
end
-- dissect payload of message type OPEN_DRONE_ID_MESSAGE_PACK
function payload_fns.payload_12915(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 249 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 249)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_target_system, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_target_component, padded(field_offset, 1))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_0, padded(field_offset, 1))
    field_offset = offset + 3
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_1, padded(field_offset, 1))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_2, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_3, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_4, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_5, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_6, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_7, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_8, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_9, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_10, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_11, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_12, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_13, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_14, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_15, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_16, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_17, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_18, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_19, padded(field_offset, 1))
    field_offset = offset + 22
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_single_message_size, padded(field_offset, 1))
    field_offset = offset + 23
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_msg_pack_size, padded(field_offset, 1))
    field_offset = offset + 24
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_0, padded(field_offset, 1))
    field_offset = offset + 25
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_1, padded(field_offset, 1))
    field_offset = offset + 26
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_2, padded(field_offset, 1))
    field_offset = offset + 27
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_3, padded(field_offset, 1))
    field_offset = offset + 28
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_4, padded(field_offset, 1))
    field_offset = offset + 29
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_5, padded(field_offset, 1))
    field_offset = offset + 30
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_6, padded(field_offset, 1))
    field_offset = offset + 31
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_7, padded(field_offset, 1))
    field_offset = offset + 32
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_8, padded(field_offset, 1))
    field_offset = offset + 33
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_9, padded(field_offset, 1))
    field_offset = offset + 34
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_10, padded(field_offset, 1))
    field_offset = offset + 35
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_11, padded(field_offset, 1))
    field_offset = offset + 36
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_12, padded(field_offset, 1))
    field_offset = offset + 37
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_13, padded(field_offset, 1))
    field_offset = offset + 38
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_14, padded(field_offset, 1))
    field_offset = offset + 39
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_15, padded(field_offset, 1))
    field_offset = offset + 40
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_16, padded(field_offset, 1))
    field_offset = offset + 41
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_17, padded(field_offset, 1))
    field_offset = offset + 42
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_18, padded(field_offset, 1))
    field_offset = offset + 43
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_19, padded(field_offset, 1))
    field_offset = offset + 44
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_20, padded(field_offset, 1))
    field_offset = offset + 45
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_21, padded(field_offset, 1))
    field_offset = offset + 46
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_22, padded(field_offset, 1))
    field_offset = offset + 47
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_23, padded(field_offset, 1))
    field_offset = offset + 48
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_24, padded(field_offset, 1))
    field_offset = offset + 49
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_25, padded(field_offset, 1))
    field_offset = offset + 50
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_26, padded(field_offset, 1))
    field_offset = offset + 51
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_27, padded(field_offset, 1))
    field_offset = offset + 52
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_28, padded(field_offset, 1))
    field_offset = offset + 53
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_29, padded(field_offset, 1))
    field_offset = offset + 54
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_30, padded(field_offset, 1))
    field_offset = offset + 55
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_31, padded(field_offset, 1))
    field_offset = offset + 56
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_32, padded(field_offset, 1))
    field_offset = offset + 57
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_33, padded(field_offset, 1))
    field_offset = offset + 58
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_34, padded(field_offset, 1))
    field_offset = offset + 59
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_35, padded(field_offset, 1))
    field_offset = offset + 60
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_36, padded(field_offset, 1))
    field_offset = offset + 61
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_37, padded(field_offset, 1))
    field_offset = offset + 62
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_38, padded(field_offset, 1))
    field_offset = offset + 63
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_39, padded(field_offset, 1))
    field_offset = offset + 64
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_40, padded(field_offset, 1))
    field_offset = offset + 65
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_41, padded(field_offset, 1))
    field_offset = offset + 66
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_42, padded(field_offset, 1))
    field_offset = offset + 67
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_43, padded(field_offset, 1))
    field_offset = offset + 68
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_44, padded(field_offset, 1))
    field_offset = offset + 69
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_45, padded(field_offset, 1))
    field_offset = offset + 70
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_46, padded(field_offset, 1))
    field_offset = offset + 71
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_47, padded(field_offset, 1))
    field_offset = offset + 72
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_48, padded(field_offset, 1))
    field_offset = offset + 73
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_49, padded(field_offset, 1))
    field_offset = offset + 74
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_50, padded(field_offset, 1))
    field_offset = offset + 75
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_51, padded(field_offset, 1))
    field_offset = offset + 76
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_52, padded(field_offset, 1))
    field_offset = offset + 77
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_53, padded(field_offset, 1))
    field_offset = offset + 78
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_54, padded(field_offset, 1))
    field_offset = offset + 79
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_55, padded(field_offset, 1))
    field_offset = offset + 80
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_56, padded(field_offset, 1))
    field_offset = offset + 81
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_57, padded(field_offset, 1))
    field_offset = offset + 82
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_58, padded(field_offset, 1))
    field_offset = offset + 83
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_59, padded(field_offset, 1))
    field_offset = offset + 84
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_60, padded(field_offset, 1))
    field_offset = offset + 85
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_61, padded(field_offset, 1))
    field_offset = offset + 86
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_62, padded(field_offset, 1))
    field_offset = offset + 87
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_63, padded(field_offset, 1))
    field_offset = offset + 88
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_64, padded(field_offset, 1))
    field_offset = offset + 89
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_65, padded(field_offset, 1))
    field_offset = offset + 90
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_66, padded(field_offset, 1))
    field_offset = offset + 91
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_67, padded(field_offset, 1))
    field_offset = offset + 92
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_68, padded(field_offset, 1))
    field_offset = offset + 93
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_69, padded(field_offset, 1))
    field_offset = offset + 94
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_70, padded(field_offset, 1))
    field_offset = offset + 95
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_71, padded(field_offset, 1))
    field_offset = offset + 96
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_72, padded(field_offset, 1))
    field_offset = offset + 97
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_73, padded(field_offset, 1))
    field_offset = offset + 98
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_74, padded(field_offset, 1))
    field_offset = offset + 99
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_75, padded(field_offset, 1))
    field_offset = offset + 100
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_76, padded(field_offset, 1))
    field_offset = offset + 101
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_77, padded(field_offset, 1))
    field_offset = offset + 102
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_78, padded(field_offset, 1))
    field_offset = offset + 103
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_79, padded(field_offset, 1))
    field_offset = offset + 104
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_80, padded(field_offset, 1))
    field_offset = offset + 105
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_81, padded(field_offset, 1))
    field_offset = offset + 106
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_82, padded(field_offset, 1))
    field_offset = offset + 107
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_83, padded(field_offset, 1))
    field_offset = offset + 108
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_84, padded(field_offset, 1))
    field_offset = offset + 109
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_85, padded(field_offset, 1))
    field_offset = offset + 110
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_86, padded(field_offset, 1))
    field_offset = offset + 111
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_87, padded(field_offset, 1))
    field_offset = offset + 112
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_88, padded(field_offset, 1))
    field_offset = offset + 113
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_89, padded(field_offset, 1))
    field_offset = offset + 114
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_90, padded(field_offset, 1))
    field_offset = offset + 115
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_91, padded(field_offset, 1))
    field_offset = offset + 116
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_92, padded(field_offset, 1))
    field_offset = offset + 117
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_93, padded(field_offset, 1))
    field_offset = offset + 118
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_94, padded(field_offset, 1))
    field_offset = offset + 119
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_95, padded(field_offset, 1))
    field_offset = offset + 120
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_96, padded(field_offset, 1))
    field_offset = offset + 121
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_97, padded(field_offset, 1))
    field_offset = offset + 122
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_98, padded(field_offset, 1))
    field_offset = offset + 123
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_99, padded(field_offset, 1))
    field_offset = offset + 124
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_100, padded(field_offset, 1))
    field_offset = offset + 125
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_101, padded(field_offset, 1))
    field_offset = offset + 126
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_102, padded(field_offset, 1))
    field_offset = offset + 127
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_103, padded(field_offset, 1))
    field_offset = offset + 128
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_104, padded(field_offset, 1))
    field_offset = offset + 129
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_105, padded(field_offset, 1))
    field_offset = offset + 130
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_106, padded(field_offset, 1))
    field_offset = offset + 131
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_107, padded(field_offset, 1))
    field_offset = offset + 132
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_108, padded(field_offset, 1))
    field_offset = offset + 133
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_109, padded(field_offset, 1))
    field_offset = offset + 134
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_110, padded(field_offset, 1))
    field_offset = offset + 135
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_111, padded(field_offset, 1))
    field_offset = offset + 136
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_112, padded(field_offset, 1))
    field_offset = offset + 137
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_113, padded(field_offset, 1))
    field_offset = offset + 138
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_114, padded(field_offset, 1))
    field_offset = offset + 139
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_115, padded(field_offset, 1))
    field_offset = offset + 140
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_116, padded(field_offset, 1))
    field_offset = offset + 141
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_117, padded(field_offset, 1))
    field_offset = offset + 142
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_118, padded(field_offset, 1))
    field_offset = offset + 143
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_119, padded(field_offset, 1))
    field_offset = offset + 144
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_120, padded(field_offset, 1))
    field_offset = offset + 145
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_121, padded(field_offset, 1))
    field_offset = offset + 146
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_122, padded(field_offset, 1))
    field_offset = offset + 147
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_123, padded(field_offset, 1))
    field_offset = offset + 148
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_124, padded(field_offset, 1))
    field_offset = offset + 149
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_125, padded(field_offset, 1))
    field_offset = offset + 150
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_126, padded(field_offset, 1))
    field_offset = offset + 151
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_127, padded(field_offset, 1))
    field_offset = offset + 152
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_128, padded(field_offset, 1))
    field_offset = offset + 153
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_129, padded(field_offset, 1))
    field_offset = offset + 154
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_130, padded(field_offset, 1))
    field_offset = offset + 155
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_131, padded(field_offset, 1))
    field_offset = offset + 156
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_132, padded(field_offset, 1))
    field_offset = offset + 157
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_133, padded(field_offset, 1))
    field_offset = offset + 158
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_134, padded(field_offset, 1))
    field_offset = offset + 159
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_135, padded(field_offset, 1))
    field_offset = offset + 160
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_136, padded(field_offset, 1))
    field_offset = offset + 161
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_137, padded(field_offset, 1))
    field_offset = offset + 162
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_138, padded(field_offset, 1))
    field_offset = offset + 163
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_139, padded(field_offset, 1))
    field_offset = offset + 164
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_140, padded(field_offset, 1))
    field_offset = offset + 165
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_141, padded(field_offset, 1))
    field_offset = offset + 166
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_142, padded(field_offset, 1))
    field_offset = offset + 167
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_143, padded(field_offset, 1))
    field_offset = offset + 168
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_144, padded(field_offset, 1))
    field_offset = offset + 169
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_145, padded(field_offset, 1))
    field_offset = offset + 170
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_146, padded(field_offset, 1))
    field_offset = offset + 171
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_147, padded(field_offset, 1))
    field_offset = offset + 172
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_148, padded(field_offset, 1))
    field_offset = offset + 173
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_149, padded(field_offset, 1))
    field_offset = offset + 174
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_150, padded(field_offset, 1))
    field_offset = offset + 175
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_151, padded(field_offset, 1))
    field_offset = offset + 176
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_152, padded(field_offset, 1))
    field_offset = offset + 177
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_153, padded(field_offset, 1))
    field_offset = offset + 178
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_154, padded(field_offset, 1))
    field_offset = offset + 179
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_155, padded(field_offset, 1))
    field_offset = offset + 180
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_156, padded(field_offset, 1))
    field_offset = offset + 181
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_157, padded(field_offset, 1))
    field_offset = offset + 182
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_158, padded(field_offset, 1))
    field_offset = offset + 183
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_159, padded(field_offset, 1))
    field_offset = offset + 184
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_160, padded(field_offset, 1))
    field_offset = offset + 185
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_161, padded(field_offset, 1))
    field_offset = offset + 186
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_162, padded(field_offset, 1))
    field_offset = offset + 187
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_163, padded(field_offset, 1))
    field_offset = offset + 188
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_164, padded(field_offset, 1))
    field_offset = offset + 189
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_165, padded(field_offset, 1))
    field_offset = offset + 190
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_166, padded(field_offset, 1))
    field_offset = offset + 191
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_167, padded(field_offset, 1))
    field_offset = offset + 192
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_168, padded(field_offset, 1))
    field_offset = offset + 193
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_169, padded(field_offset, 1))
    field_offset = offset + 194
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_170, padded(field_offset, 1))
    field_offset = offset + 195
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_171, padded(field_offset, 1))
    field_offset = offset + 196
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_172, padded(field_offset, 1))
    field_offset = offset + 197
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_173, padded(field_offset, 1))
    field_offset = offset + 198
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_174, padded(field_offset, 1))
    field_offset = offset + 199
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_175, padded(field_offset, 1))
    field_offset = offset + 200
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_176, padded(field_offset, 1))
    field_offset = offset + 201
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_177, padded(field_offset, 1))
    field_offset = offset + 202
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_178, padded(field_offset, 1))
    field_offset = offset + 203
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_179, padded(field_offset, 1))
    field_offset = offset + 204
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_180, padded(field_offset, 1))
    field_offset = offset + 205
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_181, padded(field_offset, 1))
    field_offset = offset + 206
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_182, padded(field_offset, 1))
    field_offset = offset + 207
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_183, padded(field_offset, 1))
    field_offset = offset + 208
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_184, padded(field_offset, 1))
    field_offset = offset + 209
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_185, padded(field_offset, 1))
    field_offset = offset + 210
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_186, padded(field_offset, 1))
    field_offset = offset + 211
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_187, padded(field_offset, 1))
    field_offset = offset + 212
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_188, padded(field_offset, 1))
    field_offset = offset + 213
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_189, padded(field_offset, 1))
    field_offset = offset + 214
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_190, padded(field_offset, 1))
    field_offset = offset + 215
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_191, padded(field_offset, 1))
    field_offset = offset + 216
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_192, padded(field_offset, 1))
    field_offset = offset + 217
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_193, padded(field_offset, 1))
    field_offset = offset + 218
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_194, padded(field_offset, 1))
    field_offset = offset + 219
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_195, padded(field_offset, 1))
    field_offset = offset + 220
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_196, padded(field_offset, 1))
    field_offset = offset + 221
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_197, padded(field_offset, 1))
    field_offset = offset + 222
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_198, padded(field_offset, 1))
    field_offset = offset + 223
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_199, padded(field_offset, 1))
    field_offset = offset + 224
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_200, padded(field_offset, 1))
    field_offset = offset + 225
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_201, padded(field_offset, 1))
    field_offset = offset + 226
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_202, padded(field_offset, 1))
    field_offset = offset + 227
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_203, padded(field_offset, 1))
    field_offset = offset + 228
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_204, padded(field_offset, 1))
    field_offset = offset + 229
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_205, padded(field_offset, 1))
    field_offset = offset + 230
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_206, padded(field_offset, 1))
    field_offset = offset + 231
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_207, padded(field_offset, 1))
    field_offset = offset + 232
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_208, padded(field_offset, 1))
    field_offset = offset + 233
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_209, padded(field_offset, 1))
    field_offset = offset + 234
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_210, padded(field_offset, 1))
    field_offset = offset + 235
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_211, padded(field_offset, 1))
    field_offset = offset + 236
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_212, padded(field_offset, 1))
    field_offset = offset + 237
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_213, padded(field_offset, 1))
    field_offset = offset + 238
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_214, padded(field_offset, 1))
    field_offset = offset + 239
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_215, padded(field_offset, 1))
    field_offset = offset + 240
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_216, padded(field_offset, 1))
    field_offset = offset + 241
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_217, padded(field_offset, 1))
    field_offset = offset + 242
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_218, padded(field_offset, 1))
    field_offset = offset + 243
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_219, padded(field_offset, 1))
    field_offset = offset + 244
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_220, padded(field_offset, 1))
    field_offset = offset + 245
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_221, padded(field_offset, 1))
    field_offset = offset + 246
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_222, padded(field_offset, 1))
    field_offset = offset + 247
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_223, padded(field_offset, 1))
    field_offset = offset + 248
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_224, padded(field_offset, 1))
end
-- dissect payload of message type OPEN_DRONE_ID_ARM_STATUS
function payload_fns.payload_12918(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 51 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 51)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_ARM_STATUS_status, padded(field_offset, 1))
    field_offset = offset + 1
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_ARM_STATUS_error, padded(field_offset, 50))
end
-- dissect payload of message type OPEN_DRONE_ID_SYSTEM_UPDATE
function payload_fns.payload_12919(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 16
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_system, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_component, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_latitude, padded(field_offset, 4))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_longitude, padded(field_offset, 4))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_altitude_geo, padded(field_offset, 4))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_timestamp, padded(field_offset, 4))
end
-- dissect payload of message type HYGROMETER_SENSOR
function payload_fns.payload_12920(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.HYGROMETER_SENSOR_id, padded(field_offset, 1))
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HYGROMETER_SENSOR_temperature, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.HYGROMETER_SENSOR_humidity, padded(field_offset, 2))
end
-- dissect payload of message type HEARTBEAT
function payload_fns.payload_0(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 4
    subtree, value = tree:add_le(f.HEARTBEAT_type, padded(field_offset, 1))
    field_offset = offset + 5
    subtree, value = tree:add_le(f.HEARTBEAT_autopilot, padded(field_offset, 1))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.HEARTBEAT_base_mode, padded(field_offset, 1))
    dissect_flags_MAV_MODE_FLAG(subtree, "HEARTBEAT_base_mode", value)
    field_offset = offset + 0
    subtree, value = tree:add_le(f.HEARTBEAT_custom_mode, padded(field_offset, 4))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.HEARTBEAT_system_status, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.HEARTBEAT_mavlink_version, padded(field_offset, 1))
end
-- dissect payload of message type PROTOCOL_VERSION
function payload_fns.payload_300(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    field_offset = offset + 0
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_version, padded(field_offset, 2))
    field_offset = offset + 2
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_min_version, padded(field_offset, 2))
    field_offset = offset + 4
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_max_version, padded(field_offset, 2))
    field_offset = offset + 6
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_0, padded(field_offset, 1))
    field_offset = offset + 7
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_1, padded(field_offset, 1))
    field_offset = offset + 8
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_2, padded(field_offset, 1))
    field_offset = offset + 9
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_3, padded(field_offset, 1))
    field_offset = offset + 10
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_4, padded(field_offset, 1))
    field_offset = offset + 11
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_5, padded(field_offset, 1))
    field_offset = offset + 12
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_6, padded(field_offset, 1))
    field_offset = offset + 13
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_spec_version_hash_7, padded(field_offset, 1))
    field_offset = offset + 14
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_0, padded(field_offset, 1))
    field_offset = offset + 15
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_1, padded(field_offset, 1))
    field_offset = offset + 16
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_2, padded(field_offset, 1))
    field_offset = offset + 17
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_3, padded(field_offset, 1))
    field_offset = offset + 18
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_4, padded(field_offset, 1))
    field_offset = offset + 19
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_5, padded(field_offset, 1))
    field_offset = offset + 20
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_6, padded(field_offset, 1))
    field_offset = offset + 21
    subtree, value = tree:add_le(f.PROTOCOL_VERSION_library_version_hash_7, padded(field_offset, 1))
end
-- dissector function
function mavlink_proto.dissector(buffer,pinfo,tree)
    local offset = 0
    local msgCount = 0
    
    -- loop through the buffer to extract all the messages in the buffer
    while (offset < buffer:len()) 
    do
        msgCount = msgCount + 1
        local subtree = tree:add (mavlink_proto, buffer(), "MAVLink Protocol ("..buffer:len()..")")

        -- decode protocol version first
        local version = buffer(offset,1):uint()
        local protocolString = ""
    
    	while (true)
		do
            protocolString = protocolVersions[version]
            if (protocolString ~= nil) then
                break
            else
                protocolString = "unknown"
                -- some unknown data found, record the begin offset
                if (unknownFrameBeginOffset == 0) then
                    unknownFrameBeginOffset = offset
                end
               
                offset = offset + 1
                
                if (offset < buffer:len()) then
                    version = buffer(offset,1):uint()
                else
                    -- no magic value found in the whole buffer. print the raw data and exit
                    if (unknownFrameBeginOffset ~= 0) then
                        if (msgCount == 1) then
                            pinfo.cols.info:set("Unknown message")
                        else
                            pinfo.cols.info:append("  Unknown message")
                        end
                        size = offset - unknownFrameBeginOffset
                        subtree:add(f.rawpayload, buffer(unknownFrameBeginOffset,size))
                        unknownFrameBeginOffset = 0
                    end
                    return
                end
            end	
        end
        
        if (unknownFrameBeginOffset ~= 0) then
            pinfo.cols.info:append("Unknown message")
            size = offset - unknownFrameBeginOffset
            subtree:add(f.rawpayload, buffer(unknownFrameBeginOffset,size))
            unknownFrameBeginOffset = 0
            -- jump to next loop
            break
        end
        
        -- some Wireshark decoration
        pinfo.cols.protocol = protocolString

        -- HEADER ----------------------------------------
    
        local msgid
        local length
        local incompatibility_flag

        if (version == 0xfe) then
            if (buffer:len() - 2 - offset > 6) then
                -- normal header
                local header = subtree:add(buffer(offset, 6), "Header")
                header:add(f.magic, buffer(offset,1), version)
                offset = offset + 1
            
                length = buffer(offset,1)
                header:add(f.length, length)
                offset = offset + 1
            
                local sequence = buffer(offset,1)
                header:add(f.sequence, sequence)
                offset = offset + 1
            
                local sysid = buffer(offset,1)
                header:add(f.sysid, sysid)
                offset = offset + 1
        
                local compid = buffer(offset,1)
                header:add(f.compid, compid)
                offset = offset + 1
            
                pinfo.cols.src = "System: "..tostring(sysid:uint())..', Component: '..tostring(compid:uint())
        
                msgid = buffer(offset,1):uint()
                header:add(f.msgid, buffer(offset,1), msgid)
                offset = offset + 1
            else 
                -- handle truncated header
                local hsize = buffer:len() - 2 - offset
                subtree:add(f.rawheader, buffer(offset, hsize))
                offset = offset + hsize
            end
        elseif (version == 0xfd) then
            if (buffer:len() - 2 - offset > 10) then
                -- normal header
                local header = subtree:add(buffer(offset, 10), "Header")
                header:add(f.magic, buffer(offset,1), version)
                offset = offset + 1
                length = buffer(offset,1)
                header:add(f.length, length)
                offset = offset + 1
                incompatibility_flag = buffer(offset,1):uint()
                header:add(f.incompatibility_flag, buffer(offset,1), incompatibility_flag)
                offset = offset + 1
                local compatibility_flag = buffer(offset,1)
                header:add(f.compatibility_flag, compatibility_flag)
                offset = offset + 1
                local sequence = buffer(offset,1)
                header:add(f.sequence, sequence)
                offset = offset + 1
                local sysid = buffer(offset,1)
                header:add(f.sysid, sysid)
                offset = offset + 1
                local compid = buffer(offset,1)
                header:add(f.compid, compid)
                offset = offset + 1
                pinfo.cols.src = "System: "..tostring(sysid:uint())..', Component: '..tostring(compid:uint())
                msgid = buffer(offset,3):le_uint()
                header:add(f.msgid, buffer(offset,3), msgid)
                offset = offset + 3
            else 
                -- handle truncated header
                local hsize = buffer:len() - 2 - offset
                subtree:add(f.rawheader, buffer(offset, hsize))
                offset = offset + hsize
            end
        end


        -- BODY ----------------------------------------
    
        -- dynamically call the type-specific payload dissector    
        local msgnr = msgid
        local dissect_payload_fn = "payload_"..tostring(msgnr)
        local fn = payload_fns[dissect_payload_fn]
        local limit = buffer:len() - 2

        if (length) then
            length = length:uint()
        else
            length = 0
        end

        if (offset + length < limit) then
            limit = offset + length
        end
    
        if (fn == nil) then
            pinfo.cols.info:append ("Unknown message type   ")
            subtree:add_expert_info(PI_MALFORMED, PI_ERROR, "Unknown message type")
            size = buffer:len() - 2 - offset
            subtree:add(f.rawpayload, buffer(offset,size))
            offset = offset + size
        else
            local payload = subtree:add(f.payload, buffer(offset, limit - offset), msgid)
            pinfo.cols.dst:set(messageName[msgid])
            if (msgCount == 1) then
            -- first message should over write the TCP/UDP info
                pinfo.cols.info = messageName[msgid]
            else
                pinfo.cols.info:append("   "..messageName[msgid])
            end
            fn(buffer, payload, msgid, offset, limit, pinfo)
            offset = limit
        end

        -- CRC ----------------------------------------

        local crc = buffer(offset,2)
        subtree:add_le(f.crc, crc)
        offset = offset + 2

        -- SIGNATURE ----------------------------------

        if (version == 0xfd and incompatibility_flag == 0x01) then
            local signature = subtree:add("Signature")

            local link = buffer(offset,1)
            signature:add(f.signature_link, link)
            offset = offset + 1

            local signature_time = buffer(offset,6):le_uint64()
            local time_secs = signature_time / 100000
            local time_nsecs = (signature_time - (time_secs * 100000)) * 10000
            signature:add(f.signature_time, buffer(offset,6), NSTime.new(signature_time_ref + time_secs:tonumber(), time_nsecs:tonumber()))
            offset = offset + 6

            local signature_signature = buffer(offset,6)
            signature:add(f.signature_signature, signature_signature)
            offset = offset + 6
        end

    end
end


   
-- bind protocol dissector to USER0 linktype

wtap_encap = DissectorTable.get("wtap_encap")
wtap_encap:add(wtap.USER0, mavlink_proto)

-- bind protocol dissector to port 14550 and 14580

local udp_dissector_table = DissectorTable.get("udp.port")
udp_dissector_table:add(14552, mavlink_proto)
udp_dissector_table:add(14580, mavlink_proto)

local tcp_dissector_table = DissectorTable.get("tcp.port")
tcp_dissector_table:add(14550, mavlink_proto)
tcp_dissector_table:add(14580, mavlink_proto)

tcp_dissector_table:add(6000, mavlink_proto)
tcp_dissector_table:add(64015, mavlink_proto)
